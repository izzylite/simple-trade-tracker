{"version":3,"file":"static/js/116.04bacf13.chunk.js","mappings":"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","sources":["components/trades/ImageGrid.tsx","components/trades/ImageUploader.tsx","components/trades/TradeForm.tsx","components/trades/TradeList.tsx","components/trades/DayHeader.tsx","components/trades/DayDialog.tsx","utils/tradeExportImport.ts","components/CalendarGrid.tsx","components/TradeCalendar.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Box, IconButton, TextField, CircularProgress, Typography, keyframes } from '@mui/material';\nimport { Delete as DeleteIcon } from '@mui/icons-material';\nimport { alpha, useTheme } from '@mui/material/styles';\nimport { PendingImage, TradeImage } from './TradeForm'; // Assuming these are defined elsewhere\n\n// Extended TradeImage interface with grid positioning properties\nexport interface GridImage extends TradeImage {\n  id: string; // Ensure ID is present\n  url: string;\n  caption?: string;\n  width?: number;\n  height?: number;\n  row?: number;\n  column?: number;\n  columnWidth?: number; // Width as percentage (0-100)\n}\n\n// Extended PendingImage interface with grid positioning properties\nexport interface GridPendingImage extends Partial<PendingImage> {\n  id: string; // Ensure ID is present\n  file?: File;\n  preview?: string;\n  caption?: string;\n  width?: number;\n  height?: number;\n  uploadProgress?: number;\n  row?: number;\n  column?: number;\n  columnWidth?: number; // Width as percentage (0-100)\n}\n\ninterface ImageGridProps {\n  pendingImages: Array<PendingImage>;\n  uploadedImages: Array<TradeImage>;\n  editingTrade: boolean; // This prop seems unused in the provided snippet, but kept it\n  onImageCaptionChange: (index: number, caption: string, isPending: boolean) => void;\n  onImageRemove: (index: number, isPending: boolean) => void;\n  onImagesReordered?: (images: Array<GridImage | GridPendingImage>) => void; // Re-using this for layout changes\n}\n\n// --- Default values ---\nconst DEFAULT_COL_WIDTH = 100;\nconst MIN_COL_WIDTH_PERCENT = 10; // Minimum width for a column\n\n// Helper function to organize images into rows\nconst organizeImagesIntoRows = (\n  pendingImages: Array<PendingImage>,\n  uploadedImages: Array<TradeImage>\n): Array<Array<GridImage | GridPendingImage>> => {\n  console.log(\"Input to organizeImagesIntoRows:\",\n    \"Pending:\", pendingImages.map(img => ({ id: img.id, row: img.row, column: img.column, columnWidth: img.columnWidth })),\n    \"Uploaded:\", uploadedImages.map(img => ({ id: img.id, row: img.row, column: img.column, columnWidth: img.columnWidth })));\n\n  // Combine and ensure basic grid properties exist\n  const allImages: Array<GridImage | GridPendingImage> = [\n    ...pendingImages.map((img, i) => {\n      const result = {\n        ...img,\n        id: img.id ?? `pending-${i}`, // Ensure ID is present\n        isPending: true, // Add flag for easier type checking later\n        row: img.row !== undefined ? img.row : undefined,\n        column: img.column !== undefined ? img.column : undefined,\n        columnWidth: img.columnWidth !== undefined ? img.columnWidth : undefined,\n      };\n      console.log(`Processed pending image ${i}:`, result.id, result.row, result.column, result.columnWidth);\n      return result;\n    }),\n    ...uploadedImages.map((img, i) => {\n      const result = {\n        ...img,\n        id: img.id ?? `uploaded-${i}`, // Ensure ID is present\n        isPending: false,\n        row: img.row !== undefined ? img.row : undefined,\n        column: img.column !== undefined ? img.column : undefined,\n        columnWidth: img.columnWidth !== undefined ? img.columnWidth : undefined,\n      };\n      console.log(`Processed uploaded image ${i}:`, result.id, result.row, result.column, result.columnWidth);\n      return result;\n    }),\n  ];\n\n  // Group by row, handling undefined rows\n  const rowMap: { [key: number]: Array<GridImage | GridPendingImage> } = {};\n  let maxDefinedRow = -1;\n  allImages.forEach((image) => {\n    if (image.row !== undefined) {\n      if (!rowMap[image.row]) {\n        rowMap[image.row] = [];\n      }\n      rowMap[image.row].push(image);\n      maxDefinedRow = Math.max(maxDefinedRow, image.row);\n    }\n  });\n\n  // Place images with undefined rows into a grid layout\n  let nextRowIndex = maxDefinedRow + 1;\n  let currentRowIndex = nextRowIndex;\n  let currentColumnIndex = 0;\n  const imagesPerRow = 2; // Default to 2 images per row\n\n  // Filter images with undefined rows\n  const unassignedImages = allImages.filter(image => image.row === undefined);\n\n  // Assign rows and columns to unassigned images\n  unassignedImages.forEach((image, index) => {\n    // Calculate row and column\n    currentRowIndex = nextRowIndex + Math.floor(index / imagesPerRow);\n    currentColumnIndex = index % imagesPerRow;\n\n    // Assign row and column\n    image.row = currentRowIndex;\n    image.column = currentColumnIndex;\n    image.columnWidth = 100 / imagesPerRow; // Equal width distribution\n\n    // Add to row map\n    if (!rowMap[image.row]) {\n      rowMap[image.row] = [];\n    }\n    rowMap[image.row].push(image);\n  });\n\n   // Convert map to array and sort rows by index\n   const rows: Array<Array<GridImage | GridPendingImage>> = Object.entries(rowMap)\n   .sort(([a], [b]) => Number(a) - Number(b))\n   .map(([rowIndex, images]) => {\n     console.log(`Processing row ${rowIndex} with ${images.length} images`);\n     return images;\n   });\n\n  // Sort images within each row by column, assign defaults if needed\n  rows.forEach((row, rIndex) => {\n     // Assign row index if somehow missing (shouldn't happen with above logic)\n     row.forEach(img => img.row = rIndex);\n\n     // Sort by column, putting undefined columns last\n     row.sort((a, b) => {\n       const colA = a.column ?? Infinity;\n       const colB = b.column ?? Infinity;\n       return colA - colB;\n     });\n\n     // Assign column index and default width if needed\n     let totalDefinedWidth = 0;\n     let undefinedWidthCount = 0;\n     row.forEach((image, cIndex) => {\n       image.column = cIndex; // Ensure column indices are sequential\n       if (image.columnWidth === undefined) {\n         undefinedWidthCount++;\n       } else {\n         totalDefinedWidth += image.columnWidth;\n       }\n     });\n\n     // Distribute remaining width among columns that didn't have it defined\n     if (undefinedWidthCount > 0) {\n       const remainingWidth = Math.max(0, 100 - totalDefinedWidth);\n       const widthPerUndefined = remainingWidth / undefinedWidthCount;\n       row.forEach((image) => {\n         if (image.columnWidth === undefined) {\n           image.columnWidth = widthPerUndefined;\n         }\n       });\n     } else if (row.length > 0 && Math.abs(totalDefinedWidth - 100) > 0.1) {\n        // Adjust existing widths proportionally if they don't add up to 100\n        const scaleFactor = 100 / totalDefinedWidth;\n        row.forEach(image => {\n            image.columnWidth = (image.columnWidth ?? 0) * scaleFactor;\n        });\n     } else if (row.length > 0 && totalDefinedWidth === 0) {\n        // If all widths were 0 somehow, distribute equally\n        const equalWidth = 100 / row.length;\n         row.forEach(image => {\n            image.columnWidth = equalWidth;\n        });\n     }\n  });\n\n  // Remove empty rows just in case\n  const finalRows = rows.filter((row) => row && row.length > 0);\n\n  // Log the final organized rows\n  console.log(\"Final organized rows:\", finalRows.map((row, i) =>\n    `Row ${i}: ` + row.map(img => `(id: ${img.id}, col: ${img.column}, width: ${img.columnWidth}%)`).join(', ')\n  ));\n\n  return finalRows;\n};\n\n\nconst ImageGrid: React.FC<ImageGridProps> = ({\n  pendingImages,\n  uploadedImages,\n  editingTrade, // Used to determine if we should show shimmer for pending images\n  onImageCaptionChange,\n  onImageRemove,\n  onImagesReordered,\n}) => {\n  const theme = useTheme();\n  const [rows, setRows] = useState<Array<Array<GridImage | GridPendingImage>>>([]);\n  const [draggingImage, setDraggingImage] = useState<GridImage | GridPendingImage | null>(null);\n  const [dragOverRow, setDragOverRow] = useState<number | null>(null);\n  const [dragOverColumn, setDragOverColumn] = useState<number | null>(null);\n  // dragDirection state removed as it's no longer needed\n\n  // --- Resizing State ---\n  const [resizingState, setResizingState] = useState<{\n    rowIndex: number;\n    dividerIndex: number; // Index of the divider (0 means between col 0 and 1)\n    startX: number;\n    rowElementWidth: number;\n    initialWidths: number[]; // Initial widths of all items in the row\n  } | null>(null);\n  const gridContainerRef = useRef<HTMLDivElement>(null); // Ref for the main container\n  const dragImageRef = useRef<HTMLElement | null>(null); // Ref to track drag image for cleanup\n\n\n  // Organize images into rows when inputs change\n  useEffect(() => {\n    const newRows = organizeImagesIntoRows(pendingImages, uploadedImages);\n    // Debug the layout information\n    console.log(\"Organizing images with layout info:\",\n      pendingImages.map(img => ({ id: img.id, row: img.row, column: img.column, columnWidth: img.columnWidth })),\n      uploadedImages.map(img => ({ id: img.id, row: img.row, column: img.column, columnWidth: img.columnWidth })));\n    // console.log(\"Organized Rows:\", JSON.stringify(newRows, null, 2)); // Debugging\n    setRows(newRows);\n  }, [pendingImages, uploadedImages]);\n\n  // Helper to check if an image is PendingImage (using the flag added in organize)\n  const isPendingImage = (image: GridImage | GridPendingImage): boolean => {\n    // Check based on the structure or the added flag\n    return 'isPending' in image ? !!(image as any).isPending : 'file' in image;\n  };\n\n  // Helper to check if any image is currently uploading\n  const isAnyImageUploading = (): boolean => {\n    return pendingImages.some(img =>\n      img.uploadProgress !== undefined &&\n      img.uploadProgress > 0 &&\n      img.uploadProgress < 100\n    );\n  };\n\n  // --- Drag and Drop (Reordering) Handlers ---\n  const handleDragStart = (\n    e: React.DragEvent<HTMLDivElement>,\n    image: GridImage | GridPendingImage,\n    rowIndex: number,\n    columnIndex: number\n  ) => {\n    // Prevent initiating drag if resize is active or any image is uploading\n    if (resizingState || isAnyImageUploading()) {\n      e.preventDefault();\n      return;\n    }\n    setDraggingImage(image);\n    // console.log(\"Drag Start:\", image.id, `Row: ${rowIndex}`, `Col: ${columnIndex}`); // Debug\n    e.dataTransfer.setData('text/plain', JSON.stringify({\n      id: image.id, // Use image id for identification\n      isPending: isPendingImage(image),\n      sourceRowIndex: rowIndex,\n      sourceColumnIndex: columnIndex\n    }));\n    e.dataTransfer.effectAllowed = \"move\";\n\n    // Custom drag image with improved cleanup\n    const element = e.currentTarget;\n    const rect = element.getBoundingClientRect();\n    const offsetX = e.clientX - rect.left;\n    const offsetY = e.clientY - rect.top;\n    const dragImage = element.cloneNode(true) as HTMLElement;\n\n    // Apply styles to cloned drag image\n    dragImage.style.width = `${rect.width}px`;\n    dragImage.style.height = `${rect.height}px`;\n    dragImage.style.opacity = '0.7';\n    dragImage.style.position = 'absolute';\n    dragImage.style.top = '-1000px';\n    dragImage.style.left = '-1000px';\n    dragImage.style.pointerEvents = 'none';\n    dragImage.style.zIndex = '1000';\n\n    // Store reference for reliable cleanup\n    dragImageRef.current = dragImage;\n    document.body.appendChild(dragImage);\n    e.dataTransfer.setDragImage(dragImage, offsetX, offsetY);\n\n    // Use a longer timeout for more reliable cleanup\n    setTimeout(() => {\n        cleanupDragImage();\n    }, 100);\n  };\n\n  const handleDragOver = (\n    e: React.DragEvent<HTMLDivElement>,\n    rowIndex: number,\n    columnIndex: number | null // Allow null for dropping on row container\n  ) => {\n    e.preventDefault(); // Necessary to allow drop\n    e.dataTransfer.dropEffect = \"move\";\n    if (draggingImage) {\n      // Update target position for visual feedback\n      setDragOverRow(rowIndex);\n      // If columnIndex is null, it means hovering over row gap, target first column\n      setDragOverColumn(columnIndex ?? 0);\n    }\n  };\n\n  const handleDrop = (\n    e: React.DragEvent<HTMLDivElement>,\n    targetRowIndex: number,\n    targetColumnIndex: number | null // Null indicates dropping on row or new row area\n  ) => {\n    e.preventDefault();\n    e.stopPropagation(); // Prevent drop event from bubbling up if needed\n\n    if (!draggingImage) return;\n\n    const sourceData = JSON.parse(e.dataTransfer.getData('text/plain'));\n    const sourceRowIndex = sourceData.sourceRowIndex;\n    const sourceColumnIndex = sourceData.sourceColumnIndex;\n    const imageId = sourceData.id;\n    const isSourcePending = sourceData.isPending;\n\n    // Find the image being dragged using its ID and type\n    let imageToMove: GridImage | GridPendingImage | undefined;\n    let foundAtIndex: number | undefined;\n\n    const sourceCollection = isSourcePending ? pendingImages : uploadedImages;\n    foundAtIndex = sourceCollection.findIndex(img => img.id === imageId);\n\n    if (foundAtIndex === -1) {\n        console.error(\"Could not find dragged image in original collection!\");\n        handleDragEnd(); // Reset state\n        return;\n    }\n    // Get the actual image object from the original props/state before modification\n    imageToMove = rows[sourceRowIndex]?.[sourceColumnIndex];\n\n     if (!imageToMove) {\n        console.error(\"Inconsistency: Dragged image not found in current rows state at source index\");\n         // Fallback: Try finding by ID in flattened rows\n        const flatImages = rows.flat();\n        imageToMove = flatImages.find(img => img.id === imageId && isPendingImage(img) === isSourcePending);\n        if (!imageToMove) {\n            console.error(\"Could not find dragged image anywhere!\");\n            handleDragEnd();\n            return;\n        }\n        // If found via fallback, we might not know the exact sourceRow/Col index *relative to current state*\n        // This indicates a potential logic issue elsewhere, but we can try to proceed\n        console.warn(\"Found image via fallback, drag/drop might be slightly off.\");\n    }\n\n\n    // --- Apply the move ---\n    let newRows = rows.map(row => [...row]); // Deep copy rows\n\n    // 1. Remove image from its original position\n    let actualSourceRowIndex = -1;\n    let actualSourceColumnIndex = -1;\n     for(let r=0; r < newRows.length; r++) {\n         const cIndex = newRows[r].findIndex(img => img.id === imageToMove!.id && isPendingImage(img) === isPendingImage(imageToMove!));\n         if (cIndex !== -1) {\n             actualSourceRowIndex = r;\n             actualSourceColumnIndex = cIndex;\n             break;\n         }\n     }\n\n    if (actualSourceRowIndex === -1) {\n        console.error(\"Cannot find image to remove during drop!\");\n        handleDragEnd();\n        return;\n    }\n\n    newRows[actualSourceRowIndex].splice(actualSourceColumnIndex, 1);\n\n\n    // 2. Determine target position\n    let finalTargetRowIndex = targetRowIndex;\n    let finalTargetColumnIndex = targetColumnIndex ?? 0; // Default to start if null\n\n     // Check if dropping onto the \"new row\" area\n    if (targetRowIndex === newRows.filter(r => r.length > 0).length && targetColumnIndex === null) {\n        finalTargetRowIndex = newRows.length; // Target the next available row index\n        finalTargetColumnIndex = 0;\n    } else if (targetColumnIndex === null) {\n         // Dropping between rows or on row padding? Target start of the row.\n        finalTargetColumnIndex = 0;\n    }\n\n    // 3. Insert image at the target position\n    // Ensure target row exists\n    while (newRows.length <= finalTargetRowIndex) {\n        newRows.push([]);\n    }\n\n    // Insert the image\n    newRows[finalTargetRowIndex].splice(finalTargetColumnIndex, 0, imageToMove);\n\n    // --- Recalculate Layout Properties ---\n    newRows = newRows.filter(row => row.length > 0); // Remove empty rows\n\n    newRows.forEach((row, rIndex) => {\n        const widthPerColumn = 100 / row.length; // Equal width distribution after move\n        row.forEach((img, cIndex) => {\n            img.row = rIndex;\n            img.column = cIndex;\n            // Reset width only if it changed row or if the row now has only one image\n            if (img.id === imageToMove!.id || row.length === 1 || actualSourceRowIndex !== rIndex) {\n               img.columnWidth = widthPerColumn;\n            }\n             // Ensure existing images in the target row also get widths adjusted if needed\n             else if (rIndex === finalTargetRowIndex && row.length > 1) {\n                 // This part needs refinement: Adjust widths proportionally based on *previous* widths?\n                 // For simplicity now, we redistribute equally in the target row upon drop.\n                 // A more complex approach would try to maintain relative proportions.\n                 img.columnWidth = widthPerColumn;\n             }\n             // Adjust widths in the source row if it wasn't emptied\n             else if (rIndex === actualSourceRowIndex && newRows[rIndex]?.length > 0) {\n                 const sourceRowWidth = 100 / newRows[rIndex].length;\n                 img.columnWidth = sourceRowWidth;\n             }\n\n             // Fallback safety check for width\n             if (img.columnWidth === undefined || img.columnWidth === null || isNaN(img.columnWidth) || img.columnWidth <=0) {\n                 img.columnWidth = 100 / row.length;\n             }\n        });\n         // Re-normalize widths for the row to ensure they sum to 100%\n         const currentRowTotalWidth = row.reduce((sum, img) => sum + (img.columnWidth || 0), 0);\n         if (currentRowTotalWidth > 0 && Math.abs(currentRowTotalWidth - 100) > 0.1) {\n             const scale = 100 / currentRowTotalWidth;\n             row.forEach(img => img.columnWidth = (img.columnWidth || 0) * scale);\n         } else if (currentRowTotalWidth === 0 && row.length > 0) {\n              const equalWidth = 100 / row.length;\n              row.forEach(img => img.columnWidth = equalWidth);\n         }\n    });\n\n\n    // Update state and notify parent\n    setRows(newRows);\n    if (onImagesReordered) {\n      const allImages = newRows.flat();\n      onImagesReordered(allImages);\n    }\n\n    // Reset drag state\n    handleDragEnd();\n  };\n\n  // Helper function to clean up drag image\n  const cleanupDragImage = () => {\n    if (dragImageRef.current && document.body.contains(dragImageRef.current)) {\n      document.body.removeChild(dragImageRef.current);\n    }\n    dragImageRef.current = null;\n  };\n\n  const handleDragEnd = () => {\n    setDraggingImage(null);\n    setDragOverRow(null);\n    setDragOverColumn(null);\n    // Clean up any lingering drag image\n    cleanupDragImage();\n  };\n\n  // --- Resizing Handlers ---\n  const handleResizeMouseDown = (\n      e: React.MouseEvent<HTMLDivElement>,\n      rowIndex: number,\n      dividerIndex: number // Index of the divider (between col dividerIndex and dividerIndex + 1)\n  ) => {\n      e.preventDefault();\n      e.stopPropagation(); // Prevent drag-start on the image behind\n\n      // Prevent resizing if any image is uploading\n      if (isAnyImageUploading()) {\n        return;\n      }\n\n      const rowElement = (e.target as HTMLElement).closest('.image-row-container');\n      if (!rowElement) return;\n\n      const rowElementWidth = rowElement.getBoundingClientRect().width;\n      if (rowElementWidth <= 0) return; // Avoid division by zero\n\n      // Store initial state for resizing calculation\n      setResizingState({\n          rowIndex,\n          dividerIndex,\n          startX: e.clientX,\n          rowElementWidth,\n          initialWidths: rows[rowIndex].map(img => img.columnWidth || 0), // Store initial widths of the row\n      });\n  };\n\n  // Helper function to normalize column widths in a row\n  const normalizeRowWidths = useCallback((row: Array<GridImage | GridPendingImage>, minWidth = MIN_COL_WIDTH_PERCENT) => {\n    if (!row || row.length === 0) return row;\n\n    // Calculate total width\n    const totalWidth = row.reduce((sum, img) => sum + (img.columnWidth || 0), 0);\n\n    // If total is already close to 100%, no need to normalize\n    if (Math.abs(totalWidth - 100) < 0.1) return row;\n\n    // If total is 0, distribute equally\n    if (totalWidth === 0) {\n      const equalWidth = 100 / row.length;\n      row.forEach(img => img.columnWidth = equalWidth);\n      return row;\n    }\n\n    // Scale all widths proportionally\n    const scaleFactor = 100 / totalWidth;\n    row.forEach(img => {\n      img.columnWidth = (img.columnWidth || 0) * scaleFactor;\n      // Ensure minimum width\n      img.columnWidth = Math.max(minWidth, img.columnWidth);\n    });\n\n    // Final check - if we're still not at 100% due to min width constraints,\n    // adjust the largest column to compensate\n    const newTotal = row.reduce((sum, img) => sum + (img.columnWidth || 0), 0);\n    if (Math.abs(newTotal - 100) > 0.1) {\n      // Find the largest column\n      const largestColIndex = row.reduce(\n        (maxIndex, img, index, arr) =>\n          (img.columnWidth || 0) > (arr[maxIndex].columnWidth || 0) ? index : maxIndex,\n        0\n      );\n      // Adjust it to make the total 100%\n      row[largestColIndex].columnWidth = (row[largestColIndex].columnWidth || 0) - (newTotal - 100);\n    }\n\n    return row;\n  }, []);\n\n  // Use useCallback for handlers used in effects to prevent unnecessary re-renders/listener attachments\n  const handleResizeMouseMove = useCallback((e: MouseEvent) => {\n    if (!resizingState) return;\n\n    const { rowIndex, dividerIndex, startX, rowElementWidth, initialWidths } = resizingState;\n\n    const currentX = e.clientX;\n    const deltaX = currentX - startX;\n    const deltaPercent = (deltaX / rowElementWidth) * 100;\n\n    // Create a deep copy of the rows for modification\n    const newRows = [...rows.map(row => [...row.map(img => ({ ...img }))])];\n    const targetRow = newRows[rowIndex];\n\n    // Calculate total initial width left and right of the divider\n    let totalInitialLeftWidth = 0;\n    for (let i = 0; i <= dividerIndex; i++) {\n      totalInitialLeftWidth += initialWidths[i];\n    }\n    let totalInitialRightWidth = 0;\n    for (let i = dividerIndex + 1; i < initialWidths.length; i++) {\n      totalInitialRightWidth += initialWidths[i];\n    }\n\n    // Calculate the new target total widths for left/right sections\n    let newTotalLeftWidth = totalInitialLeftWidth + deltaPercent;\n    let newTotalRightWidth = totalInitialRightWidth - deltaPercent;\n\n    // Apply minimum width constraints\n    const numLeftImages = dividerIndex + 1;\n    const numRightImages = initialWidths.length - numLeftImages;\n    const minTotalLeftWidth = numLeftImages * MIN_COL_WIDTH_PERCENT;\n    const minTotalRightWidth = numRightImages * MIN_COL_WIDTH_PERCENT;\n\n    // Clamp totals\n    newTotalLeftWidth = Math.max(minTotalLeftWidth, newTotalLeftWidth);\n    newTotalRightWidth = Math.max(minTotalRightWidth, newTotalRightWidth);\n\n    // Ensure the sum is still 100% after clamping\n    const currentTotal = newTotalLeftWidth + newTotalRightWidth;\n    if (Math.abs(currentTotal - 100) > 0.1) {\n      const scaleFactor = 100 / currentTotal;\n      newTotalLeftWidth *= scaleFactor;\n      newTotalRightWidth *= scaleFactor;\n\n      // Re-check min width constraints after scaling\n      newTotalLeftWidth = Math.max(minTotalLeftWidth, newTotalLeftWidth);\n      newTotalRightWidth = Math.max(minTotalRightWidth, newTotalRightWidth);\n\n      // If one side hit min, give remainder to the other\n      if (newTotalLeftWidth === minTotalLeftWidth) {\n        newTotalRightWidth = 100 - newTotalLeftWidth;\n      } else if (newTotalRightWidth === minTotalRightWidth) {\n        newTotalLeftWidth = 100 - newTotalRightWidth;\n      }\n    }\n\n    // Distribute new total widths proportionally\n    // Left side\n    for (let i = 0; i <= dividerIndex; i++) {\n      let newWidth = 0;\n      if (totalInitialLeftWidth > 0) {\n        const proportion = initialWidths[i] / totalInitialLeftWidth;\n        newWidth = newTotalLeftWidth * proportion;\n      } else {\n        newWidth = newTotalLeftWidth / numLeftImages;\n      }\n      targetRow[i].columnWidth = Math.max(MIN_COL_WIDTH_PERCENT, newWidth);\n    }\n\n    // Right side\n    for (let i = dividerIndex + 1; i < targetRow.length; i++) {\n      let newWidth = 0;\n      if (totalInitialRightWidth > 0) {\n        const proportion = initialWidths[i] / totalInitialRightWidth;\n        newWidth = newTotalRightWidth * proportion;\n      } else {\n        newWidth = newTotalRightWidth / numRightImages;\n      }\n      targetRow[i].columnWidth = Math.max(MIN_COL_WIDTH_PERCENT, newWidth);\n    }\n\n    // Final normalization to ensure total is exactly 100%\n    normalizeRowWidths(targetRow);\n\n    // Update the state visually during drag\n    setRows(newRows);\n  }, [resizingState, rows, normalizeRowWidths]); // Added normalizeRowWidths to dependencies\n\n  const handleResizeMouseUp = useCallback(() => {\n      if (!resizingState) return;\n\n      // Persist the final state\n      if (onImagesReordered) {\n           // Find the updated row state (rows state should be current from mouseMove)\n           const finalRowIndex = resizingState.rowIndex;\n           if (rows[finalRowIndex]) {\n                const allImages = rows.flat(); // Flatten the current state\n                onImagesReordered(allImages); // Send the updated layout\n           }\n      }\n      setResizingState(null); // End resizing\n  }, [resizingState, rows, onImagesReordered]); // Include rows and callback\n\n\n  // Effect to add/remove global listeners for resizing\n  useEffect(() => {\n      if (resizingState) {\n          window.addEventListener('mousemove', handleResizeMouseMove);\n          window.addEventListener('mouseup', handleResizeMouseUp);\n          // Optional: Add cursor style to body\n          document.body.style.cursor = 'col-resize';\n      } else {\n          window.removeEventListener('mousemove', handleResizeMouseMove);\n          window.removeEventListener('mouseup', handleResizeMouseUp);\n          // Optional: Reset cursor style\n          document.body.style.cursor = '';\n      }\n\n      // Cleanup function\n      return () => {\n          window.removeEventListener('mousemove', handleResizeMouseMove);\n          window.removeEventListener('mouseup', handleResizeMouseUp);\n          // Optional: Ensure cursor is reset if component unmounts during resize\n          document.body.style.cursor = '';\n      };\n  }, [resizingState, handleResizeMouseMove, handleResizeMouseUp]); // Add handlers to dependency array\n\n\n  return (\n    <Box sx={{ width: '100%' }} ref={gridContainerRef}>\n      {rows.map((row, rowIndex) => (\n        <Box\n          key={`row-${rowIndex}`}\n          className=\"image-row-container\" // Add class for easy selection\n          sx={{\n            display: 'flex',\n            width: '100%',\n            marginBottom: 3, // Use full property name to avoid conflicts\n            position: 'relative',\n            gap: 1, // Add small gap between columns (8px)\n            // All directional drop indicators removed\n          }}\n          // Add DragOver handler for dropping between rows (targets column 0)\n          onDragOver={(e) => handleDragOver(e, rowIndex, 0)}\n           // Add drop handler here too if needed for row-level drops (currently handled by image drop)\n           // onDrop={(e) => handleDrop(e, rowIndex, 0)} // Example if needed\n        >\n          {row.map((image, columnIndex) => {\n            const isPending = isPendingImage(image);\n            const pendingImg = isPending ? image as GridPendingImage : null;\n            const uploadedImg = !isPending ? image as GridImage : null;\n            const imageId = isPending ? pendingImg!.id : uploadedImg!.id;\n            const isLastColumn = columnIndex === row.length - 1;\n\n            return (\n              <React.Fragment key={`image-frag-${imageId}-${rowIndex}-${columnIndex}`}>\n                {/* Image Container */}\n                <Box\n                    key={`image-${imageId}-${rowIndex}-${columnIndex}`}\n                    sx={{\n                        position: 'relative',\n                        // Simplified width calculation - use percentage width directly\n                        width: `${image.columnWidth || DEFAULT_COL_WIDTH}%`,\n                        // No margin needed since we're using flex gap\n                        height: 'auto',\n                        borderRadius: 1,\n                        overflow: 'visible', // Allow potential overflow for captions if needed, adjust styling\n                        \n                        display: 'flex',\n                        flexDirection: 'column',\n                        opacity: draggingImage === image ? 0.5 : 1,\n                        backgroundColor: 'transparent',\n                        transition: 'border-color 0.2s, background-color 0.2s, opacity 0.2s, box-shadow 0.2s',\n                        // All directional drop indicators removed\n                        ...(draggingImage && dragOverRow === rowIndex && dragOverColumn === columnIndex && {\n                            backgroundColor: alpha(theme.palette.primary.main, 0.1),\n                        }),\n                        '&:hover .resize-handle': { // Show resize handle on hover of image container\n                            opacity: isAnyImageUploading() ? 0.2 : 1, // Dim resize handle during uploads\n                        },\n                        // Visual indication that dragging is disabled during uploads\n                        cursor: isAnyImageUploading() ? 'not-allowed' : 'grab',\n                        filter: isAnyImageUploading() ? 'grayscale(0.2)' : 'none',\n                    }}\n                    draggable={!isAnyImageUploading()} // Disable draggable attribute during uploads\n                    onDragStart={(e) => handleDragStart(e, image, rowIndex, columnIndex)}\n                    onDragOver={(e) => handleDragOver(e, rowIndex, columnIndex)}\n                    onDrop={(e) => handleDrop(e, rowIndex, columnIndex)}\n                    onDragEnd={handleDragEnd}\n                >\n                  {/* Image and Caption Content (mostly unchanged) */}\n                  <Box sx={{ overflow: 'hidden', borderRadius: '4px 4px 0 0' }}> {/* Inner box for image clipping */}\n                        {isPending ? (\n                            // Pending image structure (unchanged)\n                             <>\n                                <Box\n                                    sx={{\n                                        width: '100%',\n                                        height: 'auto',\n                                        // Only apply maxHeight when there are multiple images in a row\n                                        maxHeight: row.length > 1 ? 300 : 'none',\n                                        overflow: 'hidden',\n                                        position: 'relative',\n                                        backgroundColor: alpha(theme.palette.divider, 0.1), // Placeholder bg\n                                        aspectRatio: pendingImg?.width && pendingImg?.height ? `${pendingImg.width}/${pendingImg.height}` : '16/9', // Default aspect ratio\n                                    }}\n                                >\n                                {/* Progress Indicator */}\n                                {pendingImg?.uploadProgress !== undefined && pendingImg.uploadProgress > 0 && pendingImg.uploadProgress < 100 && (\n                                    <Box sx={{ position: 'absolute', top: 0, left: 0, right: 0, bottom: 0, display: 'flex', alignItems: 'center', justifyContent: 'center', backgroundColor: 'rgba(0, 0, 0, 0.5)', zIndex: 2 }}>\n                                        <Box sx={{ position: 'relative', display: 'inline-flex' }}>\n                                            <CircularProgress variant=\"determinate\" value={pendingImg.uploadProgress} size={60} sx={{ color: 'white' }} />\n                                            <Box\n                                                sx={{\n                                                    top: 0,\n                                                    left: 0,\n                                                    bottom: 0,\n                                                    right: 0,\n                                                    position: 'absolute',\n                                                    display: 'flex',\n                                                    alignItems: 'center',\n                                                    justifyContent: 'center',\n                                                }}\n                                            >\n                                                <Typography variant=\"caption\" component=\"div\" sx={{ color: 'white', fontWeight: 'bold' }}>\n                                                    {`${Math.round(pendingImg.uploadProgress)}%`}\n                                                </Typography>\n                                            </Box>\n                                        </Box>\n                                    </Box>\n                                )}\n                                {/* Image Preview */}\n                                <img\n                                    src={pendingImg?.preview}\n                                    alt=\"Pending Upload\"\n                                    style={{ display: 'block', width: '100%', height: '100%', objectFit: 'contain' }}\n                                />\n                                {/* Delete Button */}\n                                {(!pendingImg?.uploadProgress || pendingImg.uploadProgress === 100 || pendingImg.uploadProgress === -1) && (\n                                     <IconButton size=\"small\" onClick={() => onImageRemove(pendingImages.findIndex(img => img.id === image.id), true)}\n                                         sx={{ position: 'absolute', top: 4, right: 4, backgroundColor: 'rgba(0, 0, 0, 0.5)', color: 'white', zIndex: 10, '&:hover': { backgroundColor: 'rgba(0, 0, 0, 0.7)' } }}>\n                                         <DeleteIcon fontSize=\"small\" />\n                                     </IconButton>\n                                 )}\n                                </Box>\n                                {/* Caption Field - Multiline with smaller font */}\n                                <TextField\n                                    placeholder=\"Add a caption...\"\n                                    value={pendingImg?.caption || ''}\n                                    onChange={(e) => onImageCaptionChange(pendingImages.findIndex(img => img.id === image.id), e.target.value, true)}\n                                    variant=\"standard\"\n                                    multiline\n                                    minRows={1}\n                                    maxRows={20} // Large number to effectively disable scrolling\n                                    fullWidth\n                                    // Disable the field when image is uploading\n                                    disabled={pendingImg?.uploadProgress !== undefined && pendingImg.uploadProgress > 0 && pendingImg.uploadProgress < 100}\n                                    sx={{\n                                        px: 1,\n                                        py: 0.5,\n                                        backgroundColor: theme.palette.background.paper,\n                                        fontSize: '0.75rem', // Smaller font size\n                                        '& .MuiInput-underline:before': { borderBottomColor: 'transparent' },\n                                        '& .MuiInput-underline:after': { borderBottomColor: 'transparent' },\n                                        '& .MuiInput-underline:hover:not(.Mui-disabled):before': { borderBottomColor: 'transparent' },\n                                        '& .MuiInputBase-input': { fontSize: '0.75rem' }, // Ensure input text is also smaller\n                                        '& .MuiInputBase-root': { overflow: 'visible' }, // Prevent scrollbars\n                                        // Style for disabled state\n                                        '&.Mui-disabled': {\n                                            opacity: 0.7,\n                                            '& .MuiInputBase-input': { color: 'text.disabled' }\n                                        }\n                                    }}\n                                />\n                            </>\n                        ) : (\n                            // Uploaded image structure (unchanged)\n                            <>\n                                <Box\n                                    sx={{\n                                        width: '100%',\n                                        height: 'auto',\n                                        // Only apply maxHeight when there are multiple images in a row\n                                        maxHeight: row.length > 1 ? 300 : 'none',\n                                        overflow: 'hidden',\n                                        position: 'relative',\n                                        backgroundColor: alpha(theme.palette.divider, 0.1), // Placeholder bg\n                                        aspectRatio: uploadedImg?.width && uploadedImg?.height ? `${uploadedImg.width}/${uploadedImg.height}` : '16/9', // Default aspect ratio\n                                    }}\n                                >\n                                {/* Loading Placeholder (optional, could use skeleton) */}\n                                {/* <CircularProgress size={24} sx={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', opacity: 0.5, zIndex: 0 }} /> */}\n                                {/* Show shimmer for pending images when editing a trade */}\n                                {editingTrade && uploadedImg?.pending ? (\n                                    <ShimmerImageBox image={uploadedImg} theme={theme} />\n                                ) : (\n                                    /* Actual Image */\n                                    <img\n                                        src={uploadedImg?.url}\n                                        alt={uploadedImg?.caption || \"Uploaded image\"}\n                                        style={{ display: 'block', width: '100%', height: '100%', objectFit: 'contain', position: 'relative', zIndex: 1 }}\n                                        // onLoad/onError handlers could be added here\n                                    />\n                                )}\n                                 {/* Delete Button */}\n                                <IconButton size=\"small\" onClick={() => onImageRemove(uploadedImages.findIndex(img => img.id === image.id), false)}\n                                    sx={{ position: 'absolute', top: 4, right: 4, backgroundColor: 'rgba(0, 0, 0, 0.5)', color: 'white', zIndex: 10, '&:hover': { backgroundColor: 'rgba(0, 0, 0, 0.7)'} }}>\n                                    <DeleteIcon fontSize=\"small\" />\n                                </IconButton>\n                                </Box>\n                                {/* Caption Field - Multiline with smaller font */}\n                                <TextField\n                                    placeholder=\"Add a caption...\"\n                                    value={uploadedImg?.caption || ''}\n                                    onChange={(e) => onImageCaptionChange(uploadedImages.findIndex(img => img.id === image.id), e.target.value, false)}\n                                    variant=\"standard\"\n                                    multiline\n                                    minRows={1}\n                                    maxRows={20} // Large number to effectively disable scrolling\n                                    fullWidth\n                                    // Disable the field when any image is uploading\n                                    disabled={isAnyImageUploading() || (uploadedImg?.pending === true)}\n                                    sx={{\n                                        px: 1,\n                                        py: 0.5,\n                                        backgroundColor: theme.palette.background.paper,\n                                        fontSize: '0.75rem', // Smaller font size\n                                        '& .MuiInput-underline:before': { borderBottomColor: 'transparent' },\n                                        '& .MuiInput-underline:after': { borderBottomColor: 'transparent' },\n                                        '& .MuiInput-underline:hover:not(.Mui-disabled):before': { borderBottomColor: 'transparent' },\n                                        '& .MuiInputBase-input': { fontSize: '0.75rem' }, // Ensure input text is also smaller\n                                        '& .MuiInputBase-root': { overflow: 'visible' }, // Prevent scrollbars\n                                        // Style for disabled state\n                                        '&.Mui-disabled': {\n                                            opacity: 0.7,\n                                            '& .MuiInputBase-input': { color: 'text.disabled' }\n                                        }\n                                    }}\n                                />\n                            </>\n                        )}\n                  </Box> {/* End inner box for image clipping */}\n\n                </Box>\n\n                {/* Resize Handle (Divider) - Render between images */}\n                {!isLastColumn && row.length > 1 && (\n                  <Box\n                    className=\"resize-handle\"\n                    sx={{\n                      width: '8px', // Wider clickable area\n                      position: 'relative', // Position relative to the flex flow\n                      cursor: isAnyImageUploading() ? 'not-allowed' : 'col-resize',\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                      flexShrink: 0, // Don't allow the handle itself to shrink\n                      zIndex: 10, // Higher z-index to ensure it's above images\n                      // Visual divider line\n                      '&::before': {\n                        content: '\"\"',\n                        position: 'absolute',\n                        top: '5%', // Extend more of the height\n                        bottom: '5%',\n                        left: '3px', // Center the visual line within the 8px handle\n                        width: '2px',\n                        backgroundColor: resizingState && resizingState.rowIndex === rowIndex && resizingState.dividerIndex === columnIndex\n                          ? theme.palette.primary.main // Highlight when dragging this handle\n                          : isAnyImageUploading()\n                            ? alpha(theme.palette.divider, 0.4) // Dimmed when uploads in progress\n                            : alpha(theme.palette.divider, 0.8), // Normal color\n                        // Initially invisible, only visible on hover or when resizing\n                        opacity: resizingState && resizingState.rowIndex === rowIndex && resizingState.dividerIndex === columnIndex ? 1 : 0,\n                        transition: 'opacity 0.2s, background-color 0.2s, width 0.2s',\n                      },\n                      // Hover effect - make visible when hovered\n                      '&:hover::before': {\n                        opacity: isAnyImageUploading() ? 0.3 : 1,\n                        width: isAnyImageUploading() ? '2px' : '3px',\n                        backgroundColor: isAnyImageUploading()\n                          ? alpha(theme.palette.divider, 0.4)\n                          : theme.palette.primary.light,\n                      },\n                      // Active state during resize\n                      ...(resizingState && resizingState.rowIndex === rowIndex && resizingState.dividerIndex === columnIndex && {\n                        '&::before': {\n                          opacity: 1,\n                          width: '3px',\n                          backgroundColor: theme.palette.primary.main,\n                        }\n                      }),\n                    }}\n                    onMouseDown={(e) => handleResizeMouseDown(e, rowIndex, columnIndex)}\n                  />\n                )}\n              </React.Fragment>\n            );\n          })}\n        </Box>\n      ))}\n\n      {/* Drop area for creating a new row at the end */}\n      {draggingImage && !isAnyImageUploading() && (\n        <Box\n          sx={{\n            width: '100%',\n            height: 80,\n            border: `2px dashed ${dragOverRow === rows.length && dragOverColumn === 0 ? theme.palette.primary.main : alpha(theme.palette.divider, 0.5)}`,\n            borderRadius: 1,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            backgroundColor: dragOverRow === rows.length && dragOverColumn === 0 ? alpha(theme.palette.primary.main, 0.1) : 'transparent',\n            color: theme.palette.text.secondary,\n            transition: 'all 0.2s ease-in-out',\n            marginBottom: 2,\n            position: 'relative',\n            // Visual feedback when dragging over with New Row label\n            ...(dragOverRow === rows.length && dragOverColumn === 0 && {\n              backgroundColor: alpha(theme.palette.primary.main, 0.1),\n              border: `2px solid ${theme.palette.primary.main}`,\n              '&::after': {\n                content: '\"New Row\"',\n                position: 'absolute',\n                top: '-10px',\n                right: '10px',\n                backgroundColor: theme.palette.primary.main,\n                color: theme.palette.primary.contrastText,\n                padding: '2px 8px',\n                borderRadius: '4px',\n                fontSize: '0.7rem',\n                fontWeight: 'bold',\n                zIndex: 10,\n                boxShadow: `0 2px 4px ${alpha(theme.palette.common.black, 0.2)}`\n              }\n            })\n          }}\n          onDragOver={(e) => handleDragOver(e, rows.length, 0)} // Target next row index, column 0\n          onDragLeave={() => { /* Reset specific visual state if needed */ }}\n          onDrop={(e) => handleDrop(e, rows.length, null)} // Use null for columnIndex to indicate new row area\n        >\n          Drop here to create a new row\n        </Box>\n      )}\n    </Box>\n  );\n};\n\n// ShimmerImageBox component for displaying a shimmer effect during image upload\nconst ShimmerImageBox: React.FC<{\n  image: GridImage;\n  theme: any; // Theme is used inside the background function\n}> = ({ image, theme }) => {\n  // Define shimmer animation\n  const shimmer = keyframes`\n    0% {\n      background-position: -200% 0;\n    }\n    100% {\n      background-position: 200% 0;\n    }\n  `;\n\n  return (\n    <Box\n      sx={{\n        width: '100%',\n        height: 'auto',\n        maxHeight: 300,\n        overflow: 'hidden',\n        position: 'relative',\n        ...(image.width && image.height ? {\n          paddingTop: `${(image.height / image.width) * 100}%`\n        } : {})\n      }}\n    >\n      <Box\n        sx={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%',\n          background: () => {\n            // Use slightly more pronounced colors for better visibility\n            const baseColor = theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.04)';\n            const shimmerColor = theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.15)' : 'rgba(0, 0, 0, 0.1)';\n            return `linear-gradient(90deg, ${baseColor} 25%, ${shimmerColor} 50%, ${baseColor} 75%)`;\n          },\n          backgroundSize: '200% 100%',\n          animation: `${shimmer} 1.5s infinite linear`,\n          willChange: 'background-position', // Optimize animation performance\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          zIndex: 1\n        }}\n      >\n        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 1 }}>\n          <CircularProgress size={24} color=\"primary\" />\n          <Typography variant=\"caption\" sx={{ color: 'text.secondary', fontWeight: 500 }}>\n            Uploading...\n          </Typography>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default ImageGrid;\n","import React, { useRef, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  Button,\n  keyframes,\n  CircularProgress\n} from '@mui/material';\nimport { AddPhotoAlternate } from '@mui/icons-material';\n\nimport { PendingImage, TradeImage } from './TradeForm';\nimport ImageGrid, { GridImage, GridPendingImage } from './ImageGrid';\n\ninterface ImageUploaderProps {\n  pendingImages: Array<PendingImage>;\n  uploadedImages: Array<TradeImage>;\n  editingTrade: boolean\n  onImageUpload: (files: FileList) => void;\n  onImageCaptionChange: (index: number, caption: string, isPending: boolean) => void;\n  onImageRemove: (index: number, isPending: boolean) => void;\n  onImagesReordered?: (images: Array<GridImage | GridPendingImage>) => void;\n}\n\n\n\nconst ImageUploader: React.FC<ImageUploaderProps> = ({\n  pendingImages,\n  uploadedImages,\n  editingTrade,\n  onImageUpload,\n  onImageCaptionChange,\n  onImageRemove,\n  onImagesReordered\n}) => {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n      onImageUpload(e.target.files);\n      // Reset the input value so the same file can be selected again\n      e.target.value = '';\n    }\n  };\n\n  const handleAddImageClick = () => {\n    fileInputRef.current?.click();\n  };\n\n  const handlePaste = (event: ClipboardEvent) => {\n    const items = event.clipboardData?.items;\n    if (!items) return;\n\n    const imageFiles: File[] = [];\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n      if (item.type.indexOf('image') !== -1) {\n        const file = item.getAsFile();\n        if (file) {\n          imageFiles.push(file);\n        }\n      }\n    }\n\n    if (imageFiles.length > 0) {\n      const dataTransfer = new DataTransfer();\n      imageFiles.forEach(file => dataTransfer.items.add(file));\n      onImageUpload(dataTransfer.files);\n    }\n  };\n\n  useEffect(() => {\n    // Add paste event listener to the document\n    document.addEventListener('paste', handlePaste);\n\n    // Clean up the event listener when the component unmounts\n    return () => {\n      document.removeEventListener('paste', handlePaste);\n    };\n  }, [onImageUpload]); // Add onImageUpload to the dependency array\n\n  return (\n    <Box sx={{ mt: 2 }}>\n      <Typography variant=\"subtitle1\" sx={{ mb: 1 }}>\n        Images\n      </Typography>\n\n      <input\n        type=\"file\"\n        accept=\"image/*\"\n        multiple\n        ref={fileInputRef}\n        style={{ display: 'none' }}\n        onChange={handleFileInputChange}\n      />\n\n      <Box sx={{ mb: 2 }}>\n        <Button\n          variant=\"outlined\"\n          startIcon={<AddPhotoAlternate />}\n          onClick={handleAddImageClick}\n          sx={{ mb: 1 }}\n        >\n          Add Images\n        </Button>\n        <Typography variant=\"caption\" color=\"text.secondary\" display=\"block\">\n          You can also paste images directly (Ctrl+V)\n        </Typography>\n      </Box>\n\n      {(pendingImages.length > 0 || uploadedImages.length > 0) && (\n        <ImageGrid\n          pendingImages={pendingImages}\n          uploadedImages={uploadedImages}\n          editingTrade={editingTrade}\n          onImageCaptionChange={onImageCaptionChange}\n          onImageRemove={onImageRemove}\n          onImagesReordered={onImagesReordered}\n        />\n      )}\n    </Box>\n  );\n};\n \n\nexport default ImageUploader;\n","import React from 'react';\nimport {\n  TextField,\n  FormControl,\n  FormLabel,\n  RadioGroup,\n  FormControlLabel,\n  Radio,\n  Select,\n  MenuItem,\n  InputLabel,\n  Box,\n  Autocomplete,\n  Chip,\n  FormControlLabel as MuiFormControlLabel,\n  Checkbox,\n  Typography\n} from '@mui/material';\nimport { Trade } from '../../types/trade';\nimport { FormField } from '../StyledComponents';\nimport {\n  getTagChipStyles,\n  formatTagForDisplay,\n  isGroupedTag,\n  getTagGroup\n} from '../../utils/tagColors';\nimport { useTheme } from '@mui/material/styles';\nimport ImageUploader from './ImageUploader';\nimport { GridImage, GridPendingImage } from './ImageGrid';\nimport { formatCurrency } from '../../utils/formatters';\n\nexport interface NewTradeForm {\n  id: string;\n  name: string;\n  amount: string;\n  type: 'win' | 'loss' | 'breakeven';\n  entry: string;\n  exit: string;\n  date?: Date | null;\n  tags: string[];\n  riskToReward: string;\n  partialsTaken: boolean;\n  session: 'Asia' | 'London' | 'NY AM' | 'NY PM' | '';\n  notes: string;\n  pendingImages: Array<PendingImage>;\n  uploadedImages: Array<TradeImage>;\n  isTemporary?: boolean;\n}\n\nexport interface PendingImage {\n  id?: string;\n  file: File;\n  preview: string;\n  caption?: string;\n  width?: number;\n  height?: number;\n  row?: number;\n  column?: number;\n  columnWidth?: number; // Width as percentage (0-100)\n  uploadProgress?: number;\n}\n\nexport interface TradeImage {\n    url: string;\n    id: string;\n    pending?: boolean;\n    caption?: string;\n    width?: number;\n    height?: number;\n    row?: number;\n    column?: number;\n    columnWidth?: number; // Width as percentage (0-100)\n}\ninterface TradeFormProps {\n  newTrade: NewTradeForm;\n  editingTrade: Trade | null;\n  allTags: string[];\n  isSubmitting: boolean;\n  riskPerTrade?: number;\n  accountBalance: number;\n  dynamicRiskEnabled?: boolean;\n  increasedRiskPercentage?: number;\n  profitThresholdPercentage?: number;\n  calculateCumulativePnl(newTrade?: NewTradeForm): number;\n  calculateAmountFromRiskToReward: (rr: number,cumulativePnL: number) => number;\n  onNameChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onAmountChange: (amount: string) => void;\n  onTypeChange: (e: any) => void;\n  onEntryChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onExitChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onRiskToRewardChange: (riskToReward: string) => void;\n  onPartialsTakenChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onSessionChange: (e: any) => void;\n  onNotesChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onTagsChange: (event: React.SyntheticEvent, newValue: string[]) => void;\n  onImageUpload: (files: FileList) => void;\n  onImageCaptionChange: (index: number, caption: string, isPending: boolean) => void;\n  onImageRemove: (index: number, isPending: boolean) => void;\n  onImagesReordered?: (images: Array<GridImage | GridPendingImage>) => void;\n  onSubmit: (e: React.FormEvent) => void;\n}\n\nconst TradeForm: React.FC<TradeFormProps> = ({\n  newTrade,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  editingTrade,\n  allTags,\n  isSubmitting,\n  riskPerTrade,\n  accountBalance,\n  dynamicRiskEnabled,\n  increasedRiskPercentage,\n  profitThresholdPercentage,\n  calculateAmountFromRiskToReward,\n  calculateCumulativePnl,\n  onNameChange,\n  onAmountChange,\n  onTypeChange,\n  onEntryChange,\n  onExitChange,\n  onRiskToRewardChange,\n  onPartialsTakenChange,\n  onSessionChange,\n  onNotesChange,\n  onTagsChange,\n  onImageUpload,\n  onImageCaptionChange,\n  onImageRemove,\n  onImagesReordered,\n  onSubmit\n}) => {\n  const theme = useTheme();\n\n  const cumulativePnl = calculateCumulativePnl(newTrade);\n\n\n  // Calculate and update the amount based on risk\n  const calculateAmountFromRisk = (): string => {\n    if (!riskPerTrade || !newTrade.riskToReward) return '';\n\n    const rr = parseFloat(newTrade.riskToReward);\n    if (isNaN(rr)) return '';\n\n    const amount = calculateAmountFromRiskToReward(rr, cumulativePnl);\n\n    // Ensure the amount is updated in the form state\n    // This is important to make sure the amount is saved correctly\n    if (!newTrade.partialsTaken && amount > 0) {\n      // Only update if we're not in manual mode and have a valid amount\n      setTimeout(() => onAmountChange(amount.toString()), 0);\n    }\n\n    return amount.toString();\n  };\n\n\n\n\n  const handleRiskToRewardChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    if (value === '' || /^\\d*\\.?\\d*$/.test(value)) {\n      onRiskToRewardChange(value)\n\n      // If risk per trade is set and partials are not taken, automatically calculate and update the amount\n      if (riskPerTrade && value && !newTrade.partialsTaken) {\n        const rr = parseFloat(value);\n        if (!isNaN(rr)) {\n          const calculatedAmount = calculateAmountFromRiskToReward(rr,cumulativePnl);\n          onAmountChange(calculatedAmount.toString())\n        }\n      }\n    }\n  };\n\n\n  return (\n    <form onSubmit={onSubmit}>\n      <FormField>\n        <TextField\n          label=\"Trade Name\"\n          value={newTrade.name}\n          onChange={onNameChange}\n          fullWidth\n          placeholder=\"Enter a name for this trade\"\n        />\n      </FormField>\n      <Box sx={{ display: 'flex', gap: 2, width: '100%' }}>\n        <FormField sx={{ flex: 1 }}>\n          <TextField\n            label=\"Entry Price\"\n            value={newTrade.entry}\n            onChange={onEntryChange}\n            fullWidth\n            placeholder=\"Optional entry price\"\n          />\n        </FormField>\n        <FormField sx={{ flex: 1 }}>\n          <TextField\n            label=\"Exit Price\"\n            value={newTrade.exit}\n            onChange={onExitChange}\n            fullWidth\n            placeholder=\"Optional exit price\"\n          />\n        </FormField>\n      </Box>\n      <FormControl component=\"fieldset\" sx={{ mb: 2 }}>\n        <FormLabel component=\"legend\">Trade Type</FormLabel>\n        <RadioGroup\n          row\n          name=\"type\"\n          value={newTrade.type}\n          onChange={onTypeChange}\n        >\n          <FormControlLabel\n            value=\"win\"\n            control={<Radio />}\n            label=\"Win\"\n          />\n          <FormControlLabel\n            value=\"loss\"\n            control={<Radio />}\n            label=\"Loss\"\n          />\n          <FormControlLabel\n            value=\"breakeven\"\n            control={<Radio />}\n            label=\"Breakeven\"\n          />\n        </RadioGroup>\n      </FormControl>\n      {(!riskPerTrade || (riskPerTrade && newTrade.partialsTaken)) ? (\n        <FormField>\n          <TextField\n            label=\"Amount\"\n            type=\"number\"\n            value={newTrade.amount}\n            onChange={(e) => onAmountChange(e.target.value)}\n            fullWidth\n            required\n            helperText={riskPerTrade && newTrade.partialsTaken ? \"Manual entry for partial profits\" : undefined}\n          />\n        </FormField>\n      ) : (\n        <FormField>\n          <TextField\n            label=\"Amount (Calculated from Risk)\"\n            type=\"number\"\n            value={calculateAmountFromRisk()}\n            sx={{\n              '& .MuiInputBase-input': { pointerEvents: 'none' }\n            }}\n            fullWidth\n            disabled\n            helperText={\n              dynamicRiskEnabled &&\n                increasedRiskPercentage &&\n                profitThresholdPercentage &&\n                (cumulativePnl / accountBalance * 100) >= profitThresholdPercentage\n                ? `Based on ${increasedRiskPercentage}% of account balance (INCREASED from ${riskPerTrade}%)`\n                : `Based on ${riskPerTrade}% of account balance (${formatCurrency((accountBalance * riskPerTrade) / 100)})`\n            }\n          />\n        </FormField>\n      )}\n\n\n      {riskPerTrade !== undefined && (\n        <FormField>\n          <MuiFormControlLabel\n            control={\n              <Checkbox\n                checked={newTrade.partialsTaken}\n                onChange={onPartialsTakenChange}\n              />\n            }\n            label={\n              <Typography variant=\"body2\">\n                Partials taken (allows manual amount entry)\n              </Typography>\n            }\n          />\n        </FormField>\n      )}\n      <FormField>\n        <TextField\n          label=\"Risk to Reward\"\n          value={newTrade.riskToReward}\n          onChange={handleRiskToRewardChange}\n          fullWidth\n          type=\"number\"\n          sx={{\n            '& input': { min: 0, step: 0.1 }\n          }}\n        />\n      </FormField>\n      <FormField>\n        <FormControl fullWidth>\n          <InputLabel id=\"session-label\">Session</InputLabel>\n          <Select\n            labelId=\"session-label\"\n            value={newTrade.session}\n            onChange={onSessionChange}\n            label=\"Session\"\n          >\n            <MenuItem value=\"\">None</MenuItem>\n            <MenuItem value=\"Asia\">Asia</MenuItem>\n            <MenuItem value=\"London\">London</MenuItem>\n            <MenuItem value=\"NY AM\">NY AM</MenuItem>\n            <MenuItem value=\"NY PM\">NY PM</MenuItem>\n          </Select>\n        </FormControl>\n      </FormField>\n      <FormField>\n        <Autocomplete\n          multiple\n          freeSolo\n          options={allTags}\n          value={newTrade.tags}\n          onChange={onTagsChange}\n          renderTags={(value, getTagProps) =>\n            value.map((option, index) => (\n              <Chip\n                label={formatTagForDisplay(option, false)}\n                {...getTagProps({ index })}\n                sx={getTagChipStyles(option, theme)}\n                title={isGroupedTag(option) ? `Group: ${getTagGroup(option)}` : undefined}\n              />\n            ))\n          }\n          renderOption={(props, option) => (\n            <li {...props}>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                {isGroupedTag(option) && (\n                  <Chip\n                    label={getTagGroup(option)}\n                    size=\"small\"\n                    sx={{\n                      ...getTagChipStyles(option, theme),\n                      height: '18px',\n                      fontSize: '0.7rem'\n                    }}\n                  />\n                )}\n                {formatTagForDisplay(option, true)}\n              </Box>\n            </li>\n          )}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              label=\"Tags\"\n              placeholder=\"Add tags\"\n            />\n          )}\n        />\n      </FormField>\n\n\n      {/* Debug layout information */}\n      {(() => {\n        console.log(\"TradeForm rendering with images:\",\n          \"Pending:\", newTrade.pendingImages.map(img => ({ id: img.id, row: img.row, column: img.column, columnWidth: img.columnWidth })),\n          \"Uploaded:\", newTrade.uploadedImages.map(img => ({ id: img.id, row: img.row, column: img.column, columnWidth: img.columnWidth })));\n        return null;\n      })()}\n\n      <ImageUploader\n        pendingImages={newTrade.pendingImages}\n        uploadedImages={newTrade.uploadedImages}\n        editingTrade={editingTrade !== null}\n        onImageUpload={onImageUpload}\n        onImageCaptionChange={onImageCaptionChange}\n        onImageRemove={onImageRemove}\n        onImagesReordered={onImagesReordered}\n      />\n\n      <FormField>\n        <TextField\n          label=\"Notes\"\n          value={newTrade.notes}\n          onChange={onNotesChange}\n          fullWidth\n          multiline\n          minRows={4}\n          maxRows={20} // Large number to effectively disable scrolling\n          sx={{\n            '& .MuiInputBase-root': { overflow: 'visible' }, // Prevent scrollbars\n            '& .MuiOutlinedInput-root': { overflow: 'visible' } // Ensure outline doesn't clip\n          }}\n        />\n      </FormField>\n\n      <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2, gap: 1 }}>\n        <button\n          type=\"submit\"\n          style={{ display: 'none' }}\n          disabled={isSubmitting}\n        />\n      </Box>\n    </form>\n  );\n};\n\nexport default TradeForm;\n","import React from 'react';\nimport {\n  Box,\n  Typography,\n  IconButton,\n  Chip,\n  Stack\n} from '@mui/material';\nimport { Edit as EditIcon, Delete as DeleteIcon, ExpandMore as ExpandIcon, ExpandLess as CollapseIcon } from '@mui/icons-material';\nimport { Trade } from '../../types/trade';\nimport { TradeListItem, TradeInfo, TradeActions } from '../StyledComponents';\nimport { getTagChipStyles, formatTagForDisplay } from '../../utils/tagColors';\nimport { useTheme } from '@mui/material/styles';\nimport TradeDetailExpanded from '../TradeDetailExpanded';\nimport { set } from 'date-fns';\n\ninterface TradeListProps {\n  trades: Trade[];\n  expandedTradeId: string | null;\n  onTradeClick: (tradeId: string) => void;\n  onEditClick: (trade: Trade) => void;\n  onDeleteClick: (tradeId: string) => void;\n  onZoomedImage: (url: string) => void;\n  onUpdateTradeProperty?: (tradeId: string, updateCallback: (trade: Trade) => Trade) => Promise<Trade | undefined>;\n}\n\nconst TradeList: React.FC<TradeListProps> = ({\n  trades,\n  expandedTradeId,\n  onTradeClick,\n  onEditClick,\n  onDeleteClick,\n  onZoomedImage,\n  onUpdateTradeProperty\n}) => {\n  const theme = useTheme();\n  return (\n    <Box sx={{ mt: 2 }}>\n      <Typography variant=\"subtitle1\" sx={{ mb: 1 }}>\n        Trades\n      </Typography>\n\n      {trades.length === 0 ? (\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ fontStyle: 'italic' }}>\n          No trades for this day\n        </Typography>\n      ) : (\n        <Stack spacing={1}>\n          {trades.map((trade) => (\n            <React.Fragment key={trade.id}>\n              <TradeListItem\n                $type={trade.type}\n                onClick={() => onTradeClick(trade.id)}\n                sx={{\n                  cursor: 'pointer',\n                  ...(trade.isTemporary && {\n                    opacity: 0.7,\n                    border: '1px dashed',\n                    borderColor: 'divider',\n                    backgroundColor: theme => theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.02)'\n                  })\n                }}\n              >\n                <TradeInfo>\n                  <Box sx={{ display: 'flex', alignItems: 'flex-start', gap: 0.5, justifyContent: 'space-between' }}>\n                    <Box sx={{ display: 'flex', flexDirection: 'column' }}>\n                      {trade.name && (\n                        <Typography variant=\"body2\" sx={{ fontWeight: 600 }}>\n                          {trade.isTemporary ? trade.name : `📈 ${trade.name.replace(/^📈 /, '')}`}\n                        </Typography>\n                      )}\n                      <Typography variant=\"body1\" sx={{\n                        fontWeight: 500,\n                        color: trade.type === 'win'\n                          ? 'success.main'\n                          : trade.type === 'loss'\n                            ? 'error.main'\n                            : 'info.main'\n                      }}>\n                        ${Math.abs(trade.amount).toLocaleString()}\n                      </Typography>\n                    </Box>\n\n                  </Box>\n\n                  {trade.tags && trade.tags.length > 0 && (\n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, mt: 1 }}>\n                      {trade.tags\n                        .filter(tag => !tag.startsWith('Partials:'))\n                        .map((tag, tagIndex) => (\n                          <Chip\n                            key={tagIndex}\n                            label={formatTagForDisplay(tag)}\n                            size=\"small\"\n                            sx={{\n                              ...getTagChipStyles(tag, theme),\n                              height: '20px',\n                              '& .MuiChip-label': {\n                                px: 1,\n                                fontSize: '0.7rem'\n                              }\n                            }}\n                          />\n                        ))}\n                    </Box>\n                  )}\n\n                  <Box sx={{ mt: 0.5, mr: 1 }}>\n                    {expandedTradeId === trade.id ?\n                      <CollapseIcon fontSize=\"small\" sx={{ color: 'text.secondary' }} /> :\n                      <ExpandIcon fontSize=\"small\" sx={{ color: 'text.secondary' }} />\n                    }\n                  </Box>\n                </TradeInfo>\n\n                <TradeActions>\n                  <IconButton\n                    size=\"small\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      onEditClick(trade);\n                    }}\n                  >\n                    <EditIcon fontSize=\"small\" />\n                  </IconButton>\n                  <IconButton\n                    size=\"small\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      onDeleteClick(trade.id);\n                    }}\n                  >\n                    <DeleteIcon fontSize=\"small\" />\n                  </IconButton>\n                </TradeActions>\n              </TradeListItem>\n\n              {expandedTradeId === trade.id && (\n                <TradeDetailExpanded\n                  trade={trade}\n                  isExpanded={true}\n                  setZoomedImage={onZoomedImage}\n                  onUpdateTradeProperty={onUpdateTradeProperty}\n                />\n              )}\n            </React.Fragment>\n          ))}\n        </Stack>\n      )}\n    </Box>\n  );\n};\n\nexport default TradeList;\n","import React from 'react';\nimport {\n  Box,\n  Typography,\n  IconButton,\n  useTheme\n} from '@mui/material';\nimport { ChevronLeft, ChevronRight } from '@mui/icons-material';\nimport { format } from 'date-fns';\nimport { alpha } from '@mui/material/styles';\n\ninterface DayHeaderProps {\n  date: Date;\n  formInputVisible: boolean;\n  accountBalance: number;\n  totalPnL: number;\n  onPrevDay: () => void;\n  onNextDay: () => void;\n}\n\nconst DayHeader: React.FC<DayHeaderProps> = ({\n  date,\n  accountBalance,\n  formInputVisible,\n  totalPnL,\n  onPrevDay,\n  onNextDay\n}) => {\n  const theme = useTheme();\n  \n  return (\n    <Box sx={{ mb: 3 }}>\n      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>\n        {!formInputVisible && <IconButton onClick={onPrevDay} size=\"small\">\n          <ChevronLeft />\n        </IconButton>}\n        \n        \n        <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n          {format(date, 'EEEE, MMMM d, yyyy')}\n        </Typography>\n        \n        {!formInputVisible && <IconButton onClick={onNextDay} size=\"small\">\n          <ChevronRight />\n        </IconButton>\n        }\n      </Box>\n      \n      <Box sx={{ display: 'flex', gap: 2 }}>\n       \n        \n        <Box\n          sx={{\n            flex: 1,\n            p: 2,\n            borderRadius: 1,\n            bgcolor: totalPnL >= 0\n              ? alpha(theme.palette.success.main, 0.1)\n              : alpha(theme.palette.error.main, 0.1),\n            border: '1px solid',\n            borderColor: totalPnL >= 0\n              ? alpha(theme.palette.success.main, 0.2)\n              : alpha(theme.palette.error.main, 0.2)\n          }}\n        >\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Day P&L\n          </Typography>\n          <Typography\n            variant=\"h6\"\n            sx={{\n              fontWeight: 600,\n              color: totalPnL >= 0\n                ? theme.palette.success.main\n                : theme.palette.error.main\n            }}\n          >\n            {totalPnL >= 0 ? '+' : ''}{totalPnL.toLocaleString()}\n          </Typography>\n        </Box>\n\n        <Box\n          sx={{\n            flex: 1,\n            p: 2,\n            borderRadius: 1,\n            bgcolor: alpha(theme.palette.primary.main, 0.1),\n            border: '1px solid',\n            borderColor: alpha(theme.palette.primary.main, 0.2)\n          }}\n        >\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Balance Of The Day\n          </Typography>\n          <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n            ${accountBalance.toLocaleString()}\n          </Typography>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default DayHeader;\n","import React, { useState, useMemo, useEffect } from 'react';\nimport {\n  Box,\n  Snackbar,\n  Alert\n} from '@mui/material';\nimport { isAfter, startOfDay } from 'date-fns';\nimport { Trade } from '../../types/trade';\nimport { BaseDialog, ConfirmationDialog } from '../common';\nimport * as calendarService from '../../services/calendarService';\nimport { DayHeader, TradeForm, TradeList, NewTradeForm } from './';\nimport { v4 as uuidv4 } from 'uuid';\nimport { PendingImage } from './TradeForm';\nimport { GridImage, GridPendingImage } from './ImageGrid';\nimport { createNewTradeData } from '../TradeCalendar';\ninterface DayDialogProps {\n  open: boolean;\n  onClose: () => void;\n  newMainTrade?: NewTradeForm | null\n  date: Date;\n  showForm: boolean;\n  trades: Trade[];\n  accountBalance: number;\n  onDateChange: (date: Date) => void;\n  onAddTrade?: (trade: Trade & { id?: string }) => Promise<void>;\n  onUpdateTradeProperty?: (tradeId: string, updateCallback: (trade: Trade) => Trade, createIfNotExists?: (tradeId: string) => Trade) => Promise<Trade | undefined>;\n  onAccountBalanceChange?: (balance: number) => void;\n  setZoomedImage: (url: string) => void;\n  setNewMainTrade: (prev: (trade: NewTradeForm) => NewTradeForm | null) => void\n  allTrades?: Trade[];\n  riskPerTrade?: number;\n  dynamicRiskEnabled?: boolean;\n  increasedRiskPercentage?: number;\n  profitThresholdPercentage?: number;\n  calendarId: string;\n}\n\n\n\n\n\n// Helper function to process tags \nconst processTagsForSubmission = (tags: string[]): string[] => {\n   \n      // Get any pending tag from the input field (if it exists)\n      const tagInput = document.querySelector('.MuiAutocomplete-input') as HTMLInputElement;\n      let pendingTag = '';\n      if (tagInput && tagInput.value.trim()) {\n        pendingTag = tagInput.value.trim(); \n      }\n \n      if (pendingTag) {\n        return [... tags, pendingTag]\n      }\n      return tags; \n};\n\nconst DayDialog: React.FC<DayDialogProps> = ({\n  open,\n  onClose,\n  showForm,\n  newMainTrade,\n  setNewMainTrade,\n  date,\n  trades,\n  accountBalance,\n  onDateChange,\n  onAddTrade,\n  onUpdateTradeProperty,\n  setZoomedImage,\n  allTrades = [],\n  riskPerTrade,\n  dynamicRiskEnabled,\n  increasedRiskPercentage,\n  profitThresholdPercentage,\n  calendarId\n}) => {\n\n  // State\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [editingTrade, setEditingTrade] = useState<Trade | null>(null);\n  const [expandedTradeId, setExpandedTradeId] = useState<string | null>(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [tradeToDelete, setTradeToDelete] = useState<string | null>(null);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [isCreatingEmptyTrade, setIsCreatingEmptyTrade] = useState(false);\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n  const [newTrade, setNewTrade] = useState<NewTradeForm | null>(null);\n\n  const calculateCumulativePnL = (date: Date) => {\n\n    // Calculate total profit from all trades before the current date\n    const total = allTrades.reduce((acc, trade) => {\n\n      const tradeDate = new Date(trade.date);\n      if (tradeDate < date) {\n        acc += trade.amount;\n      }\n      return acc;\n    }, 0);\n    return total;\n  };\n  useEffect(() => {\n    setShowAddForm(showForm);\n  }, [showForm]);\n\n\n  useEffect(() => {\n    if (newMainTrade) {\n      setNewTrade(newMainTrade!);\n    }\n  }, [newMainTrade]);\n\n  // Derived state\n  const allTags = useMemo(() => {\n    const tagsSet = new Set<string>();\n    allTrades.forEach(trade => {\n      if (trade.tags) {\n        trade.tags.forEach(tag => {\n          if (!tag.startsWith('Partials:')) {\n            tagsSet.add(tag);\n          }\n        });\n      }\n    });\n    return Array.from(tagsSet);\n  }, [allTrades]);\n\n  // Handlers\n  const handlePrevDay = () => {\n    const prevDay = new Date(date);\n    prevDay.setDate(prevDay.getDate() - 1);\n    onDateChange(prevDay);\n  };\n  const startOfNextDay = (): Date => {\n    const nextDay = new Date(date);\n    nextDay.setDate(nextDay.getDate() + 1);\n    return nextDay;\n  }\n  const handleNextDay = () => {\n    const nextDay = startOfNextDay();\n\n    // Don't allow navigating to future dates\n    if (!isAfter(nextDay, startOfDay(new Date()))) {\n      onDateChange(nextDay);\n    }\n  };\n\n  const handleTradeClick = (tradeId: string) => {\n    setExpandedTradeId(expandedTradeId === tradeId ? null : tradeId);\n  };\n\n  const handleAddClick = async () => {\n    setShowAddForm(true);\n    setEditingTrade(null);\n    // Set creating empty trade state to true to disable cancel/close buttons\n    setIsCreatingEmptyTrade(true);\n    // Create a temporary trade object to display in the UI\n\n    // Create an empty trade in Firebase\n    try {\n      if (calendarId && onAddTrade) {\n\n        // Update the form with the temporary trade ID and isTemporary flag\n        const data = createNewTradeData();\n        setNewTrade(() => ({\n          ...data,\n          isTemporary: true,\n          name: 'New Trade'\n        }));\n\n        await onAddTrade({ ...createFinalTradeData(data, date), name: 'New Trade', isTemporary: true });\n      } else {\n        // Handle case where calendarId or onAddTrade is missing\n        throw new Error('Unable to create trade: Missing calendar ID or add trade function');\n      }\n\n    } catch (error) {\n      console.error('Error creating empty trade:', error);\n      showErrorSnackbar(error instanceof Error ?\n        `Failed to create temporary trade: ${error.message}` :\n        'Failed to create temporary trade. Please try again.');\n\n      // Still show the form, but without the temporary trade\n      setNewTrade(prev => ({\n        ...prev!,\n        isTemporary: false\n      }));\n    } finally {\n      // Re-enable cancel/close buttons regardless of success or failure\n      setIsCreatingEmptyTrade(false);\n    }\n  };\n\n\n\n\n  // Function to show error messages in a Snackbar\n  const showErrorSnackbar = (message: string) => {\n    setSnackbarMessage(message);\n    setSnackbarOpen(true);\n  };\n\n  // Function to handle Snackbar close\n  const handleSnackbarClose = () => {\n    setSnackbarOpen(false);\n  };\n\n  const resetForm = () => {\n    // Release object URLs to avoid memory leaks\n    if (newTrade) {\n      newTrade.pendingImages.forEach(image => {\n        URL.revokeObjectURL(image.preview);\n      });\n    }\n    setShowAddForm(false);\n    setEditingTrade(null);\n    setNewMainTrade(() => null);\n\n  };\n\n\n\n  const handleEditClick = (trade: Trade) => {\n    setEditingTrade(trade);\n    setNewMainTrade(() => ({\n      id: trade.id,\n      name: trade.name ? trade.name.replace(/^📈 /, '') : '',\n      amount: Math.abs(trade.amount).toString(),\n      type: trade.type,\n      entry: trade.entry || '',\n      date: trade.date,\n      exit: trade.exit || '',\n      tags: trade.tags || [],\n      riskToReward: trade.riskToReward?.toString() || '',\n      partialsTaken: trade.partialsTaken || false,\n      session: trade.session || '',\n      notes: trade.notes || '',\n      pendingImages: [],\n      isTemporary: trade.isTemporary,\n      uploadedImages: trade.images ? trade.images.map(img => ({\n        ...img,\n        // Ensure layout properties are explicitly preserved\n        row: img.row !== undefined ? img.row : 0,\n        column: img.column !== undefined ? img.column : 0,\n        columnWidth: img.columnWidth !== undefined ? img.columnWidth : 50 // Default to 50% for 2 columns\n      })) : [],\n\n    }));\n    console.log(`Editing trade image: ${JSON.stringify(trade.images)}`);\n\n  };\n\n  const handleDeleteClick = (tradeId: string) => {\n\n    setTradeToDelete(tradeId);\n    setIsDeleteDialogOpen(true);\n  };\n\n  const handleConfirmDelete = async () => {\n    if (tradeToDelete) {\n      setIsDeleting(true);\n      try {\n        await handleUpdateTradeProperty(tradeToDelete, (trade) => ({ ...trade, isDeleted: true }));\n      } catch (error) {\n        console.error('Error deleting trade:', error);\n        showErrorSnackbar('Failed to delete trade. Please try again.');\n      } finally {\n        setIsDeleting(false);\n        setIsDeleteDialogOpen(false);\n        setTradeToDelete(null);\n      }\n    }\n  };\n\n  const handleCancelDelete = () => {\n    setIsDeleteDialogOpen(false);\n    setTradeToDelete(null);\n  };\n\n  // Function to update a specific property of a trade\n  const handleUpdateTradeProperty = async (tradeId: string, updateCallback: (trade: Trade) => Trade, createIfNotExists?: (tradeId: string) => Trade) => {\n    if (!onUpdateTradeProperty) return;\n    try {\n      return onUpdateTradeProperty(tradeId, updateCallback, createIfNotExists);\n    } catch (error) {\n      console.error('Error updating trade property:', error);\n      showErrorSnackbar(error instanceof Error ? error.message : 'Failed to update trade property. Please try again.');\n    }\n  };\n\n  // Form handlers\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setNewTrade(prev => ({ ...prev!, name: e.target.value }));\n  };\n\n  const handleAmountChange = (amount: string) => {\n    setNewTrade(prev => ({ ...prev!, amount: amount }));\n  };\n\n  const handleTypeChange = (e: any) => {\n    setNewTrade(prev => ({ ...prev!, type: e.target.value as 'win' | 'loss' | 'breakeven' }));\n  };\n\n  const handleEntryChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setNewTrade(prev => ({ ...prev!, entry: e.target.value }));\n  };\n\n  const handleExitChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setNewTrade(prev => ({ ...prev!, exit: e.target.value }));\n  };\n\n  const handleRiskToRewardChange = (riskToReward: string) => {\n    setNewTrade(prev => ({ ...prev!, riskToReward: riskToReward }));\n  };\n\n\n  const calculateFinalAmount = (trade: NewTradeForm): number => {\n    // If using risk-based calculation and not taking partials, recalculate the amount\n    if (riskPerTrade && trade.riskToReward && !trade.partialsTaken) {\n      const rr = parseFloat(trade.riskToReward);\n      if (!isNaN(rr)) {\n        const calculatedAmount = calculateAmountFromRiskToReward(rr, calculateCumulativePnL(trade.date || date));\n        // Apply sign based on trade type\n        return trade.type === 'loss' ? -Math.abs(calculatedAmount) : Math.abs(calculatedAmount);\n      }\n    }\n\n    // Otherwise use the amount from the form\n    const amount = parseFloat(trade.amount || \"0\");\n    return trade.type === 'loss' ? -Math.abs(amount) : Math.abs(amount);\n  };\n\n  const createFinalTradeData = (newTrade: NewTradeForm, date: Date) => {\n    let finalAmount = calculateFinalAmount(newTrade);\n    console.log(`trade final amount ${finalAmount}`)\n\n    // Process tags to ensure proper formatting\n    let finalTags = processTagsForSubmission([...newTrade.tags]);\n\n    // Add Partials tag if partialsTaken is true\n    if (newTrade.partialsTaken) {\n      // Remove any existing Partials tags\n      finalTags = finalTags.filter((tag: string) => !tag.startsWith('Partials:'));\n      finalTags.push('Partials:Yes');\n    }\n\n    const currentDate = new Date();\n    return {\n      id: newTrade.id || uuidv4(),\n      isTemporary: newTrade.isTemporary,\n      date: new Date(date.getFullYear(), date.getMonth(), date.getDate(),\n        currentDate.getHours(), currentDate.getMinutes(), currentDate.getSeconds()),\n      type: newTrade.type,\n      amount: finalAmount,\n      isDeleting: false,\n      ...(newTrade.name && { name: newTrade.name }),\n      ...(newTrade.entry && { entry: newTrade.entry }),\n      ...(newTrade.exit && { exit: newTrade.exit }),\n      ...(finalTags.length > 0 && { tags: finalTags }),\n      ...(newTrade.riskToReward && { riskToReward: parseFloat(newTrade.riskToReward) }),\n      partialsTaken: newTrade.partialsTaken,\n      ...(newTrade.session && { session: newTrade.session }),\n      ...(newTrade.notes && { notes: newTrade.notes }),\n      images: newTrade.uploadedImages || [],\n    }\n  }\n\n  // Calculate amount based on risk per trade (as percentage of account balance) and risk-to-reward ratio\n  const calculateAmountFromRiskToReward = (riskToReward: number, cumulativePnL: number): number => {\n    if (!newTrade || !riskPerTrade || !riskToReward || !accountBalance) return 0;\n\n    // Get the effective risk percentage (which may be increased due to dynamic risk)\n\n    const effectiveRiskPercentage = getEffectiveRiskPercentage(cumulativePnL);\n\n    // Calculate the risk amount based on the effective percentage of account balance\n    const totalAccountValue = accountBalance + cumulativePnL;\n    const riskAmount = (totalAccountValue * effectiveRiskPercentage) / 100;\n\n    // For win trades: risk amount * R:R\n    // For loss trades: risk amount\n    return newTrade.type === 'win'\n      ? Math.round(riskAmount * riskToReward)\n      : Math.round(riskAmount);\n  };\n\n\n  // Calculate the effective risk percentage based on dynamic risk settings\n  const getEffectiveRiskPercentage = (cumulativePnL: number): number => {\n    if (!riskPerTrade) return 0;\n\n    // Apply dynamic risk if enabled and profit threshold is met\n\n    if (dynamicRiskEnabled &&\n      increasedRiskPercentage &&\n      profitThresholdPercentage &&\n      accountBalance > 0) {\n      const profitPercentage = (cumulativePnL / accountBalance * 100);\n      if (profitPercentage >= profitThresholdPercentage) {\n        return increasedRiskPercentage;\n      }\n    }\n\n    return riskPerTrade;\n  };\n\n  const handlePartialsTakenChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const partialsTaken = e.target.checked;\n    setNewTrade(prev => ({ ...prev!, partialsTaken }));\n\n\n  };\n\n  const handleSessionChange = (e: any) => {\n    setNewTrade(prev => ({ ...prev!, session: e.target.value }));\n  };\n\n  const handleNotesChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setNewTrade(prev => ({ ...prev!, notes: e.target.value }));\n  };\n\n  const handleTagsChange = (_event: React.SyntheticEvent, newValue: string[]) => {\n    setNewTrade(prev => ({ ...prev!, tags: newValue }));\n  };\n\n\n\n\n  const handleImageUpload = async (files: FileList) => {\n    const getDimensions = (url: string): Promise<{ width: number; height: number }> => {\n      return new Promise((resolve) => {\n        const img = new Image();\n        img.onload = () => {\n          resolve({\n            width: img.width,\n            height: img.height,\n          });\n        };\n        img.src = url;\n      });\n    };\n\n    const newPendingImages = await Promise.all(\n      Array.from(files).map(async (file) => {\n        const preview = URL.createObjectURL(file);\n        const dimensions = await getDimensions(preview);\n\n        return {\n          id: calendarService.generateImageId(file),\n          file,\n          preview,\n          caption: '',\n          width: dimensions.width,\n          height: dimensions.height,\n          uploadProgress: 0\n        };\n      })\n    );\n\n    // Add the new images to the state with grid layout information\n    setNewTrade((prev) => {\n      const existingPendingImages = prev!.pendingImages;\n      const existingUploadedImages = prev!.uploadedImages;\n\n      // Find the highest row value to place new images below existing ones\n      let maxRow = -1;\n\n      [...existingPendingImages, ...existingUploadedImages].forEach(img => {\n        if (img.row !== undefined && img.row > maxRow) maxRow = img.row;\n      });\n\n      // Assign row and column to new images - each in its own row\n      const newImagesWithLayout = newPendingImages.map((img, index) => {\n        // Place each new image in its own row below all existing images\n        const newRow = maxRow + 1 + index;\n\n        return {\n          ...img,\n          row: newRow,\n          column: 0, // Always place in first column\n          columnWidth: 100 // Full width for the row\n        };\n      });\n\n      return {\n        ...prev!,\n        pendingImages: [...existingPendingImages, ...newImagesWithLayout],\n      };\n    });\n\n    // Start uploading the images if we have a temporary trade ID\n    try {\n\n      // First, ensure the trade exists in the database and is in the cached trades\n      const trade = await handleUpdateTradeProperty(newTrade!.id!!, (trade) => {\n        // Calculate row and column for new images\n        const existingImages = trade.images || [];\n\n        // Find the highest row value to place new images below existing ones\n        let maxRow = -1;\n\n        existingImages.forEach(img => {\n          if (img.row !== undefined && img.row > maxRow) maxRow = img.row;\n        });\n\n        // Assign row and column to new images - each in its own row\n        const newImages = newPendingImages.map((img, index) => {\n          // Place each new image in its own row below all existing images\n          const newRow = maxRow + 1 + index;\n\n          return {\n            url: img.preview,\n            pending: true,\n            id: img.id,\n            width: img.width,\n            height: img.height,\n            caption: img.caption,\n            row: newRow,\n            column: 0, // Always place in first column\n            columnWidth: 100 // Full width for the row\n          };\n        });\n\n        return {\n          ...trade,\n          images: [...existingImages, ...newImages]\n        };\n      },\n        (tradeid: string) => {\n          setIsCreatingEmptyTrade(true);\n          // Create a temporary trade object if it doesnt exist\n          return {\n            ...createFinalTradeData(newTrade!, date), id: tradeid, name: newTrade!.name || 'New Trade', isTemporary: true\n          };\n        });\n\n      if (trade && trade.isTemporary) {\n        setNewTrade(prev => {\n          return {\n            ...prev!,\n            isTemporary: true\n          };\n        })\n        setIsCreatingEmptyTrade(false);\n      }\n\n\n      for (const image of newPendingImages) {\n        await startImageUpload(image, newTrade!.id!!);\n      }\n    }\n    catch (error) {\n      console.error('Error creating empty trade:', error);\n    }\n  };\n  // Function to start uploading an image\n  const startImageUpload = async (image: PendingImage, tradeId: string): Promise<void> => {\n    try {\n      // Update progress to show upload has started\n      setNewTrade(prev => ({\n        ...prev!,\n        pendingImages: prev!.pendingImages.map((img) =>\n          img.id === image.id ? { ...img, uploadProgress: 1 } : img\n        )\n      }));\n\n      // Upload the image with progress tracking\n      const uploadedImage = await calendarService.uploadImage(\n        image.id!!,\n        image.file,\n        image.width,\n        image.height,\n        image.caption,\n        (progress) => {\n          // Update progress in the UI\n          setNewTrade(prev => ({\n            ...prev!,\n            pendingImages: prev!.pendingImages.map((img) =>\n              img.id === image.id ? { ...img, uploadProgress: progress } : img\n            )\n          }));\n        }\n      );\n\n      // Once upload is complete, move from pendingImages to uploadedImages\n      // Find the original pending image to get its layout information\n      const originalPendingImage = newTrade!.pendingImages.find(img => img.id === image.id);\n\n      // Preserve layout information\n      const updatedImage = {\n        ...uploadedImage,\n        caption: image.caption,\n        row: originalPendingImage?.row,\n        column: originalPendingImage?.column,\n        columnWidth: originalPendingImage?.columnWidth\n      };\n\n      // Update local state\n      setNewTrade(prev => {\n        const newPendingImages = [...prev!.pendingImages];\n        // Remove the uploaded image from pendingImages\n        let imageIndex = newPendingImages.findIndex(img => img.id === image.id);\n        if (imageIndex !== -1) {\n          newPendingImages.splice(imageIndex, 1);\n        }\n        // Find the image the pending true in the uploadedImages list\n        // Setting pending to the image is useful for show shimmer in tradeDetail\n        const newUploadedImages = [...prev!.uploadedImages];\n        imageIndex = newUploadedImages.findIndex(img => img.id === image.id);\n        if (imageIndex !== -1 && newUploadedImages[imageIndex].pending) {\n          newUploadedImages.splice(imageIndex, 1);\n        }\n\n        return {\n          ...prev!,\n          pendingImages: newPendingImages,\n          uploadedImages: [...newUploadedImages, updatedImage]\n        };\n\n\n      });\n\n      // Update Firebase document if we have a temporary trade ID\n      if (calendarId && tradeId) {\n        try {\n          // Use transaction to add the image to the trade\n\n          await handleUpdateTradeProperty(tradeId, (trade) => {\n            // Find the existing image in the trade to preserve any layout information\n            const existingImage = trade.images?.find(img => img.id === updatedImage.id);\n\n            // Create the updated image with layout information\n            const finalUpdatedImage = {\n              ...updatedImage,\n              // Preserve existing layout information if available\n              row: existingImage?.row !== undefined ? existingImage.row : updatedImage.row,\n              column: existingImage?.column !== undefined ? existingImage.column : updatedImage.column,\n              columnWidth: existingImage?.columnWidth !== undefined ? existingImage.columnWidth : updatedImage.columnWidth\n            };\n\n            return {\n              ...trade,\n              images: (trade.images || [finalUpdatedImage]).map(img =>\n                img.id === finalUpdatedImage.id ? finalUpdatedImage : img)\n            };\n          });\n\n\n\n        } catch (updateError) {\n          console.error('Error updating trade with new image:', updateError);\n\n          // Show error message to the user\n          showErrorSnackbar(updateError instanceof Error ?\n            `Failed to save image to trade: ${updateError.message}` :\n            'Failed to save image to trade. The image is saved locally but may be lost if you refresh the page.');\n\n          // Continue execution - we'll still have the image in local state\n        }\n      }\n    } catch (error) {\n      console.error('Error uploading image:', error);\n\n      // Update UI to show upload failed\n      setNewTrade(prev => ({\n        ...prev!,\n        pendingImages: prev!.pendingImages.map((img) =>\n          img.id === image.id ? { ...img, uploadProgress: -1 } : img\n        )\n      }));\n    }\n  };\n\n\n  const handleImageCaptionChange = async (index: number, caption: string, isPending: boolean) => {\n    try {\n      if (isPending) {\n        // Check if the image is currently being uploaded\n        const image = newTrade!.pendingImages[index];\n        if (image.uploadProgress !== undefined && image.uploadProgress > 0 && image.uploadProgress < 100) {\n          // Image is currently uploading, we shouldn't allow caption changes\n          // This is a fallback in case the UI field wasn't disabled properly\n          console.warn('Attempted to change caption of an image that is currently uploading');\n          return;\n        }\n\n        // Update caption for pending image\n        setNewTrade(prev => ({\n          ...prev!,\n          pendingImages: prev!.pendingImages.map((img, i) =>\n            i === index ? { ...img, caption } : img\n          )\n        }));\n      } else {\n        // Update caption for uploaded image\n        setNewTrade(prev => ({\n          ...prev!,\n          uploadedImages: prev!.uploadedImages.map((img, i) =>\n            i === index ? { ...img, caption } : img\n          )\n        }));\n      }\n    } catch (error) {\n      console.error('Error in handleImageCaptionChange:', error);\n      // Don't show error to user for caption changes as it's not critical\n    }\n  };\n\n\n  const handleImageRemove = async (index: number, isPending: boolean) => {\n    try {\n      if (isPending) {\n        // Check if the image is currently being uploaded\n        const image = newTrade!.pendingImages[index];\n        if (image.uploadProgress !== undefined && image.uploadProgress > 0 && image.uploadProgress < 100) {\n          // Image is currently uploading, we shouldn't allow deletion\n          // This is a fallback in case the UI button wasn't hidden properly\n          console.warn('Attempted to delete an image that is currently uploading');\n          showErrorSnackbar('Cannot delete an image while it\\'s uploading. Please wait for the upload to complete.');\n          return;\n        }\n\n        // Release object URL to avoid memory leaks\n        URL.revokeObjectURL(image.preview);\n\n        // Update local state\n        setNewTrade(prev => ({\n          ...prev!,\n          pendingImages: prev!.pendingImages.filter((_, i) => i !== index)\n        }));\n      } else {\n        const image = newTrade!.uploadedImages[index];\n\n        // Update local state first for immediate UI feedback\n        setNewTrade(prev => ({\n          ...prev!,\n          uploadedImages: prev!.uploadedImages.filter((_, i) => i !== index)\n        }));\n\n        //delete the image and update the trade in the background\n        try {\n          await handleUpdateTradeProperty(newTrade!.id, (trade) => ({\n            ...trade,\n            images: (trade.images || []).filter(img => img.id !== image.id)\n          }));\n\n          console.log(`Image ${image.id} deleted and trade updated successfully`);\n        } catch (deleteError) {\n          console.error('Error deleting image or updating trade:', deleteError);\n          // Don't show error to user since the image is already removed from UI\n          // and will be properly cleaned up when the form is submitted\n        }\n      }\n    } catch (error) {\n      console.error('Error in handleImageRemove:', error);\n      showErrorSnackbar('Failed to remove image. Please try again.');\n    }\n  };\n  // Handle image reordering\n  const handleImagesReordered = async (images: Array<GridImage | GridPendingImage>) => {\n    console.log(\"handleImagesReordered called with images:\",\n      images.map(img => ({ id: img.id, row: img.row, column: img.column, columnWidth: img.columnWidth })));\n\n    // Separate pending and uploaded images\n    const pendingImages = images.filter(img => 'file' in img) as GridPendingImage[];\n    const uploadedImages = images.filter(img => !('file' in img)) as GridImage[];\n\n    // Update local state\n    setNewTrade(prev => ({\n      ...prev!,\n      pendingImages: pendingImages as PendingImage[],\n      uploadedImages: uploadedImages\n    }));\n\n  };\n\n  const hasPendingUploads = (): boolean => newTrade!.pendingImages.some(img =>\n    img.uploadProgress !== undefined && img.uploadProgress < 100 && img.uploadProgress >= 0\n  );\n\n  const handleSubmit = async (e?: React.FormEvent) => {\n    if (e) e.preventDefault();\n\n    if (!onAddTrade) return;\n\n    setIsSubmitting(true);\n    // Clear any previous errors\n\n    try {\n      // Validate form\n      if (!newTrade!.amount) {\n        throw new Error('Amount is required');\n      }\n      // Check if there are any pending image uploads\n      // If there are pending uploads, wait for them to complete\n      if (hasPendingUploads()) {\n        // Just show the loading indicator and let the uploads continue\n        // The trade will be updated automatically when all uploads are complete\n        showErrorSnackbar('Please wait for image uploads to complete...');\n        setIsSubmitting(false);\n        return;\n      }\n \n      // Prepare data\n      let tradeData = createFinalTradeData(newTrade!, date);\n      // Update the temporary trade with the final data\n      if (newTrade!.isTemporary && newTrade!.id) {\n        await handleUpdateTradeProperty(newTrade!.id, () => ({ ...tradeData, isTemporary: false })); // Mark as a permanent trade\n\n      }\n      else {\n        await onAddTrade(tradeData);\n      }\n\n      resetForm();\n\n    } catch (error) {\n      showErrorSnackbar(error instanceof Error ? error.message : 'Failed to add trade. Please try again.');\n      if(newTrade!.isTemporary){\n        console.error('Error updating temporary trade:', error);\n        throw new Error(`Failed to update temporary trade: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n      else {\n        console.error('Error adding new trade:', error);\n        throw new Error(`Failed to add new trade: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleEditSubmit = async (e?: React.FormEvent) => {\n    if (e) e.preventDefault();\n    if (!editingTrade) return;\n\n    setIsSubmitting(true);\n    // Clear any previous errors\n\n    try {\n      // Validate form\n      if (!newTrade!.amount) {\n        throw new Error('Amount is required');\n      }\n\n      // Check if there are any pending image uploads\n\n      // If there are pending uploads, wait for them to complete\n      if (hasPendingUploads()) {\n        // Just show the loading indicator and let the uploads continue\n        // The trade will be updated automatically when all uploads are complete\n        showErrorSnackbar('Please wait for image uploads to complete...');\n        setIsSubmitting(false);\n        return;\n      }\n\n\n      // Prepare data\n      let finalAmount = calculateFinalAmount(newTrade!);\n\n      // Process tags to ensure proper formatting\n      let finalTags = processTagsForSubmission([...newTrade!.tags]);\n\n      // Add Partials tag if partialsTaken is true\n      if (newTrade!.partialsTaken) {\n        // Remove any existing Partials tags\n        finalTags = finalTags.filter((tag: string) => !tag.startsWith('Partials:'));\n        finalTags.push('Partials:Yes');\n      } else {\n        // Remove any existing Partials tags\n        finalTags = finalTags.filter((tag: string) => !tag.startsWith('Partials:'));\n      }\n\n\n      // Update trade\n      try {\n        // Verify the trade still exists\n        if (editingTrade.id) {\n          const existingTrade = await calendarService.getTrade(calendarId, editingTrade.id);\n\n          if (!existingTrade) {\n            throw new Error(`Trade with ID ${editingTrade.id} not found. It may have been deleted.`);\n          }\n          // Prepare the images array with layout information\n          const updatedImages = [\n            ...newTrade!.pendingImages.map(img => ({\n              url: img.preview || '',\n              id: img.id!,\n              pending: true,\n              caption: img.caption || '',\n              width: img.width || 0,\n              height: img.height || 0,\n              row: img.row !== undefined ? img.row : 0,\n              column: img.column !== undefined ? img.column : 0,\n              columnWidth: img.columnWidth !== undefined ? img.columnWidth : 50\n            })),\n            ...newTrade!.uploadedImages.map(img => ({\n              url: img.url || '',\n              id: img.id,\n              pending: img.pending,\n              caption: img.caption || '',\n              width: img.width || 0,\n              height: img.height || 0,\n              row: img.row !== undefined ? img.row : 0,\n              column: img.column !== undefined ? img.column : 0,\n              columnWidth: img.columnWidth !== undefined ? img.columnWidth : 50\n            }))\n          ];\n\n          // Debug what's being saved to Firebase\n          // console.log(\"Saving images to Firebase with layout info in handleEditSubmit:\",\n          //   updatedImages.map(img => ({ id: img.id, row: img.row, column: img.column, columnWidth: img.columnWidth })));\n\n          await handleUpdateTradeProperty(editingTrade.id, (trade) => {\n            return {\n              ...trade,\n              type: newTrade!.type,\n              amount: finalAmount,\n              name: newTrade!.name || \"\",\n              entry: newTrade!.entry || \"\",\n              exit: newTrade!.exit || \"\",\n              tags: finalTags || [],\n              riskToReward: parseFloat(newTrade!.riskToReward) || 1,\n              partialsTaken: newTrade!.partialsTaken,\n              session: newTrade!.session || \"London\",\n              notes: newTrade!.notes || \"\",\n              images: updatedImages\n            };\n          });\n          console.log('Trade updated successfully');\n        } else {\n          throw new Error('Cannot update trade: Missing trade ID');\n        }\n      } catch (editError) {\n        console.error('Error updating trade:', editError);\n        throw new Error(`Failed to update trade: ${editError instanceof Error ? editError.message : 'Unknown error'}`);\n      }\n\n      // Reset form\n      resetForm();\n\n      // No need to explicitly recalculate cumulative PnL\n      // It will be calculated directly in the DayHeader component\n    } catch (error) {\n      console.error('Error editing trade:', error);\n      showErrorSnackbar(error instanceof Error ? error.message : 'Failed to edit trade. Please try again.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <>\n      <BaseDialog\n        open={open}\n        onClose={() => {\n          // Only allow closing if we're not in the process of creating an empty trade\n          if (!isCreatingEmptyTrade) {\n            if (editingTrade) {\n              resetForm();\n            }\n            onClose();\n          }\n        }}\n        title=\"Daily Trades\"\n        maxWidth=\"md\"\n        fullWidth\n        hideCloseButton={isCreatingEmptyTrade} // Disable close button when creating empty trade\n        primaryButtonText={showAddForm ? (editingTrade ? 'Update Trade' : 'Add Trade') : 'Add Trade'}\n        primaryButtonAction={showAddForm ?\n          (editingTrade ?\n            (e?: React.FormEvent) => handleEditSubmit(e) :\n            (e?: React.FormEvent) => handleSubmit(e)\n          ) :\n          () => handleAddClick()\n        }\n        isSubmitting={isSubmitting || isCreatingEmptyTrade} // Show loading state when creating empty trade\n        cancelButtonAction={showAddForm ? () => {\n          // Only allow canceling if we're not in the process of creating an empty trade\n          if (!isCreatingEmptyTrade) {\n            setShowAddForm(false);\n            resetForm();\n          }\n        } : undefined}\n        hideFooterCancelButton={!showAddForm}\n      >\n        <Box sx={{ p: 3 }}>\n\n          <DayHeader\n            date={date}\n            accountBalance={accountBalance + calculateCumulativePnL(startOfNextDay())}\n            formInputVisible={showAddForm}\n            totalPnL={trades.reduce((sum, trade) => sum + trade.amount, 0)}\n            onPrevDay={handlePrevDay}\n            onNextDay={handleNextDay}\n          />\n\n          {showAddForm ? (\n            <Box>\n              <TradeForm\n                accountBalance={accountBalance}\n                calculateCumulativePnl={(newTrade) => calculateCumulativePnL(newTrade?.date || new Date())}\n                dynamicRiskEnabled={dynamicRiskEnabled}\n                increasedRiskPercentage={increasedRiskPercentage}\n                profitThresholdPercentage={profitThresholdPercentage}\n                newTrade={newTrade!}\n                editingTrade={editingTrade}\n                allTags={allTags}\n                isSubmitting={isSubmitting}\n                riskPerTrade={riskPerTrade}\n                calculateAmountFromRiskToReward={calculateAmountFromRiskToReward}\n                onNameChange={handleNameChange}\n                onAmountChange={handleAmountChange}\n                onTypeChange={handleTypeChange}\n                onEntryChange={handleEntryChange}\n                onExitChange={handleExitChange}\n                onRiskToRewardChange={handleRiskToRewardChange}\n                onPartialsTakenChange={handlePartialsTakenChange}\n                onSessionChange={handleSessionChange}\n                onNotesChange={handleNotesChange}\n                onTagsChange={handleTagsChange}\n                onImageUpload={handleImageUpload}\n                onImageCaptionChange={handleImageCaptionChange}\n                onImageRemove={handleImageRemove}\n                onImagesReordered={handleImagesReordered}\n                onSubmit={editingTrade ? handleEditSubmit : handleSubmit}\n              />\n\n\n            </Box>\n          ) : (\n            <>\n              <TradeList\n                trades={trades}\n                expandedTradeId={expandedTradeId}\n                onTradeClick={handleTradeClick}\n                onEditClick={handleEditClick}\n                onDeleteClick={handleDeleteClick}\n                onZoomedImage={setZoomedImage}\n                onUpdateTradeProperty={handleUpdateTradeProperty}\n              />\n\n\n            </>\n          )}\n        </Box>\n      </BaseDialog>\n\n      <ConfirmationDialog\n        open={isDeleteDialogOpen}\n        title=\"Delete Trade\"\n        message=\"Are you sure you want to delete this trade? This action cannot be undone.\"\n        confirmText=\"Delete\"\n        cancelText=\"Cancel\"\n        onConfirm={handleConfirmDelete}\n        onCancel={handleCancelDelete}\n        isSubmitting={isDeleting}\n        confirmColor=\"error\"\n      />\n\n      {/* Snackbar for error messages */}\n      <Snackbar\n        open={snackbarOpen}\n        autoHideDuration={6000}\n        onClose={handleSnackbarClose}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n      >\n        <Alert onClose={handleSnackbarClose} severity=\"error\" sx={{ width: '100%' }}>\n          {snackbarMessage}\n        </Alert>\n      </Snackbar>\n    </>\n\n  );\n};\n\nexport default DayDialog;\n\n","import { Trade } from '../types/trade';\r\nimport { format, parse } from 'date-fns';\r\nimport * as XLSX from 'xlsx';\r\n\r\n// Helper function to prepare trade data for export\r\nconst prepareTradeDataForExport = (trades: Trade[], initialBalance: number = 0) => {\r\n  // Sort trades by date\r\n  const sortedTrades = [...trades].sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\r\n\r\n  // Calculate cumulative P&L and account balance\r\n  let cumulativePnL = 0;\r\n  let currentBalance = initialBalance;\r\n  const tradesWithBalances = sortedTrades.map(trade => {\r\n    cumulativePnL += trade.amount;\r\n    currentBalance += trade.amount;\r\n    return {\r\n      ...trade,\r\n      cumulativePnL,\r\n      accountBalance: currentBalance\r\n    };\r\n  });\r\n\r\n  // Transform trades into a format suitable for export\r\n  return tradesWithBalances.map(trade => ({\r\n    Date: format(new Date(trade.date), 'MM/dd/yyyy'),\r\n    Name: trade.name ? trade.name : '',\r\n    Type: trade.type.charAt(0).toUpperCase() + trade.type.slice(1),\r\n    Amount: trade.amount,\r\n    'P&L': trade.amount > 0 ? `+${trade.amount.toFixed(2)}` : trade.amount.toFixed(2),\r\n    'Cumulative P&L': trade.cumulativePnL > 0 ? `+${trade.cumulativePnL.toFixed(2)}` : trade.cumulativePnL.toFixed(2),\r\n    'Account Balance': trade.accountBalance.toFixed(2),\r\n    'Entry Price': trade.entry || '',\r\n    'Exit Price': trade.exit || '',\r\n    Tags: trade.tags?.join(', ') || '',\r\n    'Risk to Reward': trade.riskToReward?.toFixed(2) || '',\r\n    Session: trade.session || '',\r\n    Notes: trade.notes || ''\r\n  }));\r\n};\r\n\r\n// Export trades to Excel format\r\nconst exportToExcel = (data: any[], fileName: string): void => {\r\n  // Create workbook and worksheet\r\n  const wb = XLSX.utils.book_new();\r\n  const ws = XLSX.utils.json_to_sheet(data);\r\n\r\n  // Set column widths\r\n  const colWidths = [\r\n    { wch: 12 }, // Date\r\n    { wch: 25 }, // Name\r\n    { wch: 8 },  // Type\r\n    { wch: 10 }, // Amount\r\n    { wch: 10 }, // P&L\r\n    { wch: 15 }, // Cumulative P&L\r\n    { wch: 15 }, // Account Balance\r\n    { wch: 15 }, // Entry Price\r\n    { wch: 15 }, // Exit Price\r\n    { wch: 30 }, // Tags\r\n    { wch: 12 }, // Risk to Reward\r\n    { wch: 12 }, // Session\r\n    { wch: 50 }  // Notes\r\n  ];\r\n  ws['!cols'] = colWidths;\r\n\r\n  // Add the worksheet to the workbook\r\n  XLSX.utils.book_append_sheet(wb, ws, 'Trades');\r\n\r\n  // Generate Excel file\r\n  XLSX.writeFile(wb, fileName);\r\n};\r\n\r\n// Export trades to CSV format\r\nconst exportToCsv = (data: any[], fileName: string): void => {\r\n  // Convert data to CSV string\r\n  const headers = Object.keys(data[0]);\r\n  const csvRows = [];\r\n\r\n  // Add header row\r\n  csvRows.push(headers.join(','));\r\n\r\n  // Add data rows\r\n  for (const row of data) {\r\n    const values = headers.map(header => {\r\n      const value = row[header];\r\n      // Handle values that need to be quoted (contain commas, quotes, or newlines)\r\n      const escaped = String(value).replace(/\"/g, '\"\"');\r\n      if (escaped.includes(',') || escaped.includes('\"') || escaped.includes('\\n')) {\r\n        return `\"${escaped}\"`;\r\n      }\r\n      return value;\r\n    });\r\n    csvRows.push(values.join(','));\r\n  }\r\n\r\n  // Create CSV content\r\n  const csvContent = csvRows.join('\\n');\r\n\r\n  // Create a blob and download the file\r\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n  const url = URL.createObjectURL(blob);\r\n  const link = document.createElement('a');\r\n  link.setAttribute('href', url);\r\n  link.setAttribute('download', fileName);\r\n  link.style.visibility = 'hidden';\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n};\r\n\r\n// Main export function that supports both Excel and CSV formats\r\nexport const exportTrades = (trades: Trade[], initialBalance: number = 0, fileFormat: 'xlsx' | 'csv' = 'xlsx'): void => {\r\n  if (trades.length === 0) return;\r\n\r\n  // Prepare data for export\r\n  const exportData = prepareTradeDataForExport(trades, initialBalance);\r\n\r\n  // Generate file name with current date\r\n  const dateStr = format(new Date(), 'yyyy-MM-dd');\r\n  const fileName = `trades_${dateStr}.${fileFormat}`;\r\n\r\n  // Export in the requested format\r\n  if (fileFormat === 'xlsx') {\r\n    exportToExcel(exportData, fileName);\r\n  } else {\r\n    exportToCsv(exportData, fileName);\r\n  }\r\n};\r\n\r\n// Import trades from Excel format\r\nconst importFromExcel = async (data: ArrayBuffer): Promise<Trade[]> => {\r\n  try {\r\n    const workbook = XLSX.read(new Uint8Array(data), { type: 'array' });\r\n\r\n    // Check if the workbook has any sheets\r\n    if (!workbook.SheetNames || workbook.SheetNames.length === 0) {\r\n      throw new Error('Excel file does not contain any sheets');\r\n    }\r\n\r\n    const worksheet = workbook.Sheets[workbook.SheetNames[0]];\r\n\r\n    // Check if the worksheet exists\r\n    if (!worksheet) {\r\n      throw new Error('Excel sheet is empty or invalid');\r\n    }\r\n\r\n    const jsonData = XLSX.utils.sheet_to_json(worksheet);\r\n\r\n    // Check if we have any data\r\n    if (!jsonData || jsonData.length === 0) {\r\n      throw new Error('No data found in the Excel file');\r\n    }\r\n\r\n    // Check if we have the required Date column\r\n    const firstRow = jsonData[0] as any;\r\n    if (!firstRow.Date) {\r\n      throw new Error('Excel file must contain a \"Date\" column');\r\n    }\r\n\r\n    try {\r\n      return parseTradeData(jsonData);\r\n    } catch (parseError) {\r\n      console.error('Trade data parsing error:', parseError);\r\n      // Provide more specific error messages for common issues\r\n      if (parseError instanceof Error) {\r\n        if (parseError.message.includes('Invalid time value')) {\r\n          throw new Error('Could not parse one or more dates in the Excel file. Please ensure dates are in a standard format like \"MM/DD/YYYY\" or \"Month Day, Year\".');\r\n        }\r\n        throw parseError;\r\n      }\r\n      throw new Error('Failed to parse trade data from Excel file.');\r\n    }\r\n  } catch (error) {\r\n    console.error('Excel parsing error:', error);\r\n    throw error; // Re-throw to be handled by the caller\r\n  }\r\n};\r\n\r\n// Import trades from CSV format\r\nconst importFromCsv = async (data: string): Promise<Trade[]> => {\r\n  try {\r\n    // Parse CSV string to JSON\r\n    const rows = data.split('\\n');\r\n\r\n    // Check if we have at least a header row\r\n    if (rows.length === 0) {\r\n      throw new Error('CSV file is empty');\r\n    }\r\n\r\n    // Parse headers\r\n    const headers = rows[0].split(',').map(header => {\r\n      // Remove quotes if present\r\n      return header.replace(/^\"|\"$/g, '').trim();\r\n    });\r\n\r\n    // Check if we have the required Date header\r\n    if (!headers.includes('Date')) {\r\n      throw new Error('CSV file must contain a \"Date\" column');\r\n    }\r\n\r\n    const jsonData = [];\r\n\r\n    for (let i = 1; i < rows.length; i++) {\r\n      if (!rows[i].trim()) continue; // Skip empty rows\r\n\r\n      // Handle quoted values with commas inside\r\n      const values = [];\r\n      let inQuotes = false;\r\n      let currentValue = '';\r\n\r\n      try {\r\n        for (let j = 0; j < rows[i].length; j++) {\r\n          const char = rows[i][j];\r\n\r\n          if (char === '\"') {\r\n            inQuotes = !inQuotes;\r\n          } else if (char === ',' && !inQuotes) {\r\n            values.push(currentValue);\r\n            currentValue = '';\r\n          } else {\r\n            currentValue += char;\r\n          }\r\n        }\r\n\r\n        // Add the last value\r\n        values.push(currentValue);\r\n\r\n        // Create object from headers and values\r\n        const obj: any = {};\r\n        for (let j = 0; j < headers.length; j++) {\r\n          if (j < values.length) {\r\n            // Remove quotes if present\r\n            obj[headers[j]] = values[j].replace(/^\"|\"$/g, '').trim();\r\n          }\r\n        }\r\n\r\n        // Only add rows that have a Date value\r\n        if (obj.Date) {\r\n          jsonData.push(obj);\r\n        }\r\n      } catch (error) {\r\n        console.warn(`Skipping row ${i} due to parsing error:`, error);\r\n        // Continue with the next row\r\n      }\r\n    }\r\n\r\n    if (jsonData.length === 0) {\r\n      throw new Error('No valid data rows found in the CSV file');\r\n    }\r\n\r\n    try {\r\n      return parseTradeData(jsonData);\r\n    } catch (parseError) {\r\n      console.error('Trade data parsing error:', parseError);\r\n      // Provide more specific error messages for common issues\r\n      if (parseError instanceof Error) {\r\n        if (parseError.message.includes('Invalid time value')) {\r\n          throw new Error('Could not parse one or more dates in the CSV file. Please ensure dates are in a standard format like \"MM/DD/YYYY\" or \"Month Day, Year\".');\r\n        }\r\n        throw parseError;\r\n      }\r\n      throw new Error('Failed to parse trade data from CSV file.');\r\n    }\r\n  } catch (error) {\r\n    console.error('CSV parsing error:', error);\r\n    throw error; // Re-throw to be handled by the caller\r\n  }\r\n};\r\n\r\n// Known trade properties that should not be converted to tags\r\nconst knownTradeProperties = [\r\n  'id', 'date', 'Date', 'amount', 'Amount', 'P&L', 'type', 'Type', 'name', 'Name',\r\n  'entry', 'Entry Price', 'exit', 'Exit Price', 'tags', 'Tags', 'riskToReward', 'Risk to Reward',\r\n  'partialsTaken', 'Partials Taken', 'session', 'Session', 'notes', 'Notes',\r\n  'images', 'Images', 'Cumulative P&L', 'Account Balance'\r\n];\r\n\r\n// Common date formats to try when parsing\r\nconst DATE_FORMATS = [\r\n  'MM/dd/yyyy',    // 01/31/2023\r\n  'M/d/yyyy',      // 1/31/2023\r\n  'yyyy-MM-dd',    // 2023-01-31\r\n  'yyyy/MM/dd',    // 2023/01/31\r\n  'dd/MM/yyyy',    // 31/01/2023\r\n  'dd-MM-yyyy',    // 31-01-2023\r\n  'MM-dd-yyyy',    // 01-31-2023\r\n  'M-d-yyyy',      // 1-31-2023\r\n  'MMMM d, yyyy',  // March 7, 2025\r\n  'MMM d, yyyy',   // Mar 7, 2025\r\n  'MMMM dd, yyyy', // March 07, 2025\r\n  'MMM dd, yyyy'   // Mar 07, 2025\r\n];\r\n\r\n// Parse a date string using multiple formats\r\nconst parseDate = (dateStr: string): Date => {\r\n  // Normalize the date string to handle potential inconsistencies\r\n  const normalizedDateStr = dateStr.trim();\r\n\r\n  // Try to parse with each format\r\n  for (const format of DATE_FORMATS) {\r\n    try {\r\n      const parsedDate = parse(normalizedDateStr, format, new Date());\r\n      // Check if the date is valid (not Invalid Date)\r\n      if (!isNaN(parsedDate.getTime())) {\r\n        return parsedDate;\r\n      }\r\n    } catch (error) {\r\n      // Continue to the next format if this one fails\r\n    }\r\n  }\r\n\r\n  // Special handling for month name formats (e.g., \"March 7, 2025\")\r\n  const monthNameRegex = /(January|February|March|April|May|June|July|August|September|October|November|December)\\s+(\\d{1,2})(?:st|nd|rd|th)?(?:,)?\\s+(\\d{4})/i;\r\n  const monthNameMatch = normalizedDateStr.match(monthNameRegex);\r\n\r\n  if (monthNameMatch) {\r\n    const [, month, day, year] = monthNameMatch;\r\n    const monthIndex = [\r\n      'january', 'february', 'march', 'april', 'may', 'june',\r\n      'july', 'august', 'september', 'october', 'november', 'december'\r\n    ].indexOf(month.toLowerCase());\r\n\r\n    if (monthIndex !== -1) {\r\n      const date = new Date(parseInt(year), monthIndex, parseInt(day));\r\n      if (!isNaN(date.getTime())) {\r\n        return date;\r\n      }\r\n    }\r\n  }\r\n\r\n  // If all formats fail, try to create a date directly\r\n  const directDate = new Date(normalizedDateStr);\r\n  if (!isNaN(directDate.getTime())) {\r\n    return directDate;\r\n  }\r\n\r\n  // If all attempts fail, use the current date and log a warning\r\n  console.warn(`Could not parse date: ${normalizedDateStr}. Using current date instead.`);\r\n  return new Date();\r\n};\r\n\r\n// Parse trade data from JSON format\r\nconst parseTradeData = (jsonData: any[]): Trade[] => {\r\n  return jsonData.map((row: any) => {\r\n    // Parse date from various possible formats\r\n    const date = row.Date ? parseDate(row.Date) : new Date();\r\n\r\n    // Handle both the Amount and P&L columns\r\n    let amount = 0;\r\n    try {\r\n      amount = row.Amount !== undefined ?\r\n        (typeof row.Amount === 'string' ? parseFloat(row.Amount) : row.Amount) :\r\n        parseFloat(row['P&L'] || '0');\r\n    } catch (error) {\r\n      console.warn(`Could not parse amount: ${row.Amount || row['P&L']}. Using 0 instead.`);\r\n    }\r\n\r\n    // Parse tags from the Tags column\r\n    let tags = row.Tags ? row.Tags.split(',').map((tag: string) => tag.trim()).filter(Boolean) : [];\r\n\r\n    // Process unknown headers as tag categories\r\n    for (const header in row) {\r\n      // Skip known properties and empty values\r\n      if (knownTradeProperties.includes(header) || !row[header] || row[header] === '') {\r\n        continue;\r\n      }\r\n\r\n      // Convert the header to a tag category\r\n      const categoryName = header.trim();\r\n      const values = String(row[header]).split(',');\r\n\r\n      // Add each value as a tag in the format \"Category:Value\"\r\n      for (const value of values) {\r\n        const trimmedValue = value.trim();\r\n        if (trimmedValue) {\r\n          tags.push(`${categoryName}:${trimmedValue}`);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Determine the trade type based on amount or Type column\r\n    let tradeType: 'win' | 'loss' | 'breakeven';\r\n    if (row.Type && typeof row.Type === 'string') {\r\n      const typeStr = row.Type.toLowerCase();\r\n      if (typeStr === 'win' || typeStr === 'loss' || typeStr === 'breakeven') {\r\n        tradeType = typeStr as 'win' | 'loss' | 'breakeven';\r\n      } else {\r\n        // Fallback to amount-based type\r\n        tradeType = amount > 0 ? 'win' : amount < 0 ? 'loss' : 'breakeven';\r\n      }\r\n    } else {\r\n      // Determine type based on amount\r\n      tradeType = amount > 0 ? 'win' : amount < 0 ? 'loss' : 'breakeven';\r\n    }\r\n\r\n    return {\r\n      id: crypto.randomUUID(),\r\n      date,\r\n      type: tradeType,\r\n      amount: amount,\r\n      ...(row.Name && { name: row.Name }),\r\n      ...(row['Entry Price'] && { entry: row['Entry Price'] }),\r\n      ...(row['Exit Price'] && { exit: row['Exit Price'] }),\r\n\r\n      ...(tags.length > 0 && { tags }),\r\n      ...(row['Risk to Reward'] && { riskToReward: parseFloat(row['Risk to Reward']) }),\r\n      ...(row.Session && { session: row.Session }),\r\n      ...(row.Notes && { notes: row.Notes })\r\n    };\r\n  });\r\n};\r\n\r\n// Main import function that supports both Excel and CSV formats\r\nexport const importTrades = async (file: File): Promise<Trade[]> => {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    const fileType = file.name.split('.').pop()?.toLowerCase();\r\n\r\n    reader.onload = async (e) => {\r\n      try {\r\n        let trades: Trade[] = [];\r\n\r\n        // Handle different file types\r\n        if (fileType === 'csv') {\r\n          // CSV import\r\n          const csvContent = e.target?.result as string;\r\n          trades = await importFromCsv(csvContent);\r\n        } else {\r\n          // Excel import\r\n          const data = e.target?.result as ArrayBuffer;\r\n          trades = await importFromExcel(data);\r\n        }\r\n\r\n        resolve(trades);\r\n      } catch (error) {\r\n        console.error('Import error:', error);\r\n        let errorMessage = 'Failed to parse import file. ';\r\n\r\n        if (error instanceof Error) {\r\n          if (error.message.includes('Invalid time value')) {\r\n            errorMessage += 'There was an issue with a date format in your file. Please ensure all dates are in a standard format like MM/DD/YYYY.';\r\n          } else if (error.message.includes('is not a function')) {\r\n            errorMessage += 'There was an issue with the file structure. Please ensure the file has proper headers and data.';\r\n          } else {\r\n            errorMessage += error.message;\r\n          }\r\n        } else {\r\n          errorMessage += 'Please ensure the file format is correct.';\r\n        }\r\n\r\n        reject(new Error(errorMessage));\r\n      }\r\n    };\r\n\r\n    reader.onerror = () => {\r\n      reject(new Error('Failed to read import file.'));\r\n    };\r\n\r\n    // Read file based on type\r\n    if (fileType === 'csv') {\r\n      reader.readAsText(file);\r\n    } else {\r\n      reader.readAsArrayBuffer(file);\r\n    }\r\n  });\r\n};","import { Box } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { Typography } from '@mui/material';\n\nexport const CalendarGrid = styled(Box)(({ theme }) => ({\n  display: 'grid',\n  gridTemplateColumns: 'repeat(7, 1fr)',\n  gap: theme.spacing(1),\n  padding: theme.spacing(2),\n  backgroundColor: theme.palette.background.paper,\n  borderRadius: theme.shape.borderRadius,\n  boxShadow: theme.shadows[1],\n  width: '100%',\n  minHeight: '600px',\n  alignContent: 'start'\n}));\n\nexport const CalendarCell = styled(Box)(({ theme }) => ({\n  aspectRatio: '1',\n  \n  minHeight: '30px',\n  borderRadius: theme.shape.borderRadius,\n  overflow: 'hidden',\n  backgroundColor: theme.palette.background.default,\n  border: `1px solid ${theme.palette.divider}`,\n}));\n\nexport const WeekdayHeader = styled(Box)(({ theme }) => ({\n  padding: theme.spacing(1),\n  textAlign: 'center',\n  color: theme.palette.text.secondary,\n  fontSize: '0.875rem',\n  fontWeight: 500,\n  border: `1px solid ${theme.palette.divider}`,\n  backgroundColor: theme.palette.background.default,\n  borderRadius: theme.shape.borderRadius,\n})); ","import React, { useState, useMemo, useEffect } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport type { FC } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  IconButton,\r\n  Button,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Stack,\r\n  useTheme,\r\n  alpha,\r\n  Paper,\r\n  Tooltip,\r\n  Snackbar,\r\n  Alert,\r\n  AlertColor,\r\n  MenuItem,\r\n  TextField,\r\n  FormControl,\r\n  Select,\r\n  InputLabel,\r\n  SxProps,\r\n  Theme,\r\n  AppBar,\r\n  Toolbar,\r\n  Avatar,\r\n  Chip,\r\n  Autocomplete\r\n} from '@mui/material';\r\nimport {\r\n  ChevronLeft,\r\n  ChevronRight,\r\n  CalendarToday,\r\n  FileDownload,\r\n  FileUpload,\r\n  TrendingUp,\r\n  EmojiEvents,\r\n  CalendarMonth,\r\n  Today,\r\n  ArrowBack,\r\n  Brightness4 as DarkModeIcon,\r\n  Brightness7 as LightModeIcon,\r\n  Google as GoogleIcon,\r\n  Logout as LogoutIcon,\r\n  FilterAlt,\r\n  Clear,\r\n  Close as CloseIcon,\r\n  Security as SecurityIcon\r\n} from '@mui/icons-material';\r\nimport {\r\n  format,\r\n  addMonths,\r\n  subMonths,\r\n  startOfMonth,\r\n  endOfMonth,\r\n  eachDayOfInterval,\r\n  eachWeekOfInterval,\r\n  isSameMonth,\r\n  isSameDay,\r\n  startOfWeek,\r\n  endOfWeek,\r\n  isSameWeek,\r\n  isToday\r\n} from 'date-fns';\r\nimport { getDayTrades, getTotalForDay, getDayPercentage } from '../utils/tradeUtils';\r\nimport { formatCurrency } from '../utils/formatters';\r\nimport { Trade } from '../types/trade';\r\nimport { getTagChipStyles, formatTagForDisplay, isGroupedTag, getTagGroup, getUniqueTagGroups, filterTagsByGroup } from '../utils/tagColors';\r\nimport DayDialog from './trades/DayDialog';\r\nimport SelectDateDialog from './SelectDateDialog';\r\nimport PerformanceCharts from './PerformanceCharts';\r\nimport TagFilterDialog from './TagFilterDialog';\r\nimport TargetBadge from './TargetBadge';\r\nimport { exportTrades, importTrades } from '../utils/tradeExportImport';\r\nimport { CalendarCell, WeekdayHeader } from './CalendarGrid';\r\n\r\nimport {\r\n  AccountBalanceCard,\r\n  AccountBalanceTitle,\r\n  AccountBalanceAmount,\r\n  AccountBalanceChange,\r\n  MonthlyStatsCard,\r\n  MonthlyStatsTitle,\r\n  MonthlyStatsGrid,\r\n  MonthlyStatItem,\r\n  MonthlyStatLabel,\r\n  MonthlyStatValue,\r\n  StyledCalendarDay,\r\n  DayStatus,\r\n  AnimatedPulse,\r\n  DayNumber,\r\n  TradeAmount,\r\n  TradeCount,\r\n  DialogTitleStyled,\r\n  DialogContentStyled,\r\n  DialogActionsStyled\r\n} from './StyledComponents';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { dialogProps } from '../styles/dialogStyles';\r\nimport { scrollbarStyles } from '../styles/scrollbarStyles';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport ImageZoomDialog from './ImageZoomDialog';\r\nimport { NewTradeForm, TradeImage } from './trades/TradeForm';\r\n\r\ninterface TradeCalendarProps {\r\n  trades: Trade[];\r\n  accountBalance: number;\r\n  maxDailyDrawdown: number;\r\n  weeklyTarget?: number;\r\n  monthlyTarget?: number;\r\n  yearlyTarget?: number;\r\n  riskPerTrade?: number;\r\n  dynamicRiskEnabled?: boolean;\r\n  increasedRiskPercentage?: number;\r\n  profitThresholdPercentage?: number;\r\n  onAddTrade?: (trade: Trade) => Promise<void>;\r\n  onEditTrade?: (trade: Trade) => Promise<void>;\r\n  onUpdateTradeProperty?: (tradeId: string, updateCallback: (trade: Trade) => Trade, createIfNotExists?: (tradeId: string) => Trade) => Promise<Trade | undefined>;\r\n  onImageUpload?: (tradeId: string, image: TradeImage, add: boolean) => Promise<void>;\r\n  onDeleteTrade?: (tradeId: string) => Promise<void>;\r\n  onAccountBalanceChange: (balance: number) => void;\r\n  onImportTrades?: (trades: Trade[]) => void;\r\n  calendarName?: string;\r\n  onClearMonthTrades: (month: number, year: number) => void;\r\n  onToggleTheme: () => void;\r\n  mode: 'light' | 'dark';\r\n  // Pre-calculated statistics\r\n  totalPnL?: number;\r\n}\r\n\r\ninterface AccountBalanceProps {\r\n  balance: number;\r\n  totalProfit: number;\r\n  onChange: (balance: number) => void;\r\n  trades: Trade[];\r\n  onPerformanceClick?: () => void;\r\n  riskPerTrade?: number;\r\n  dynamicRiskEnabled?: boolean;\r\n  increasedRiskPercentage?: number;\r\n  profitThresholdPercentage?: number;\r\n}\r\n\r\ninterface DayDialogProps {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  date: Date;\r\n  trades: Trade[];\r\n  onAddTrade?: (trade: Omit<Trade, 'id'>) => void;\r\n  onEditTrade?: (trade: Trade) => void;\r\n  onDeleteTrade?: (tradeId: string) => void;\r\n  onDateChange: (date: Date) => void;\r\n  accountBalance: number;\r\n  onAccountBalanceChange: (balance: number) => void;\r\n  allTrades?: Trade[];\r\n}\r\n\r\n\r\ninterface DayStats {\r\n  netAmount: number;\r\n  status: DayStatus;\r\n  percentage: string;\r\n  isDrawdownViolation: boolean;\r\n}\r\n\r\ninterface MonthlyStats {\r\n  totalPnL: number;\r\n  winRate: number;\r\n  profitFactor: number;\r\n  avgWin: number;\r\n  avgLoss: number;\r\n  netChange: number;\r\n}\r\n\r\ninterface WeeklyPnLProps {\r\n  date: Date;\r\n  trades: Trade[];\r\n  monthStart: Date;\r\n  weekIndex: number;\r\n  currentMonth: number;\r\n  accountBalance: number;\r\n  weeklyTarget?: number;\r\n  sx?: SxProps<Theme>;\r\n}\r\n\r\ninterface MonthlyStatsProps {\r\n  trades: Trade[];\r\n  accountBalance: number;\r\n  onImportTrades?: (trades: Trade[]) => void;\r\n  onDeleteTrade?: (id: string) => void;\r\n  currentDate?: Date;\r\n  monthlyTarget?: number;\r\n  onClearMonthTrades?: (month: number, year: number) => void;\r\n}\r\n\r\nconst AccountBalance: React.FC<AccountBalanceProps> = ({\r\n  balance,\r\n  onChange,\r\n  trades,\r\n  totalProfit,\r\n  onPerformanceClick,\r\n  riskPerTrade,\r\n  dynamicRiskEnabled,\r\n  increasedRiskPercentage,\r\n  profitThresholdPercentage\r\n}) => {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [tempBalance, setTempBalance] = useState(balance.toString());\r\n\r\n\r\n  const theme = useTheme();\r\n\r\n\r\n  const profitPercentage = trades.length > 0 && balance > 0 ? (totalProfit / balance * 100).toFixed(2) : '0';\r\n  const totalAccountValue = balance + totalProfit;\r\n\r\n  // Calculate the effective risk percentage based on dynamic risk settings\r\n  const effectiveRiskPercentage = useMemo(() => {\r\n    if (!riskPerTrade) return undefined;\r\n\r\n    if (dynamicRiskEnabled &&\r\n      increasedRiskPercentage &&\r\n      profitThresholdPercentage &&\r\n      parseFloat(profitPercentage) >= profitThresholdPercentage) {\r\n      return increasedRiskPercentage;\r\n    }\r\n\r\n    return riskPerTrade;\r\n  }, [riskPerTrade, dynamicRiskEnabled, increasedRiskPercentage, profitThresholdPercentage, profitPercentage]);\r\n\r\n  const handleSubmit = () => {\r\n    const newBalance = parseFloat(tempBalance);\r\n    if (!isNaN(newBalance) && newBalance > 0) {\r\n      onChange(newBalance);\r\n      setIsEditing(false);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter') {\r\n      handleSubmit();\r\n    } else if (e.key === 'Escape') {\r\n      setIsEditing(false);\r\n      setTempBalance(balance.toString());\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n  return (\r\n    <Paper\r\n      elevation={2}\r\n      sx={{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: 1.5,\r\n        p: 2,\r\n        borderRadius: 2,\r\n        bgcolor: 'background.paper',\r\n        border: '1px solid',\r\n        borderColor: 'divider',\r\n        position: 'relative',\r\n        overflow: 'hidden'\r\n      }}\r\n    >\r\n      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n          <Typography variant=\"h6\" sx={{ color: 'text.primary', fontWeight: 600, pl: 1 }}>\r\n            Account Balance\r\n          </Typography>\r\n          <Tooltip title=\"View Performance Analytics\">\r\n            <IconButton\r\n              size=\"small\"\r\n              onClick={onPerformanceClick}\r\n              sx={{\r\n                color: 'primary.main',\r\n                bgcolor: alpha(theme.palette.primary.main, 0.08),\r\n                '&:hover': {\r\n                  bgcolor: alpha(theme.palette.primary.main, 0.15),\r\n                }\r\n              }}\r\n            >\r\n              <TrendingUp fontSize=\"small\" />\r\n            </IconButton>\r\n          </Tooltip>\r\n        </Box>\r\n        {isEditing ? (\r\n          <TextField\r\n            value={tempBalance}\r\n            onChange={(e) => {\r\n              const value = e.target.value;\r\n              if (value === '' || /^\\d*\\.?\\d*$/.test(value)) {\r\n                setTempBalance(value);\r\n              }\r\n            }}\r\n            onBlur={handleSubmit}\r\n            onKeyDown={handleKeyPress}\r\n            size=\"small\"\r\n            autoFocus\r\n            sx={{\r\n              width: '150px',\r\n              '& .MuiInputBase-input': {\r\n                py: 0.8,\r\n                px: 1.5,\r\n                fontSize: '1.1rem',\r\n                fontWeight: 600,\r\n                color: 'text.primary'\r\n              }\r\n            }}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <Typography sx={{ color: 'text.secondary', fontSize: '1.1rem', mr: 0.5, fontWeight: 600 }}>\r\n                  $\r\n                </Typography>\r\n              )\r\n            }}\r\n          />\r\n        ) : (\r\n          <Typography\r\n            onClick={() => setIsEditing(true)}\r\n            sx={{\r\n              cursor: 'pointer',\r\n              fontSize: '1.5rem',\r\n              fontWeight: 700,\r\n              color: 'text.primary',\r\n              '&:hover': {\r\n                color: 'primary.main'\r\n              },\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              gap: 0.5\r\n            }}\r\n          >\r\n            <Box component=\"span\" sx={{ fontSize: '1.1rem', color: 'text.secondary', fontWeight: 500 }}>$</Box>\r\n            {balance.toLocaleString()}\r\n          </Typography>\r\n        )}\r\n      </Box>\r\n\r\n      <Box sx={{\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        backgroundColor: theme => alpha(theme.palette.background.default, 0.5),\r\n        p: 1.5,\r\n        borderRadius: 1.5,\r\n        mt: 0.5\r\n      }}>\r\n        <Box>\r\n          <Typography\r\n            variant=\"body2\"\r\n            sx={{\r\n              color: 'text.secondary',\r\n              mb: 0.5,\r\n              fontWeight: 500\r\n            }}\r\n          >\r\n            Current P&L\r\n          </Typography>\r\n          <Typography\r\n            variant=\"h6\"\r\n            sx={{\r\n              fontSize: '1.2rem',\r\n              color: totalProfit > 0 ? 'success.main' : totalProfit < 0 ? 'error.main' : 'text.secondary',\r\n              fontWeight: 700,\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              gap: 0.5\r\n            }}\r\n          >\r\n            ${trades.length > 0 ? Math.abs(totalProfit).toLocaleString() : '0'}\r\n            <Typography\r\n              component=\"span\"\r\n              sx={{\r\n                fontSize: '0.9rem',\r\n                color: totalProfit > 0 ? 'success.main' : totalProfit < 0 ? 'error.main' : 'text.secondary',\r\n                fontWeight: 600\r\n              }}\r\n            >\r\n              ({profitPercentage}%)\r\n            </Typography>\r\n          </Typography>\r\n        </Box>\r\n\r\n        <Box>\r\n          <Typography\r\n            variant=\"body2\"\r\n            sx={{\r\n              color: 'text.secondary',\r\n              mb: 0.5,\r\n              fontWeight: 500,\r\n              textAlign: 'right'\r\n            }}\r\n          >\r\n            Total Value\r\n          </Typography>\r\n          <Typography\r\n            variant=\"h6\"\r\n            sx={{\r\n              fontSize: '1.2rem',\r\n              color: totalAccountValue > balance ? 'success.main' : totalAccountValue < balance ? 'error.main' : 'text.secondary',\r\n              fontWeight: 700\r\n            }}\r\n          >\r\n            ${totalAccountValue.toLocaleString()}\r\n          </Typography>\r\n        </Box>\r\n      </Box>\r\n\r\n      {riskPerTrade && (\r\n        <Box sx={{\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          gap: 1,\r\n          mt: 1\r\n        }}>\r\n          <Box sx={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'space-between',\r\n            backgroundColor: theme => alpha(theme.palette.primary.main, 0.08),\r\n            p: 1.5,\r\n            borderRadius: 1.5,\r\n          }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n              <SecurityIcon sx={{ fontSize: '1rem', color: 'primary.main' }} />\r\n              <Typography\r\n                variant=\"body2\"\r\n                sx={{\r\n                  color: 'text.secondary',\r\n                  fontWeight: 500\r\n                }}\r\n              >\r\n                Risk Per Trade ({effectiveRiskPercentage}%)\r\n                {dynamicRiskEnabled && effectiveRiskPercentage !== riskPerTrade && (\r\n                  <Box component=\"span\" sx={{ ml: 1, color: 'success.main', fontSize: '0.75rem', fontWeight: 700 }}>\r\n                    INCREASED\r\n                  </Box>\r\n                )}\r\n              </Typography>\r\n            </Box>\r\n            <Typography\r\n              variant=\"body1\"\r\n              sx={{\r\n                fontWeight: 600,\r\n                color: 'primary.main'\r\n              }}\r\n            >\r\n              ${effectiveRiskPercentage ? ((totalAccountValue * effectiveRiskPercentage) / 100).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) : '0.00'}\r\n            </Typography>\r\n          </Box>\r\n\r\n          {dynamicRiskEnabled && profitThresholdPercentage && increasedRiskPercentage && (\r\n            <Box sx={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'space-between',\r\n              backgroundColor: theme => alpha(theme.palette.background.default, 0.5),\r\n              p: 1,\r\n              borderRadius: 1.5,\r\n              fontSize: '0.75rem'\r\n            }}>\r\n              <Typography variant=\"caption\" sx={{ color: 'text.secondary' }}>\r\n                Dynamic Risk: {parseFloat(profitPercentage) >= profitThresholdPercentage ?\r\n                  <Box component=\"span\" sx={{ color: 'success.main', fontWeight: 600 }}>Active</Box> :\r\n                  <Box component=\"span\" sx={{ color: 'text.secondary', fontWeight: 600 }}>Inactive</Box>}\r\n              </Typography>\r\n              <Typography variant=\"caption\" sx={{ color: 'text.secondary' }}>\r\n                Threshold: {profitThresholdPercentage}% profit\r\n              </Typography>\r\n            </Box>\r\n          )}\r\n        </Box>\r\n      )}\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst MonthlyStats: React.FC<MonthlyStatsProps> = ({\r\n  trades,\r\n  accountBalance,\r\n  onImportTrades,\r\n  onDeleteTrade,\r\n  currentDate = new Date(),\r\n  monthlyTarget,\r\n  onClearMonthTrades\r\n}) => {\r\n  const [showClearConfirm, setShowClearConfirm] = useState(false);\r\n  const monthTrades = trades.filter(trade =>\r\n    new Date(trade.date).getMonth() === currentDate.getMonth() &&\r\n    new Date(trade.date).getFullYear() === currentDate.getFullYear()\r\n  );\r\n\r\n  // Calculate monthly values from the filtered trades\r\n  const totalPnL = monthTrades.reduce((sum, trade) => sum + trade.amount, 0);\r\n  const winCount = monthTrades.filter(trade => trade.type === 'win').length;\r\n  const lossCount = monthTrades.filter(trade => trade.type === 'loss').length;\r\n  const winRate = monthTrades.length > 0 ? (winCount / monthTrades.length * 100).toFixed(1) : '0';\r\n  const growthPercentage = accountBalance > 0 ? (totalPnL / accountBalance * 100).toFixed(2) : '0';\r\n\r\n  // Calculate monthly target progress\r\n  const targetProgress = monthlyTarget && monthlyTarget > 0 ? (parseFloat(growthPercentage) / monthlyTarget * 100).toFixed(0) : '0';\r\n  const isTargetMet = monthlyTarget ? parseFloat(growthPercentage) >= monthlyTarget : false;\r\n\r\n  const [exportFormat, setExportFormat] = useState<'xlsx' | 'csv'>('xlsx');\r\n\r\n  const handleExport = () => {\r\n    if (trades.length === 0) {\r\n      return;\r\n    }\r\n    exportTrades(trades, accountBalance, exportFormat);\r\n  };\r\n\r\n  const toggleExportFormat = () => {\r\n    setExportFormat(prev => prev === 'xlsx' ? 'csv' : 'xlsx');\r\n  };\r\n\r\n  const [isImporting, setIsImporting] = useState(false);\r\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n  const [snackbarMessage, setSnackbarMessage] = useState('');\r\n  const [snackbarSeverity, setSnackbarSeverity] = useState<AlertColor>('success');\r\n\r\n  const handleImport = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = event.target.files?.[0];\r\n    if (!file || !onImportTrades) return;\r\n\r\n    setIsImporting(true);\r\n\r\n    try {\r\n      const importedTrades = await importTrades(file);\r\n      onImportTrades(importedTrades);\r\n\r\n      // Show success message\r\n      setSnackbarMessage(`Successfully imported ${importedTrades.length} trades`);\r\n      setSnackbarSeverity('success');\r\n      setSnackbarOpen(true);\r\n    } catch (error) {\r\n      console.error('Import failed:', error);\r\n\r\n      // Show error message\r\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error during import';\r\n      setSnackbarMessage(`Error importing trades: ${errorMessage}`);\r\n      setSnackbarSeverity('error');\r\n      setSnackbarOpen(true);\r\n    } finally {\r\n      setIsImporting(false);\r\n    }\r\n\r\n    // Reset the input\r\n    event.target.value = '';\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    setShowClearConfirm(true);\r\n  };\r\n\r\n  const handleClearConfirm = () => {\r\n    if (onClearMonthTrades) {\r\n      onClearMonthTrades(currentDate.getMonth(), currentDate.getFullYear());\r\n    }\r\n    setShowClearConfirm(false);\r\n  };\r\n\r\n  // Handle snackbar close\r\n  const handleSnackbarClose = () => {\r\n    setSnackbarOpen(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Paper\r\n        elevation={2}\r\n        sx={{\r\n          p: 2,\r\n          borderRadius: 2,\r\n          position: 'relative',\r\n          width: '100%',\r\n          pb: { xs: 5, sm: 2.5 },\r\n          overflow: 'hidden'\r\n        }}\r\n      >\r\n        <Box sx={{\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'space-between',\r\n        }}>\r\n          <Typography variant=\"h6\" sx={{ mb: 2, fontWeight: 600, pl: 0.5 }}>\r\n            Monthly Performance\r\n          </Typography>\r\n\r\n          <Box sx={{\r\n            position: { xs: 'absolute', sm: 'static' },\r\n            bottom: 0,\r\n            left: 0,\r\n            right: 0,\r\n            display: 'flex',\r\n            gap: 1,\r\n            justifyContent: { xs: 'center', sm: 'flex-end' },\r\n            mt: { xs: 2, sm: 0 },\r\n            flex: 1,\r\n            alignItems: 'flex-start'\r\n          }}>\r\n            <input\r\n              type=\"file\"\r\n              accept=\".xlsx,.csv\"\r\n              style={{ display: 'none' }}\r\n              id=\"import-file\"\r\n              onChange={handleImport}\r\n            />\r\n            <Tooltip title=\"Import trades from Excel or CSV. Custom columns will be converted to tags (e.g., 'Strategy: Breakout' becomes 'Strategy:Breakout' tag)\">\r\n              <label htmlFor=\"import-file\">\r\n                <Button\r\n                  component=\"span\"\r\n                  size=\"small\"\r\n                  variant=\"outlined\"\r\n                  startIcon={<FileUpload />}\r\n                  sx={{\r\n                    color: 'text.secondary',\r\n                    fontSize: '0.75rem',\r\n                    fontWeight: 500,\r\n                    textTransform: 'none',\r\n                    minWidth: 'auto',\r\n                    p: 0.5,\r\n                    px: 1,\r\n                    bgcolor: 'background.paper',\r\n                    border: '1px solid',\r\n                    borderColor: 'divider',\r\n                    '&:hover': {\r\n                      bgcolor: 'action.hover',\r\n                      color: 'text.primary',\r\n                      borderColor: 'text.primary'\r\n                    }\r\n                  }}\r\n                >\r\n                  Import\r\n                </Button>\r\n              </label>\r\n            </Tooltip>\r\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n              <Button\r\n                size=\"small\"\r\n                variant=\"outlined\"\r\n                startIcon={<FileDownload />}\r\n                onClick={handleExport}\r\n                disabled={monthTrades.length === 0}\r\n                sx={{\r\n                  color: 'text.secondary',\r\n                  fontSize: '0.75rem',\r\n                  fontWeight: 500,\r\n                  textTransform: 'none',\r\n                  minWidth: 'auto',\r\n                  p: 0.5,\r\n                  px: 1,\r\n                  bgcolor: 'background.paper',\r\n                  border: '1px solid',\r\n                  borderColor: 'divider',\r\n                  '&:hover': {\r\n                    bgcolor: 'action.hover',\r\n                    color: 'text.primary',\r\n                    borderColor: 'text.primary'\r\n                  },\r\n                  '&.Mui-disabled': {\r\n                    color: 'text.disabled',\r\n                    bgcolor: 'action.disabledBackground',\r\n                    borderColor: 'divider'\r\n                  }\r\n                }}\r\n              >\r\n                Export {exportFormat.toUpperCase()}\r\n              </Button>\r\n              <Tooltip title={`Switch to ${exportFormat === 'xlsx' ? 'CSV' : 'Excel'} format`}>\r\n                <IconButton\r\n                  size=\"small\"\r\n                  onClick={toggleExportFormat}\r\n                  disabled={monthTrades.length === 0}\r\n                  sx={{ ml: 0.5 }}\r\n                >\r\n                  <Typography variant=\"caption\" sx={{ fontWeight: 600 }}>\r\n                    {exportFormat === 'xlsx' ? 'CSV' : 'XLS'}\r\n                  </Typography>\r\n                </IconButton>\r\n              </Tooltip>\r\n            </Box>\r\n\r\n            <Button\r\n              size=\"small\"\r\n              variant=\"outlined\"\r\n              onClick={handleClearClick}\r\n              disabled={monthTrades.length === 0}\r\n              sx={{\r\n                color: 'error.main',\r\n                fontSize: '0.75rem',\r\n                fontWeight: 500,\r\n                textTransform: 'none',\r\n                minWidth: 'auto',\r\n                p: 0.5,\r\n                px: 1,\r\n                bgcolor: 'background.paper',\r\n                border: '1px solid',\r\n                borderColor: 'divider',\r\n                '&:hover': {\r\n                  bgcolor: (theme) => alpha(theme.palette.error.main, 0.08),\r\n                  borderColor: 'error.main'\r\n                },\r\n                '&.Mui-disabled': {\r\n                  color: 'text.disabled',\r\n                  bgcolor: 'action.disabledBackground',\r\n                  borderColor: 'divider'\r\n                }\r\n              }}\r\n            >\r\n              Clear Month\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n\r\n        <Box sx={{\r\n          display: 'grid',\r\n          gridTemplateColumns: { xs: '1fr', sm: 'repeat(3, 1fr)' },\r\n          gap: 2.5,\r\n          mb: 2\r\n        }}>\r\n          {/* Monthly P&L Card */}\r\n          <Box sx={{\r\n            p: 2,\r\n            borderRadius: 2,\r\n            bgcolor: theme => alpha(theme.palette.background.default, 0.5),\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            gap: 0.5\r\n          }}>\r\n            <Box sx={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              gap: 1,\r\n              mb: 0.5\r\n            }}>\r\n              <TrendingUp sx={{ fontSize: '1.2rem', color: totalPnL > 0 ? 'success.main' : totalPnL < 0 ? 'error.main' : 'text.secondary' }} />\r\n              <Typography variant=\"body1\" sx={{ fontWeight: 600, color: 'text.secondary' }}>\r\n                Monthly P&L\r\n              </Typography>\r\n            </Box>\r\n            <Typography\r\n              variant=\"h5\"\r\n              sx={{\r\n                fontWeight: 700,\r\n                color: totalPnL > 0 ? 'success.main' : totalPnL < 0 ? 'error.main' : 'text.primary',\r\n                display: 'flex',\r\n                alignItems: 'baseline',\r\n                gap: 0.5\r\n              }}\r\n            >\r\n              {formatCurrency(totalPnL)}\r\n              <Typography\r\n                component=\"span\"\r\n                sx={{\r\n                  fontSize: '1rem',\r\n                  color: totalPnL > 0 ? 'success.main' : totalPnL < 0 ? 'error.main' : 'text.primary',\r\n                  fontWeight: 600\r\n                }}\r\n              >\r\n                ({growthPercentage}%)\r\n              </Typography>\r\n            </Typography>\r\n            {monthlyTarget && (\r\n              <Box sx={{ width: '100%', mt: 1.5 }}>\r\n                <Box sx={{\r\n                  display: 'flex',\r\n                  justifyContent: 'space-between',\r\n                  mb: 0.5\r\n                }}>\r\n                  <Typography variant=\"body2\" sx={{ fontWeight: 500, color: 'text.secondary' }}>\r\n                    Target Progress\r\n                  </Typography>\r\n                  <Typography variant=\"body2\" sx={{\r\n                    fontWeight: 600,\r\n                    color: isTargetMet ? 'success.main' : 'primary.main'\r\n                  }}>\r\n                    {targetProgress}%\r\n                  </Typography>\r\n                </Box>\r\n                <Box sx={{\r\n                  width: '100%',\r\n                  height: '8px',\r\n                  bgcolor: theme => alpha(theme.palette.divider, 0.5),\r\n                  borderRadius: '4px',\r\n                  overflow: 'hidden'\r\n                }}>\r\n                  <Box sx={{\r\n                    width: `${Math.max(Math.min(parseFloat(targetProgress), 100), 0)}%`,\r\n                    height: '100%',\r\n                    bgcolor: isTargetMet ? 'success.main' : 'primary.main',\r\n                    transition: 'width 0.3s ease'\r\n                  }} />\r\n                </Box>\r\n              </Box>\r\n            )}\r\n          </Box>\r\n\r\n          {/* Win Rate Card */}\r\n          <Box sx={{\r\n            p: 2,\r\n            borderRadius: 2,\r\n            bgcolor: theme => alpha(theme.palette.background.default, 0.5),\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            gap: 0.5\r\n          }}>\r\n            <Box sx={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              gap: 1,\r\n              mb: 0.5\r\n            }}>\r\n              <EmojiEvents sx={{ fontSize: '1.2rem', color: parseFloat(winRate) > 50 ? 'success.main' : 'text.secondary' }} />\r\n              <Typography variant=\"body1\" sx={{ fontWeight: 600, color: 'text.secondary' }}>\r\n                Win Rate\r\n              </Typography>\r\n            </Box>\r\n            <Typography variant=\"h5\" sx={{ fontWeight: 700, color: parseFloat(winRate) > 50 ? 'success.main' : 'text.primary' }}>\r\n              {winRate}%\r\n            </Typography>\r\n            <Typography variant=\"body1\" sx={{ fontWeight: 500, color: 'text.secondary', mt: 0.5 }}>\r\n              {winCount} Wins / {lossCount} Losses\r\n            </Typography>\r\n            <Box sx={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              mt: 1,\r\n              gap: 1\r\n            }}>\r\n              <Box sx={{\r\n                height: '10px',\r\n                bgcolor: 'success.main',\r\n                borderRadius: '5px',\r\n                flex: winCount || 1\r\n              }} />\r\n              <Box sx={{\r\n                height: '10px',\r\n                bgcolor: 'error.main',\r\n                borderRadius: '5px',\r\n                flex: lossCount || 1\r\n              }} />\r\n            </Box>\r\n          </Box>\r\n\r\n          {/* Total Trades Card */}\r\n          <Box sx={{\r\n            p: 2,\r\n            borderRadius: 2,\r\n            bgcolor: theme => alpha(theme.palette.background.default, 0.5),\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            gap: 0.5\r\n          }}>\r\n            <Box sx={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              gap: 1,\r\n              mb: 0.5\r\n            }}>\r\n              <CalendarMonth sx={{ fontSize: '1.2rem', color: 'text.secondary' }} />\r\n              <Typography variant=\"body1\" sx={{ fontWeight: 600, color: 'text.secondary' }}>\r\n                Trading Activity\r\n              </Typography>\r\n            </Box>\r\n            <Typography variant=\"h5\" sx={{ fontWeight: 700, color: 'text.primary' }}>\r\n              {monthTrades.length} Days\r\n            </Typography>\r\n            <Typography variant=\"body1\" sx={{ fontWeight: 500, color: 'text.secondary', mt: 0.5 }}>\r\n              {monthTrades.length > 0 ? (monthTrades.length / 30 * 100).toFixed(0) : 0}% of Month Active\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n\r\n      </Paper>\r\n      <Dialog\r\n        open={showClearConfirm}\r\n        onClose={() => setShowClearConfirm(false)}\r\n        maxWidth=\"xs\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>Clear Trades</DialogTitle>\r\n        <DialogContent>\r\n          <Typography>\r\n            Are you sure you want to clear all trades? This action cannot be undone.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setShowClearConfirm(false)}>Cancel</Button>\r\n          <Button onClick={handleClearConfirm} color=\"error\">Clear</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Snackbar for import notifications */}\r\n      <Snackbar\r\n        open={snackbarOpen}\r\n        autoHideDuration={snackbarSeverity === 'success' ? 3000 : 6000}\r\n        onClose={handleSnackbarClose}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n      >\r\n        <Alert\r\n          onClose={handleSnackbarClose}\r\n          severity={snackbarSeverity}\r\n          variant=\"filled\"\r\n          sx={{ width: '100%' }}\r\n        >\r\n          {snackbarMessage}\r\n        </Alert>\r\n      </Snackbar>\r\n    </>\r\n  );\r\n};\r\n\r\nconst WeeklyPnL: React.FC<WeeklyPnLProps> = ({ date, trades, monthStart, weekIndex, currentMonth, accountBalance, weeklyTarget, sx }) => {\r\n  const weekStart = startOfWeek(date, { weekStartsOn: 0 });\r\n  const weekEnd = endOfWeek(date, { weekStartsOn: 0 });\r\n\r\n  const weekTrades = trades.filter(trade =>\r\n    isSameWeek(new Date(trade.date), weekStart, { weekStartsOn: 0 }) &&\r\n    new Date(trade.date).getMonth() === currentMonth\r\n  );\r\n\r\n  const totalPnL = weekTrades.reduce((sum, trade) => sum + trade.amount, 0);\r\n  const percentage = accountBalance > 0 ? (totalPnL / accountBalance * 100).toFixed(1) : '0';\r\n  const targetProgress = weeklyTarget && weeklyTarget > 0 ? (parseFloat(percentage) / weeklyTarget * 100).toFixed(0) : '0';\r\n  const isTargetMet = weeklyTarget ? parseFloat(percentage) >= weeklyTarget : false;\r\n\r\n  return (\r\n    <Box sx={{\r\n      bgcolor: 'background.paper',\r\n      borderRadius: 1,\r\n      border: '1px solid',\r\n      borderColor: 'divider',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      height: '100%',\r\n      ...sx\r\n    }}>\r\n      <Stack spacing={0.3} sx={{ alignItems: 'center' }}>\r\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\r\n          <TrendingUp sx={{ fontSize: '0.875rem', color: 'text.secondary' }} />\r\n          <Typography variant=\"caption\" color=\"text.secondary\" sx={{ fontSize: '0.75rem' }}>\r\n            Week {weekIndex + 1}\r\n          </Typography>\r\n\r\n        </Box>\r\n        <Typography\r\n          variant=\"subtitle1\"\r\n          sx={{\r\n            fontWeight: 600,\r\n            color: totalPnL > 0 ? 'success.main' : totalPnL < 0 ? 'error.main' : 'text.primary',\r\n            fontSize: '0.875rem',\r\n            textAlign: 'center'\r\n          }}\r\n        >\r\n          {formatCurrency(totalPnL)}\r\n        </Typography>\r\n        <Typography\r\n          variant=\"caption\"\r\n          sx={{\r\n            color: totalPnL > 0 ? 'success.main' : totalPnL < 0 ? 'error.main' : 'text.secondary',\r\n            fontSize: '0.75rem',\r\n            fontWeight: 500,\r\n            textAlign: 'center'\r\n          }}\r\n        >\r\n          {percentage}%\r\n        </Typography>\r\n        {weeklyTarget && (\r\n          <TargetBadge\r\n            progress={parseFloat(targetProgress)}\r\n            isMet={isTargetMet}\r\n            tooltipText={`${isTargetMet ? 'Weekly target achieved' : 'Progress towards weekly target'}: ${targetProgress}%`}\r\n          />\r\n        )}\r\n        <Typography\r\n          variant=\"caption\"\r\n          color=\"text.secondary\"\r\n          sx={{\r\n            fontSize: '0.75rem',\r\n            textAlign: 'center'\r\n          }}\r\n        >\r\n          {weekTrades.length} trades\r\n        </Typography>\r\n      </Stack>\r\n    </Box>\r\n  );\r\n};\r\n\r\n\r\n\r\n  export const createNewTradeData = (): NewTradeForm => ({\r\n    id: uuidv4()!!,\r\n    name: '',\r\n    amount: '',\r\n    type: 'win',\r\n    entry: '',\r\n    date: null,\r\n    exit: '',\r\n    tags: [],\r\n    riskToReward: '',\r\n    partialsTaken: false,\r\n    session: '',\r\n    notes: '',\r\n    pendingImages: [],\r\n    uploadedImages: [],\r\n  });\r\n\r\nconst calculateDayStats = (trades: Trade[], accountBalance: number, maxDailyDrawdown: number): DayStats => {\r\n  // Calculate net amount for the day\r\n  const netAmount = trades.reduce((sum, trade) => sum + trade.amount, 0);\r\n\r\n  // Calculate percentage loss/gain relative to account balance\r\n  const percentage = accountBalance > 0 ? ((netAmount / accountBalance) * 100).toFixed(1) : '0';\r\n\r\n  let status: DayStatus = 'neutral';\r\n  if (trades.length > 0) {\r\n    status = netAmount > 0 ? 'win' : netAmount < 0 ? 'loss' : 'neutral';\r\n  }\r\n\r\n  // Check for drawdown violation - if the loss percentage exceeds maxDailyDrawdown\r\n  const percentageValue = parseFloat(percentage);\r\n  const isDrawdownViolation = status === 'loss' && Math.abs(percentageValue) > maxDailyDrawdown;\r\n\r\n  return { netAmount, status, percentage, isDrawdownViolation };\r\n};\r\n\r\nconst calculateMonthlyStats = (trades: Trade[], currentDate: Date, accountBalance: number): MonthlyStats => {\r\n  const monthTrades = trades.filter(trade => isSameMonth(new Date(trade.date), currentDate));\r\n  const totalPnL = monthTrades.reduce((sum, trade) => sum + trade.amount, 0);\r\n  const winCount = monthTrades.filter(trade => trade.type === 'win').length;\r\n  const lossCount = monthTrades.filter(trade => trade.type === 'loss').length;\r\n  const winRate = monthTrades.length > 0 ? (winCount / monthTrades.length * 100) : 0;\r\n\r\n  const winningTrades = monthTrades.filter(t => t.type === 'win');\r\n  const losingTrades = monthTrades.filter(t => t.type === 'loss');\r\n\r\n  // Calculate profit factor (gross profit / gross loss)\r\n  const grossProfit = winningTrades.reduce((sum, t) => sum + t.amount, 0);\r\n  const grossLoss = Math.abs(losingTrades.reduce((sum, t) => sum + t.amount, 0));\r\n  const profitFactor = grossLoss > 0 ? grossProfit / grossLoss : winCount > 0 ? Infinity : 0;\r\n\r\n  const avgWin = winCount > 0\r\n    ? winningTrades.reduce((sum, t) => sum + t.amount, 0) / winCount\r\n    : 0;\r\n\r\n  const avgLoss = lossCount > 0\r\n    ? losingTrades.reduce((sum, t) => sum + t.amount, 0) / lossCount\r\n    : 0;\r\n\r\n  const netChange = accountBalance > 0 ? (totalPnL / accountBalance * 100) : 0;\r\n\r\n  return {\r\n    totalPnL,\r\n    winRate,\r\n    profitFactor,\r\n    avgWin,\r\n    avgLoss,\r\n    netChange\r\n  };\r\n};\r\n\r\n// TagFilter component for filtering trades by tags\r\ninterface TagFilterProps {\r\n  allTags: string[];\r\n  selectedTags: string[];\r\n  onTagsChange: (tags: string[]) => void;\r\n}\r\n\r\nconst TagFilter: React.FC<TagFilterProps> = ({ allTags, selectedTags, onTagsChange }) => {\r\n  const theme = useTheme();\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClearTags = () => {\r\n    onTagsChange([]);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n      <Tooltip title=\"Filter by tags\">\r\n        <Button\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          startIcon={<FilterAlt />}\r\n          onClick={() => setOpen(true)}\r\n          sx={{\r\n            borderColor: selectedTags.length > 0 ? 'primary.main' : 'divider',\r\n            color: selectedTags.length > 0 ? 'primary.main' : 'text.secondary',\r\n            '&:hover': {\r\n              borderColor: 'primary.main',\r\n              bgcolor: alpha(theme.palette.primary.main, 0.08)\r\n            }\r\n          }}\r\n        >\r\n          {selectedTags.length > 0 ? `${selectedTags.length} tag${selectedTags.length > 1 ? 's' : ''}` : 'Filter Tags'}\r\n        </Button>\r\n      </Tooltip>\r\n\r\n      {selectedTags.length > 0 && (\r\n        <Tooltip title=\"Clear all filters\">\r\n          <IconButton\r\n            size=\"small\"\r\n            onClick={handleClearTags}\r\n            sx={{\r\n              color: 'text.secondary',\r\n              '&:hover': {\r\n                color: 'error.main',\r\n                bgcolor: alpha(theme.palette.error.main, 0.08)\r\n              }\r\n            }}\r\n          >\r\n            <Clear fontSize=\"small\" />\r\n          </IconButton>\r\n        </Tooltip>\r\n      )}\r\n\r\n      <TagFilterDialog\r\n        open={open}\r\n        onClose={() => setOpen(false)}\r\n        title=\"Filter Trades by Tags\"\r\n        allTags={allTags}\r\n        selectedTags={selectedTags}\r\n        onTagsChange={onTagsChange}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport const TradeCalendar: FC<TradeCalendarProps> = (props): React.ReactElement => {\r\n  const {\r\n    trades,\r\n    accountBalance,\r\n    maxDailyDrawdown,\r\n    weeklyTarget,\r\n    monthlyTarget,\r\n    yearlyTarget,\r\n    riskPerTrade,\r\n    dynamicRiskEnabled,\r\n    increasedRiskPercentage,\r\n    profitThresholdPercentage,\r\n    onAddTrade,\r\n    onUpdateTradeProperty,\r\n    onAccountBalanceChange,\r\n    onImportTrades,\r\n    calendarName,\r\n    onClearMonthTrades,\r\n    onToggleTheme,\r\n    mode,\r\n    // Pre-calculated statistics\r\n    totalPnL\r\n  } = props;\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\r\n  const [isMonthSelectorOpen, setIsMonthSelectorOpen] = useState(false);\r\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\r\n  const [newTrade, setNewTrade] = useState<NewTradeForm | null>(null);\r\n  const [selectedTagGroup, setSelectedTagGroup] = useState<string>('');\r\n  const [zoomedImage, setZoomedImage] = useState<string | null>(null);\r\n  const [isPerformanceDialogOpen, setIsPerformanceDialogOpen] = useState(false);\r\n  const theme = useTheme();\r\n  const navigate = useNavigate();\r\n  const { calendarId } = useParams();\r\n  const { user, signInWithGoogle, signOut } = useAuth();\r\n\r\n\r\n  // Get all unique tags from trades\r\n  const allTags = useMemo(() => {\r\n    const tagSet = new Set<string>();\r\n    trades.forEach(trade => {\r\n      if (trade.tags) {\r\n        trade.tags.forEach(tag => tagSet.add(tag));\r\n      }\r\n    });\r\n    return Array.from(tagSet).sort();\r\n  }, [trades]);\r\n\r\n  // Filter trades based on selected tags\r\n  const filteredTrades = useMemo(() => {\r\n    if (selectedTags.length === 0) {\r\n      return trades; // No filtering if no tags selected\r\n    }\r\n\r\n    return trades.filter(trade =>\r\n      trade.tags?.some(tag => selectedTags.includes(tag))\r\n    );\r\n  }, [trades, selectedTags]);\r\n\r\n\r\n  const tradesForSelectedDay = useMemo(() => {\r\n    if (!selectedDate) {\r\n      return [];\r\n    }\r\n    return filteredTrades.filter(trade => isSameDay(new Date(trade.date), selectedDate));\r\n  }, [selectedDate, filteredTrades]);\r\n\r\n\r\n\r\n  // Calculate total profit based on filtered trades or use pre-calculated value\r\n  const totalProfit = useMemo(() => {\r\n    // If no tag filtering is applied and pre-calculated totalPnL is available, use it\r\n    if (selectedTags.length === 0 && totalPnL !== undefined) {\r\n      return totalPnL;\r\n    }\r\n    // Otherwise calculate from filtered trades\r\n    return filteredTrades.length > 0 ? filteredTrades.reduce((sum, trade) => sum + trade.amount, 0) : 0;\r\n  }, [filteredTrades, selectedTags, totalPnL]);\r\n\r\n  const calendarDays = useMemo(() => {\r\n    const days: Date[] = [];\r\n    const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\r\n    const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\r\n\r\n    for (let day = firstDay; day <= lastDay; day.setDate(day.getDate() + 1)) {\r\n      days.push(new Date(day));\r\n    }\r\n\r\n    return days;\r\n  }, [currentDate]);\r\n\r\n  const monthlyStats = useMemo(() =>\r\n    calculateMonthlyStats(filteredTrades, currentDate, accountBalance),\r\n    [filteredTrades, currentDate, accountBalance]\r\n  );\r\n\r\n  const handlePrevMonth = () => {\r\n    setCurrentDate(prev => subMonths(prev, 1));\r\n  };\r\n\r\n  const handleNextMonth = () => {\r\n    setCurrentDate(prev => addMonths(prev, 1));\r\n  };\r\n\r\n  const handleTodayClick = () => {\r\n    setCurrentDate(new Date());\r\n  };\r\n\r\n  const handleDayClick = (date: Date) => {\r\n    const trades = filteredTrades.filter(trade => isSameDay(new Date(trade.date), date));\r\n    if(trades.length==0){\r\n      setNewTrade(createNewTradeData)\r\n    }\r\n    setSelectedDate(date);\r\n\r\n\r\n  };\r\n  const handleDayChange = (date: Date) => {\r\n\r\n    setSelectedDate(date);\r\n\r\n\r\n  };\r\n\r\n\r\n  const handleAddTrade = onAddTrade ? async (trade: Trade) => {\r\n    await onAddTrade(trade);\r\n  } : undefined;\r\n\r\n\r\n\r\n\r\n  const handleMonthClick = () => {\r\n    setIsMonthSelectorOpen(true);\r\n  };\r\n\r\n  const handleMonthSelect = (date: Date) => {\r\n    setCurrentDate(date);\r\n    setIsMonthSelectorOpen(false);\r\n  };\r\n\r\n  const handleTagsChange = (tags: string[]) => {\r\n    setSelectedTags(tags);\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <AppBar\r\n        position=\"fixed\"\r\n        color=\"transparent\"\r\n        elevation={0.7}\r\n        sx={{\r\n          backdropFilter: 'blur(8px)',\r\n          backgroundColor: alpha(mode === 'light' ? '#ffffff' : theme.palette.background.default, 0.9),\r\n          borderBottom: `1px solid ${theme.palette.divider}`\r\n        }}\r\n      >\r\n        <Toolbar>\r\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, flexGrow: 1 }}>\r\n            <IconButton\r\n              onClick={() => navigate('/')}\r\n              size=\"small\"\r\n              sx={{\r\n                color: 'text.secondary',\r\n                '&:hover': {\r\n                  color: 'primary.main',\r\n                  bgcolor: alpha(theme.palette.primary.main, 0.08)\r\n                }\r\n              }}\r\n            >\r\n              <ArrowBack />\r\n            </IconButton>\r\n            <Typography variant=\"h5\" component=\"h1\">\r\n              {calendarName || 'Calendar'}\r\n            </Typography>\r\n          </Box>\r\n          {user ? (\r\n            <Stack direction=\"row\" spacing={2} alignItems=\"center\">\r\n              <IconButton\r\n                onClick={onToggleTheme}\r\n                color=\"inherit\"\r\n                size=\"small\"\r\n                sx={{\r\n                  '&:hover': {\r\n                    bgcolor: alpha(theme.palette.primary.main, 0.1),\r\n                  }\r\n                }}\r\n              >\r\n                {mode === 'dark' ? <LightModeIcon /> : <DarkModeIcon />}\r\n              </IconButton>\r\n              <Stack direction=\"row\" spacing={1} alignItems=\"center\">\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  {user.email}\r\n                </Typography>\r\n                <Avatar\r\n                  src={user.photoURL || undefined}\r\n                  sx={{\r\n                    width: 32,\r\n                    height: 32,\r\n                    bgcolor: theme.palette.primary.main,\r\n                    fontSize: '0.875rem'\r\n                  }}\r\n                >\r\n                  {user.email ? user.email[0].toUpperCase() : 'U'}\r\n                </Avatar>\r\n              </Stack>\r\n              <Button\r\n                variant=\"outlined\"\r\n                color=\"inherit\"\r\n                startIcon={<LogoutIcon />}\r\n                onClick={signOut}\r\n                size=\"small\"\r\n              >\r\n                Sign Out\r\n              </Button>\r\n            </Stack>\r\n          ) : (\r\n            <Stack direction=\"row\" spacing={2} alignItems=\"center\">\r\n              <IconButton\r\n                onClick={onToggleTheme}\r\n                color=\"inherit\"\r\n                size=\"small\"\r\n                sx={{\r\n                  '&:hover': {\r\n                    bgcolor: alpha(theme.palette.primary.main, 0.1),\r\n                  }\r\n                }}\r\n              >\r\n                {mode === 'dark' ? <LightModeIcon /> : <DarkModeIcon />}\r\n              </IconButton>\r\n              <Button\r\n                variant=\"contained\"\r\n                startIcon={<GoogleIcon />}\r\n                onClick={signInWithGoogle}\r\n                sx={{\r\n                  bgcolor: '#4285F4',\r\n                  '&:hover': {\r\n                    bgcolor: '#3367D6'\r\n                  }\r\n                }}\r\n              >\r\n                Sign in with Google\r\n              </Button>\r\n            </Stack>\r\n          )}\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Toolbar /> {/* This empty Toolbar acts as a spacer */}\r\n\r\n      <Box sx={{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: 2,\r\n        p: 2,\r\n        mt: 1\r\n      }}>\r\n        <Box sx={{\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          gap: 2,\r\n          maxWidth: '1200px',\r\n          margin: '0 auto',\r\n          width: '100%'\r\n        }}>\r\n\r\n          <AccountBalance\r\n            balance={accountBalance}\r\n            totalProfit={totalProfit}\r\n            onChange={onAccountBalanceChange}\r\n            trades={filteredTrades}\r\n            onPerformanceClick={() => setIsPerformanceDialogOpen(true)}\r\n            riskPerTrade={riskPerTrade}\r\n            dynamicRiskEnabled={dynamicRiskEnabled}\r\n            increasedRiskPercentage={increasedRiskPercentage}\r\n            profitThresholdPercentage={profitThresholdPercentage}\r\n          />\r\n          <MonthlyStats\r\n            trades={filteredTrades}\r\n            accountBalance={accountBalance}\r\n            onImportTrades={onImportTrades}\r\n            currentDate={currentDate}\r\n            monthlyTarget={monthlyTarget}\r\n            onClearMonthTrades={onClearMonthTrades}\r\n          />\r\n\r\n          <Box sx={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'space-between',\r\n            mb: 0.5,\r\n            flexDirection: { xs: 'column', sm: 'row' },\r\n            gap: { xs: 1, sm: 0 }\r\n          }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n              <IconButton onClick={handlePrevMonth}>\r\n                <ChevronLeft />\r\n              </IconButton>\r\n              <Typography\r\n                variant=\"h5\"\r\n                sx={{\r\n                  fontWeight: 800,\r\n                  cursor: 'pointer',\r\n                  width: '200px',\r\n                  textAlign: 'center',\r\n                  fontSize: { xs: '1.3rem', sm: '1.6rem' },\r\n                  letterSpacing: '-0.5px',\r\n                  color: 'text.primary',\r\n                  '&:hover': {\r\n                    color: 'primary.main'\r\n                  }\r\n                }}\r\n                onClick={handleMonthClick}\r\n              >\r\n                {format(currentDate, 'MMMM yyyy')}\r\n              </Typography>\r\n              <IconButton onClick={handleNextMonth}>\r\n                <ChevronRight />\r\n              </IconButton>\r\n            </Box>\r\n            <Stack direction=\"row\" spacing={1}>\r\n              <Button\r\n                startIcon={<Today />}\r\n                onClick={handleTodayClick}\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                sx={{\r\n                  minWidth: { xs: '100%', sm: 'auto' }\r\n                }}\r\n              >\r\n                Today\r\n              </Button>\r\n              <TagFilter\r\n                allTags={allTags}\r\n                selectedTags={selectedTags}\r\n                onTagsChange={handleTagsChange}\r\n              />\r\n            </Stack>\r\n          </Box>\r\n\r\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 0.5 }}>\r\n            <Box sx={{\r\n              display: 'grid',\r\n              gridTemplateColumns: { xs: 'repeat(7, 1fr)', sm: 'repeat(8, 1fr)' },\r\n              gap: 0.5,\r\n              mb: 0.5\r\n            }}>\r\n              {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Week'].map((day, index) => (\r\n                <WeekdayHeader key={day} sx={{ display: index === 7 ? { xs: 'none', sm: 'flex' } : 'flex' }}>\r\n                  {day}\r\n                </WeekdayHeader>\r\n              ))}\r\n            </Box>\r\n            <Box sx={{\r\n              display: 'grid',\r\n              gridTemplateColumns: { xs: 'repeat(7, 1fr)', sm: 'repeat(8, 1fr)' },\r\n              gap: 1\r\n            }}>\r\n              {eachWeekOfInterval(\r\n                {\r\n                  start: startOfMonth(currentDate),\r\n                  end: endOfMonth(currentDate)\r\n                },\r\n                { weekStartsOn: 0 }\r\n              ).map((weekStart, index) => {\r\n                const weekDays = eachDayOfInterval({\r\n                  start: weekStart,\r\n                  end: endOfWeek(weekStart, { weekStartsOn: 0 })\r\n                });\r\n\r\n                return (\r\n                  <React.Fragment key={weekStart.toISOString()}>\r\n                    {weekDays.map((day) => {\r\n                      const dayTrades = filteredTrades.filter(trade => isSameDay(new Date(trade.date), day));\r\n                      const dayStats = calculateDayStats(dayTrades, accountBalance, maxDailyDrawdown);\r\n                      const isCurrentMonth = isSameMonth(day, currentDate);\r\n                      const isCurrentDay = isToday(day);\r\n\r\n                      return (\r\n                        <CalendarCell key={day.toISOString()}>\r\n                          <StyledCalendarDay\r\n                            onClick={() => handleDayClick(day)}\r\n                            $isCurrentMonth={isCurrentMonth}\r\n                            $dayStatus={dayStats.status}\r\n                            sx={[\r\n                              {\r\n                                backgroundColor: dayStats.status === 'win'\r\n                                  ? alpha(theme.palette.success.light, 0.3)\r\n                                  : dayStats.status === 'loss'\r\n                                    ? alpha(theme.palette.error.light, 0.3)\r\n                                    : theme.palette.background.paper,\r\n                                transition: 'all 0.2s ease-in-out',\r\n                                border: `1px solid ${theme.palette.divider}`,\r\n                                boxShadow: `0 1px 2px ${alpha(theme.palette.common.black, 0.05)}`,\r\n                                '&:hover': {\r\n                                  borderColor: theme.palette.primary.main,\r\n                                  backgroundColor: dayStats.status === 'win'\r\n                                    ? alpha(theme.palette.success.light, 0.25)\r\n                                    : dayStats.status === 'loss'\r\n                                      ? alpha(theme.palette.error.light, 0.25)\r\n                                      : alpha(theme.palette.primary.light, 0.1)\r\n                                }\r\n                              },\r\n                              !isCurrentMonth && {\r\n                                opacity: 0.5,\r\n                                backgroundColor: theme.palette.background.default\r\n                              },\r\n                              isCurrentDay && {\r\n                                color: theme.palette.primary.main,\r\n                                borderColor: theme.palette.primary.main,\r\n                                borderWidth: 2\r\n                              },\r\n                              selectedDate && isSameDay(day, selectedDate) && {\r\n                                borderColor: theme.palette.primary.main,\r\n                                borderWidth: 2,\r\n                                backgroundColor: alpha(theme.palette.primary.light, 0.1)\r\n                              }\r\n                            ]}\r\n                          >\r\n                            <DayNumber $isCurrentMonth={isCurrentMonth}>\r\n                              {format(day, 'd')}\r\n                            </DayNumber>\r\n                            {dayTrades.length > 0 && (\r\n                              <AnimatedPulse>\r\n                                <Box sx={{\r\n                                  display: 'flex',\r\n                                  flexDirection: 'column',\r\n                                  alignItems: 'center',\r\n                                  gap: 0.5\r\n                                }}>\r\n                                  <TradeAmount $dayStatus={dayStats.status}>\r\n                                    {formatCurrency(Math.abs(dayStats.netAmount))}\r\n                                  </TradeAmount>\r\n                                  <TradeCount>\r\n                                    {dayTrades.length} trade{dayTrades.length !== 1 ? 's' : ''}\r\n                                  </TradeCount>\r\n                                  <Typography\r\n                                    variant=\"caption\"\r\n                                    sx={{\r\n                                      color: dayStats.status === 'win' ? 'success.main' :\r\n                                        dayStats.status === 'loss' ? 'error.main' : 'text.secondary',\r\n                                      fontSize: '0.75rem',\r\n                                      fontWeight: 500\r\n                                    }}\r\n                                  >\r\n                                    {dayStats.percentage}%\r\n                                  </Typography>\r\n                                  {dayStats.isDrawdownViolation && (\r\n                                    <Typography\r\n                                      variant=\"caption\"\r\n                                      sx={{\r\n                                        color: 'error.main',\r\n                                        fontSize: '0.75rem',\r\n                                        fontWeight: 700,\r\n                                        textTransform: 'uppercase'\r\n                                      }}\r\n                                    >\r\n                                      VIOLATED\r\n                                    </Typography>\r\n                                  )}\r\n                                </Box>\r\n                              </AnimatedPulse>\r\n                            )}\r\n                          </StyledCalendarDay>\r\n                        </CalendarCell>\r\n                      );\r\n                    })}\r\n\r\n                    <WeeklyPnL\r\n                      date={weekStart}\r\n                      trades={filteredTrades}\r\n                      monthStart={startOfMonth(currentDate)}\r\n                      weekIndex={index}\r\n                      currentMonth={currentDate.getMonth()}\r\n                      accountBalance={accountBalance}\r\n                      weeklyTarget={weeklyTarget}\r\n                      sx={{ display: { xs: 'none', sm: 'flex' } }}\r\n                    />\r\n\r\n                  </React.Fragment>\r\n                );\r\n              })}\r\n            </Box>\r\n\r\n            {/* Weekly stats for mobile */}\r\n            <Box sx={{\r\n              display: { xs: 'flex', sm: 'none' },\r\n              flexDirection: 'column',\r\n              gap: 1,\r\n              mt: 2\r\n            }}>\r\n              {eachWeekOfInterval(\r\n                {\r\n                  start: startOfMonth(currentDate),\r\n                  end: endOfMonth(currentDate)\r\n                },\r\n                { weekStartsOn: 0 }\r\n              ).map((weekStart, index) => (\r\n                <WeeklyPnL\r\n                  key={weekStart.toISOString()}\r\n                  date={weekStart}\r\n                  trades={filteredTrades}\r\n                  monthStart={startOfMonth(currentDate)}\r\n                  weekIndex={index}\r\n                  currentMonth={currentDate.getMonth()}\r\n                  accountBalance={accountBalance}\r\n                  weeklyTarget={weeklyTarget}\r\n                />\r\n              ))}\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n\r\n        <DayDialog\r\n          open={!!selectedDate}\r\n          onClose={() => {\r\n            setSelectedDate(null);\r\n            if (newTrade != null && newTrade.pendingImages) {\r\n              // Release object URLs to avoid memory leaks\r\n              newTrade.pendingImages.forEach(image => {\r\n                URL.revokeObjectURL(image.preview);\r\n              });\r\n              setNewTrade(null);\r\n            }\r\n          }}\r\n          showForm={newTrade!=null}\r\n          date={selectedDate || new Date()}\r\n          trades={selectedDate ? tradesForSelectedDay : []}\r\n          onAddTrade={handleAddTrade}\r\n          newMainTrade={newTrade}\r\n          setNewMainTrade={prev => setNewTrade(prev(newTrade!!))}\r\n          onUpdateTradeProperty={onUpdateTradeProperty}\r\n          calendarId={calendarId!!}\r\n          onDateChange={handleDayChange}\r\n          setZoomedImage={setZoomedImage}\r\n          accountBalance={accountBalance}\r\n          onAccountBalanceChange={onAccountBalanceChange}\r\n          allTrades={trades} /* Pass all trades for tag suggestions */\r\n          riskPerTrade={riskPerTrade}\r\n          dynamicRiskEnabled={dynamicRiskEnabled}\r\n          increasedRiskPercentage={increasedRiskPercentage}\r\n          profitThresholdPercentage={profitThresholdPercentage}\r\n        />\r\n\r\n        {/* Image Zoom Dialog */}\r\n        <ImageZoomDialog\r\n          open={!!zoomedImage}\r\n          onClose={() => setZoomedImage(null)}\r\n          imageUrl={zoomedImage}\r\n        />\r\n\r\n        <SelectDateDialog\r\n          open={isMonthSelectorOpen}\r\n          onClose={() => setIsMonthSelectorOpen(false)}\r\n          onDateSelect={handleMonthSelect}\r\n          initialDate={selectedDate || undefined}\r\n          trades={filteredTrades}\r\n          accountBalance={accountBalance}\r\n          monthlyTarget={monthlyTarget}\r\n          yearlyTarget={yearlyTarget}\r\n        />\r\n\r\n        {/* Performance Dialog */}\r\n        <Dialog\r\n          open={isPerformanceDialogOpen}\r\n          onClose={() => setIsPerformanceDialogOpen(false)}\r\n          maxWidth=\"lg\"\r\n          fullWidth\r\n          {...dialogProps}\r\n          PaperProps={{\r\n            sx: {\r\n              borderRadius: 2,\r\n              boxShadow: 'none',\r\n              border: `1px solid ${theme.palette.divider}`,\r\n              maxHeight: '90vh',\r\n              overflow: 'hidden',\r\n              '& .MuiDialogContent-root': {\r\n                ...scrollbarStyles(theme)\r\n              }\r\n            }\r\n          }}\r\n        >\r\n          <DialogTitleStyled>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', width: '100%' }}>\r\n              <Typography variant=\"h6\">\r\n                Performance Analytics\r\n              </Typography>\r\n            </Box>\r\n            <IconButton onClick={() => setIsPerformanceDialogOpen(false)} size=\"small\">\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </DialogTitleStyled>\r\n          <DialogContentStyled>\r\n            <PerformanceCharts\r\n              trades={filteredTrades}\r\n              selectedDate={currentDate}\r\n              accountBalance={accountBalance}\r\n              maxDailyDrawdown={maxDailyDrawdown}\r\n              monthlyTarget={monthlyTarget}\r\n            />\r\n          </DialogContentStyled>\r\n        </Dialog>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default TradeCalendar;"],"names":["ShimmerImageBox","_ref5","image","theme","shimmer","keyframes","_jsx","Box","sx","width","height","maxHeight","overflow","position","paddingTop","children","top","left","background","baseColor","palette","mode","backgroundSize","animation","willChange","display","alignItems","justifyContent","zIndex","_jsxs","flexDirection","gap","CircularProgress","size","color","Typography","variant","fontWeight","_ref4","pendingImages","uploadedImages","editingTrade","onImageCaptionChange","onImageRemove","onImagesReordered","useTheme","rows","setRows","useState","draggingImage","setDraggingImage","dragOverRow","setDragOverRow","dragOverColumn","setDragOverColumn","resizingState","setResizingState","gridContainerRef","useRef","dragImageRef","useEffect","newRows","organizeImagesIntoRows","console","log","map","img","id","row","column","columnWidth","allImages","i","_img$id","result","isPending","undefined","_img$id2","rowMap","maxDefinedRow","forEach","push","Math","max","nextRowIndex","currentRowIndex","currentColumnIndex","filter","index","floor","Object","entries","sort","_ref","_ref2","a","b","Number","_ref3","rowIndex","images","length","rIndex","_a$column","_b$column","Infinity","totalDefinedWidth","undefinedWidthCount","cIndex","widthPerUndefined","abs","scaleFactor","_image$columnWidth","equalWidth","finalRows","join","isPendingImage","isAnyImageUploading","some","uploadProgress","handleDragOver","e","columnIndex","preventDefault","dataTransfer","dropEffect","handleDrop","targetRowIndex","targetColumnIndex","_rows$sourceRowIndex","stopPropagation","sourceData","JSON","parse","getData","sourceRowIndex","sourceColumnIndex","imageId","isSourcePending","imageToMove","foundAtIndex","findIndex","error","handleDragEnd","flatImages","flat","find","warn","actualSourceRowIndex","actualSourceColumnIndex","r","splice","finalTargetRowIndex","finalTargetColumnIndex","widthPerColumn","_newRows$rIndex","sourceRowWidth","isNaN","currentRowTotalWidth","reduce","sum","scale","cleanupDragImage","current","document","body","contains","removeChild","normalizeRowWidths","useCallback","minWidth","arguments","totalWidth","newTotal","largestColIndex","maxIndex","arr","handleResizeMouseMove","dividerIndex","startX","rowElementWidth","initialWidths","deltaPercent","clientX","targetRow","totalInitialLeftWidth","totalInitialRightWidth","newTotalLeftWidth","newTotalRightWidth","numLeftImages","numRightImages","minTotalLeftWidth","minTotalRightWidth","currentTotal","newWidth","handleResizeMouseUp","finalRowIndex","window","addEventListener","style","cursor","removeEventListener","ref","className","marginBottom","onDragOver","pendingImg","uploadedImg","isLastColumn","React","borderRadius","opacity","backgroundColor","transition","alpha","primary","main","draggable","onDragStart","handleDragStart","setData","stringify","effectAllowed","element","currentTarget","rect","getBoundingClientRect","offsetX","offsetY","clientY","dragImage","cloneNode","pointerEvents","appendChild","setDragImage","setTimeout","onDrop","onDragEnd","_Fragment","divider","aspectRatio","right","bottom","value","component","round","src","preview","alt","objectFit","IconButton","onClick","DeleteIcon","fontSize","TextField","placeholder","caption","onChange","target","multiline","minRows","maxRows","fullWidth","disabled","px","py","paper","borderBottomColor","pending","url","flexShrink","content","light","onMouseDown","handleResizeMouseDown","rowElement","closest","border","text","secondary","contrastText","padding","boxShadow","common","black","onDragLeave","onImageUpload","fileInputRef","handlePaste","event","_event$clipboardData","items","clipboardData","imageFiles","item","type","indexOf","file","getAsFile","DataTransfer","add","files","mt","mb","accept","multiple","Button","startIcon","AddPhotoAlternate","handleAddImageClick","_fileInputRef$current","click","ImageGrid","newTrade","allTags","isSubmitting","riskPerTrade","accountBalance","dynamicRiskEnabled","increasedRiskPercentage","profitThresholdPercentage","calculateAmountFromRiskToReward","calculateCumulativePnl","onNameChange","onAmountChange","onTypeChange","onEntryChange","onExitChange","onRiskToRewardChange","onPartialsTakenChange","onSessionChange","onNotesChange","onTagsChange","onSubmit","cumulativePnl","FormField","label","name","flex","entry","exit","FormControl","FormLabel","RadioGroup","FormControlLabel","control","Radio","partialsTaken","amount","required","helperText","calculateAmountFromRisk","riskToReward","rr","parseFloat","toString","formatCurrency","MuiFormControlLabel","Checkbox","checked","test","calculatedAmount","min","step","InputLabel","Select","labelId","session","MenuItem","Autocomplete","freeSolo","options","tags","renderTags","getTagProps","option","Chip","formatTagForDisplay","getTagChipStyles","title","isGroupedTag","getTagGroup","renderOption","props","renderInput","params","ImageUploader","notes","trades","expandedTradeId","onTradeClick","onEditClick","onDeleteClick","onZoomedImage","onUpdateTradeProperty","fontStyle","Stack","spacing","trade","TradeListItem","$type","isTemporary","borderColor","TradeInfo","replace","toLocaleString","flexWrap","tag","startsWith","tagIndex","mr","CollapseIcon","ExpandIcon","TradeActions","EditIcon","TradeDetailExpanded","isExpanded","setZoomedImage","date","formInputVisible","totalPnL","onPrevDay","onNextDay","ChevronLeft","format","ChevronRight","p","bgcolor","success","processTagsForSubmission","tagInput","querySelector","pendingTag","trim","open","onClose","showForm","newMainTrade","setNewMainTrade","onDateChange","onAddTrade","allTrades","calendarId","showAddForm","setShowAddForm","setEditingTrade","setExpandedTradeId","setIsSubmitting","tradeToDelete","setTradeToDelete","isDeleteDialogOpen","setIsDeleteDialogOpen","isDeleting","setIsDeleting","isCreatingEmptyTrade","setIsCreatingEmptyTrade","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","setNewTrade","calculateCumulativePnL","acc","Date","useMemo","tagsSet","Set","Array","from","startOfNextDay","nextDay","setDate","getDate","showErrorSnackbar","message","handleSnackbarClose","resetForm","URL","revokeObjectURL","handleUpdateTradeProperty","async","tradeId","updateCallback","createIfNotExists","Error","calculateFinalAmount","createFinalTradeData","finalAmount","finalTags","currentDate","uuidv4","getFullYear","getMonth","getHours","getMinutes","getSeconds","cumulativePnL","effectiveRiskPercentage","getEffectiveRiskPercentage","riskAmount","startImageUpload","prev","uploadedImage","calendarService","progress","originalPendingImage","updatedImage","newPendingImages","imageIndex","newUploadedImages","_trade$images","existingImage","finalUpdatedImage","updateError","hasPendingUploads","handleSubmit","tradeData","handleEditSubmit","updatedImages","editError","BaseDialog","maxWidth","hideCloseButton","primaryButtonText","primaryButtonAction","data","createNewTradeData","handleAddClick","cancelButtonAction","hideFooterCancelButton","DayHeader","handlePrevDay","prevDay","handleNextDay","isAfter","startOfDay","TradeForm","handleTagsChange","_event","newValue","Promise","all","createObjectURL","dimensions","resolve","Image","onload","existingPendingImages","existingUploadedImages","maxRow","newImagesWithLayout","existingImages","newImages","newRow","tradeid","_","deleteError","TradeList","_trade$riskToReward","ConfirmationDialog","confirmText","cancelText","onConfirm","isDeleted","onCancel","handleCancelDelete","confirmColor","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","Alert","severity","exportTrades","initialBalance","fileFormat","exportData","sortedTrades","getTime","currentBalance","_trade$tags","Name","Type","charAt","toUpperCase","slice","Amount","toFixed","Tags","Session","Notes","prepareTradeDataForExport","fileName","exportToExcel","wb","XLSX","book_new","ws","json_to_sheet","wch","book_append_sheet","exportToCsv","headers","keys","csvRows","values","header","escaped","String","includes","csvContent","blob","Blob","link","createElement","setAttribute","visibility","knownTradeProperties","DATE_FORMATS","parseTradeData","jsonData","dateStr","normalizedDateStr","parsedDate","monthNameMatch","match","month","day","year","monthIndex","toLowerCase","parseInt","directDate","parseDate","tradeType","split","Boolean","categoryName","trimmedValue","typeStr","crypto","randomUUID","importTrades","reject","_file$name$split$pop","reader","FileReader","fileType","pop","_e$target","inQuotes","currentValue","j","char","obj","parseError","importFromCsv","_e$target2","workbook","Uint8Array","SheetNames","worksheet","Sheets","sheet_to_json","importFromExcel","errorMessage","onerror","readAsText","readAsArrayBuffer","styled","gridTemplateColumns","shape","shadows","minHeight","alignContent","CalendarCell","default","WeekdayHeader","textAlign","AccountBalance","balance","totalProfit","onPerformanceClick","isEditing","setIsEditing","tempBalance","setTempBalance","profitPercentage","totalAccountValue","newBalance","Paper","elevation","pl","Tooltip","TrendingUp","onBlur","onKeyDown","key","autoFocus","InputProps","startAdornment","SecurityIcon","ml","minimumFractionDigits","maximumFractionDigits","MonthlyStats","onImportTrades","onDeleteTrade","monthlyTarget","onClearMonthTrades","showClearConfirm","setShowClearConfirm","monthTrades","winCount","lossCount","winRate","growthPercentage","targetProgress","isTargetMet","exportFormat","setExportFormat","isImporting","setIsImporting","snackbarSeverity","setSnackbarSeverity","pb","xs","sm","_event$target$files","importedTrades","htmlFor","FileUpload","textTransform","FileDownload","handleExport","toggleExportFormat","handleClearClick","EmojiEvents","CalendarMonth","Dialog","DialogTitle","DialogContent","DialogActions","handleClearConfirm","WeeklyPnL","monthStart","weekIndex","currentMonth","weeklyTarget","weekStart","startOfWeek","weekStartsOn","weekTrades","endOfWeek","isSameWeek","percentage","TargetBadge","isMet","tooltipText","TagFilter","selectedTags","setOpen","FilterAlt","handleClearTags","Clear","TagFilterDialog","TradeCalendar","maxDailyDrawdown","yearlyTarget","onAccountBalanceChange","calendarName","onToggleTheme","setCurrentDate","selectedDate","setSelectedDate","isMonthSelectorOpen","setIsMonthSelectorOpen","setSelectedTags","selectedTagGroup","setSelectedTagGroup","zoomedImage","isPerformanceDialogOpen","setIsPerformanceDialogOpen","navigate","useNavigate","useParams","user","signInWithGoogle","signOut","useAuth","tagSet","filteredTrades","tradesForSelectedDay","isSameDay","handleAddTrade","days","firstDay","lastDay","calculateMonthlyStats","isSameMonth","winningTrades","t","losingTrades","grossProfit","grossLoss","profitFactor","avgWin","avgLoss","netChange","AppBar","backdropFilter","borderBottom","Toolbar","flexGrow","ArrowBack","direction","LightModeIcon","DarkModeIcon","email","Avatar","photoURL","LogoutIcon","GoogleIcon","margin","handlePrevMonth","subMonths","letterSpacing","handleMonthClick","handleNextMonth","addMonths","Today","handleTodayClick","eachWeekOfInterval","start","startOfMonth","end","endOfMonth","weekDays","eachDayOfInterval","dayTrades","dayStats","calculateDayStats","netAmount","status","percentageValue","isDrawdownViolation","isCurrentMonth","isCurrentDay","isToday","StyledCalendarDay","handleDayClick","$isCurrentMonth","$dayStatus","borderWidth","DayNumber","AnimatedPulse","TradeAmount","TradeCount","toISOString","DayDialog","ImageZoomDialog","imageUrl","SelectDateDialog","onDateSelect","initialDate","dialogProps","PaperProps","scrollbarStyles","DialogTitleStyled","CloseIcon","DialogContentStyled","PerformanceCharts"],"sourceRoot":""}