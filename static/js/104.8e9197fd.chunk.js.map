{"version":3,"file":"static/js/104.8e9197fd.chunk.js","mappings":"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","sources":["components/TargetBadge.tsx","components/charts/CumulativePnLChart.tsx","components/charts/DailyPnLChart.tsx","components/charts/PnLChartsWrapper.tsx","components/TagFilterDialog.tsx","components/charts/WinLossDistribution.tsx","components/charts/WinLossStats.tsx","components/charts/TagPerformanceAnalysis.tsx","components/charts/TagDayOfWeekAnalysis.tsx","components/charts/DailySummaryTable.tsx","components/charts/SessionPerformanceAnalysis.tsx","components/charts/TradesListDialog.tsx","components/charts/RiskRewardChart.tsx","utils/formatters.ts","components/trades/TradeList.tsx","utils/scoreUtils.ts","services/tagPatternService.ts","services/scoreService.ts","components/scoring/ScoreCard.tsx","components/scoring/ScoreBreakdown.tsx","components/scoring/ScoreHistory.tsx","components/scoring/ExcludedTagsSelector.tsx","components/scoring/TagSelector.tsx","components/scoring/ScoreSettings.tsx","components/TagPatternAnalysis.tsx","components/ScoreSection.tsx","utils/statsUtils.ts","components/SelectDateDialog.tsx","components/PerformanceCharts.tsx","components/trades/TradeFormDialog.tsx","utils/chartDataUtils.ts","components/TagEditDialog.tsx","components/CalendarNote.tsx","components/trades/DayDialog.tsx","components/TagManagementDialog.tsx","components/TagManagementDrawer.tsx","components/SearchDrawer.tsx","components/CalendarGrid.tsx","components/DayNotesDialog.tsx","utils/tradeExportImport.ts","components/MonthlyStats.tsx","components/AccountStats.tsx","utils/richTextUtils.ts","components/DayNoteCard.tsx","components/PinnedTradesDrawer.tsx","components/TradeGalleryDialog.tsx","components/MonthlyStatisticsSection.tsx","components/FloatingMonthNavigation.tsx","components/TradeCalendar.tsx","components/trades/ImageGrid.tsx","components/trades/ImageUploader.tsx","components/trades/TagsInput.tsx","utils/tradeNameSuggestions.ts","components/trades/TradeForm.tsx","components/trades/DayHeader.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Box, Typography, useTheme, Tooltip } from '@mui/material';\r\nimport { alpha } from '@mui/material/styles';\r\nimport { CheckCircle, Flag } from '@mui/icons-material';\r\n\r\ninterface TargetBadgeProps {\r\n  progress: number;\r\n  isMet: boolean;\r\n  tooltipText?: string;\r\n}\r\n\r\nconst TargetBadge: React.FC<TargetBadgeProps> = ({\r\n  progress,\r\n  isMet,\r\n  tooltipText = 'Shows progress towards your target goal'\r\n}) => {\r\n  const theme = useTheme();\r\n\r\n  const badgeContent = (\r\n    <Box sx={{\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      bgcolor:  isMet ? alpha(theme.palette.success.main, 0.9) : alpha(theme.palette.primary.main, 0.1),\r\n      color:  isMet ? 'white' : 'primary.main',\r\n      borderRadius: '12px',\r\n      width: 'auto',\r\n      height: 22,\r\n      ml: 1,\r\n      px: 0.8,\r\n      border: `1px solid ${alpha(theme.palette.primary.main, 0.2)}`\r\n    }}>\r\n      {isMet ? (\r\n        <CheckCircle sx={{ fontSize: '0.875rem', mr: 0.3 }} />\r\n      ) : (\r\n        <Flag sx={{ fontSize: '0.875rem', mr: 0.3 }} />\r\n      )}\r\n      <Typography variant=\"caption\" sx={{ fontWeight: 600, fontSize: isMet ? '0.5rem' : '0.7rem' }}>\r\n        {Math.max(progress, 0).toFixed(0)}%\r\n      </Typography>\r\n    </Box>\r\n  );\r\n\r\n  return (\r\n    <Tooltip title={tooltipText} arrow placement=\"top\">\r\n      {badgeContent}\r\n    </Tooltip>\r\n  );\r\n};\r\n\r\nexport default TargetBadge;\r\n","import React from 'react';\r\nimport {\r\n  AreaChart,\r\n  Area,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n  ReferenceLine\r\n} from 'recharts';\r\nimport { Box, Paper, Typography, useTheme } from '@mui/material';\r\nimport { alpha } from '@mui/material/styles';\r\nimport { format } from 'date-fns';\r\nimport { Trade } from '../../types/trade';\r\nimport { formatValue } from '../../utils/formatters';\r\n\r\ninterface CumulativePnLChartProps {\r\n  chartData: any[];\r\n  targetValue: number | null;\r\n  monthlyTarget?: number;\r\n  setMultipleTradesDialog: (dialogState: any) => void;\r\n  timePeriod: 'month' | 'year' | 'all';\r\n}\r\n\r\n// Custom Y-axis tick component\r\nconst CustomYAxisTick = (props: any) => {\r\n  const { x, y, payload } = props;\r\n  const value = payload.value;\r\n  const formattedValue = formatValue(value);\r\n  \r\n  return (\r\n    <g transform={`translate(${x},${y})`}>\r\n      <text x={0} y={0} dy={5} textAnchor=\"end\" fill=\"#666\" fontSize={12}>\r\n        {formattedValue}\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\n\r\n// Custom tooltip component\r\nconst CustomTooltip = ({ active, payload, label, type }: any) => {\r\n  const theme = useTheme();\r\n  \r\n  if (active && payload && payload.length) {\r\n    const data = payload[0].payload;\r\n    \r\n    return (\r\n      <Paper sx={{ p: 1.5, boxShadow: theme.shadows[3] }}>\r\n        <Typography variant=\"body2\" sx={{ fontWeight: 'bold', mb: 0.5 }}>\r\n          {label}\r\n        </Typography>\r\n        <Typography\r\n          variant=\"body2\"\r\n          sx={{\r\n            color: data.dailyChange > 0 ? '#4caf50' : data.dailyChange < 0 ? '#f44336' : 'text.secondary',\r\n            fontWeight: 'bold'\r\n          }}\r\n        >\r\n          {formatValue(data.dailyChange)}\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"text.secondary\">\r\n          Cumulative P&L: {formatValue(data.cumulativePnL)}\r\n        </Typography>\r\n        {data.trades && data.trades.length > 0 && (\r\n          <Typography variant=\"body2\" sx={{ color: theme.palette.primary.main, fontSize: '0.75rem', mt: 0.5 }}>\r\n            Click to view {data.trades.length} trade{data.trades.length > 1 ? 's' : ''}\r\n          </Typography>\r\n        )}\r\n      </Paper>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nconst CumulativePnLChart: React.FC<CumulativePnLChartProps> = ({\r\n  chartData,\r\n  targetValue,\r\n  monthlyTarget,\r\n  setMultipleTradesDialog,\r\n  timePeriod\r\n}) => {\r\n  const theme = useTheme();\r\n  \r\n  // Define colors\r\n  const COLORS = {\r\n    win: '#4caf50',\r\n    loss: '#f44336',\r\n    zero: '#9e9e9e',\r\n    breakEven: '#ff9800'\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n        <Typography variant=\"h6\">Cumulative P&L</Typography>\r\n        {monthlyTarget && targetValue !== null && (\r\n          <Box\r\n            sx={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              bgcolor: alpha(theme.palette.primary.main, 0.1),\r\n              px: 1.5,\r\n              py: 0.5,\r\n              borderRadius: 1,\r\n              fontSize: '0.875rem'\r\n            }}\r\n          >\r\n            Target: {monthlyTarget}% (${targetValue?.toFixed(2)})\r\n          </Box>\r\n        )}\r\n      </Box>\r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <AreaChart data={chartData}>\r\n          <defs>\r\n            <linearGradient id=\"colorPnLWin\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n              <stop offset=\"5%\" stopColor={COLORS.win} stopOpacity={0.2} />\r\n              <stop offset=\"95%\" stopColor={COLORS.win} stopOpacity={0} />\r\n            </linearGradient>\r\n            <linearGradient id=\"colorPnLLoss\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n              <stop offset=\"5%\" stopColor={COLORS.loss} stopOpacity={0.2} />\r\n              <stop offset=\"95%\" stopColor={COLORS.loss} stopOpacity={0} />\r\n            </linearGradient>\r\n          </defs>\r\n          <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\r\n          <XAxis\r\n            dataKey=\"date\"\r\n            axisLine={false}\r\n            tickLine={false}\r\n            tick={{\r\n              fill: theme.palette.text.secondary,\r\n              fontSize: timePeriod === 'year' ? 8 : 12\r\n            }}\r\n          />\r\n          <YAxis\r\n            axisLine={false}\r\n            tickLine={false}\r\n            tick={<CustomYAxisTick />}\r\n          />\r\n          <Tooltip content={(props) => <CustomTooltip {...props} type=\"cumulative\" />} />\r\n          {targetValue !== null && (\r\n            <>\r\n              <ReferenceLine\r\n                y={targetValue}\r\n                stroke={theme.palette.primary.main}\r\n                strokeDasharray=\"4 4\"\r\n                strokeWidth={2}\r\n              />\r\n              {/* Add a semi-transparent area above the target line */}\r\n              <Area\r\n                type=\"monotone\"\r\n                dataKey=\"cumulativePnL\"\r\n                stroke=\"none\"\r\n                fill={theme.palette.primary.main}\r\n                fillOpacity={0.05}\r\n                baseValue={targetValue}\r\n              />\r\n            </>\r\n          )}\r\n          <ReferenceLine y={0} stroke={COLORS.zero} strokeDasharray=\"3 3\" />\r\n          <Area\r\n            type=\"monotone\"\r\n            dataKey=\"cumulativePnL\"\r\n            stroke={COLORS.win}\r\n            fill=\"url(#colorPnLWin)\"\r\n            strokeWidth={2}\r\n            name=\"Cumulative P&L\"\r\n            style={{ cursor: 'pointer' }}\r\n            activeDot={(props) => {\r\n              const { cx, cy, index } = props;\r\n              return (\r\n                <circle\r\n                  cx={cx}\r\n                  cy={cy}\r\n                  r={6}\r\n                  stroke={theme.palette.background.paper}\r\n                  strokeWidth={2}\r\n                  fill={theme.palette.primary.main}\r\n                  style={{ cursor: 'pointer' }}\r\n                  onClick={() => {\r\n                    console.log('Dot clicked, Index:', index);\r\n                    const dataPoint = chartData[index];\r\n                    if (dataPoint && dataPoint.trades && dataPoint.trades.length > 0) {\r\n                      const formattedDate = format(dataPoint.fullDate, 'MMMM d, yyyy');\r\n                      setMultipleTradesDialog({\r\n                        open: true,\r\n                        trades: dataPoint.trades,\r\n                        date: formattedDate,\r\n                        expandedTradeId: dataPoint.trades.length === 1 ? dataPoint.trades[0].id : null\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              );\r\n            }}\r\n            dot={{\r\n              r: 3,\r\n              fill: COLORS.win,\r\n              stroke: theme.palette.background.paper,\r\n              strokeWidth: 1\r\n            }}\r\n          />\r\n        </AreaChart>\r\n      </ResponsiveContainer>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CumulativePnLChart;\r\n","import React from 'react';\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n  ReferenceLine,\r\n  Cell\r\n} from 'recharts';\r\nimport { Box, Paper, Typography, useTheme } from '@mui/material';\r\nimport { format } from 'date-fns'; \r\n import { formatValue } from '../../utils/formatters';\r\n\r\ninterface DailyPnLChartProps {\r\n  chartData: any[];\r\n  drawdownViolationValue: number;\r\n  setMultipleTradesDialog: (dialogState: any) => void;\r\n  timePeriod: 'month' | 'year' | 'all';\r\n}\r\n\r\n// Custom Y-axis tick component for daily P&L\r\nconst CustomDailyPnLYAxisTick = (props: any) => {\r\n  const { x, y, payload } = props;\r\n  const value = payload.value;\r\n  const formattedValue = formatValue(value);\r\n  \r\n  return (\r\n    <g transform={`translate(${x},${y})`}>\r\n      <text x={0} y={0} dy={5} textAnchor=\"end\" fill=\"#666\" fontSize={12}>\r\n        {formattedValue}\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\n\r\n// Custom tooltip component\r\nconst CustomTooltip = ({ active, payload, label, type }: any) => {\r\n  const theme = useTheme();\r\n  \r\n  if (active && payload && payload.length) {\r\n    const data = payload[0].payload;\r\n    \r\n    return (\r\n      <Paper sx={{ p: 1.5, boxShadow: theme.shadows[3] }}>\r\n        <Typography variant=\"body2\" sx={{ fontWeight: 'bold', mb: 0.5 }}>\r\n          {label}\r\n        </Typography>\r\n        <Typography\r\n          variant=\"body2\"\r\n          sx={{\r\n            color: data.isWin ? '#4caf50' : data.isLoss ? '#f44336' : 'text.secondary',\r\n            fontWeight: 'bold'\r\n          }}\r\n        >\r\n          {formatValue(data.pnl)}\r\n        </Typography>\r\n        <Typography variant=\"body2\" color=\"text.secondary\">\r\n          {data.isWin ? 'Win' : data.isLoss ? 'Loss' : 'Break Even'}\r\n        </Typography>\r\n        {data.trades && data.trades.length > 0 && (\r\n          <Typography variant=\"body2\" sx={{ color: theme.palette.primary.main, fontSize: '0.75rem', mt: 0.5 }}>\r\n            Click to view {data.trades.length} trade{data.trades.length > 1 ? 's' : ''}\r\n          </Typography>\r\n        )}\r\n      </Paper>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nconst DailyPnLChart: React.FC<DailyPnLChartProps> = ({\r\n  chartData,\r\n  drawdownViolationValue,\r\n  setMultipleTradesDialog,\r\n  timePeriod\r\n}) => {\r\n  const theme = useTheme();\r\n  \r\n  // Define colors\r\n  const COLORS = {\r\n    win: '#4caf50',\r\n    loss: '#f44336',\r\n    zero: '#9e9e9e',\r\n    breakEven: '#ff9800'\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Typography variant=\"h6\" sx={{ mb: 2 }}>\r\n        Daily P&L\r\n      </Typography>\r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <BarChart data={chartData}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\r\n          <XAxis\r\n            dataKey=\"date\"\r\n            axisLine={false}\r\n            tickLine={false}\r\n            tick={{\r\n              fill: theme.palette.text.secondary,\r\n              fontSize: timePeriod === 'year' ? 8 : 12\r\n            }}\r\n          />\r\n          <YAxis\r\n            axisLine={false}\r\n            tickLine={false}\r\n            tick={<CustomDailyPnLYAxisTick />}\r\n          />\r\n          <Tooltip content={(props) => <CustomTooltip {...props} type=\"daily\" />} />\r\n          <ReferenceLine y={0} stroke={COLORS.zero} strokeDasharray=\"3 3\" />\r\n          <ReferenceLine\r\n            y={drawdownViolationValue}\r\n            stroke={theme.palette.error.main}\r\n            strokeDasharray=\"3 3\"\r\n            strokeWidth={2}\r\n            label={{\r\n              position: 'right',\r\n              value: `Max Drawdown: ${formatValue(drawdownViolationValue)}`,\r\n              fill: theme.palette.error.main,\r\n              fontSize: 12,\r\n              fontWeight: 'bold'\r\n            }}\r\n          />\r\n          <Bar\r\n            dataKey=\"pnl\"\r\n            name=\"Daily P&L\"\r\n            radius={[4, 4, 0, 0]}\r\n            onClick={(data: any) => {\r\n              console.log('Bar clicked:', data);\r\n              if (data && data.payload) {\r\n                const payload = data.payload;\r\n                if (payload.trades && payload.trades.length > 0) {\r\n                  const formattedDate = format(payload.fullDate, 'MMMM d, yyyy');\r\n                  setMultipleTradesDialog({\r\n                    open: true,\r\n                    trades: payload.trades,\r\n                    date: formattedDate,\r\n                    expandedTradeId: payload.trades.length === 1 ? payload.trades[0].id : null\r\n                  });\r\n                }\r\n              }\r\n            }}\r\n            style={{ cursor: 'pointer' }}\r\n          >\r\n            {chartData.map((entry, index) => (\r\n              <Cell\r\n                key={`cell-${index}`}\r\n                fill={entry.isWin ? COLORS.win : entry.isLoss ? COLORS.loss : COLORS.breakEven}\r\n                fillOpacity={0.8}\r\n              />\r\n            ))}\r\n          </Bar>\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default DailyPnLChart;\r\n","import React, { useState } from 'react';\nimport { Box, Paper, Tabs, Tab, useTheme } from '@mui/material';\nimport { alpha } from '@mui/material/styles';\nimport CumulativePnLChart from './CumulativePnLChart';\nimport DailyPnLChart from './DailyPnLChart';\n\ninterface PnLChartsWrapperProps {\n  chartData: any[];\n  targetValue: number | null;\n  monthlyTarget?: number;\n  drawdownViolationValue: number;\n  setMultipleTradesDialog: (dialogState: any) => void;\n  timePeriod: 'month' | 'year' | 'all';\n}\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nconst TabPanel: React.FC<TabPanelProps> = ({ children, value, index }) => {\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`pnl-tabpanel-${index}`}\n      aria-labelledby={`pnl-tab-${index}`}\n    >\n      {value === index && <Box>{children}</Box>}\n    </div>\n  );\n};\n\nconst PnLChartsWrapper: React.FC<PnLChartsWrapperProps> = ({\n  chartData,\n  targetValue,\n  monthlyTarget,\n  drawdownViolationValue,\n  setMultipleTradesDialog,\n  timePeriod\n}) => {\n  const theme = useTheme();\n  const [activeTab, setActiveTab] = useState(0);\n\n  const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {\n    setActiveTab(newValue);\n  };\n\n  return (\n    <Paper sx={{ p: 0, mb: 3, borderRadius: 2 }}>\n      <Box sx={{ px: 3, pt: 3 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'start', mb: 2 }}>\n          <Tabs\n            value={activeTab}\n            onChange={handleTabChange}\n            sx={{\n              minHeight: 40,\n              backgroundColor: theme.palette.mode === 'light'\n                ? '#f0f0f0'\n                : alpha(theme.palette.background.paper, 0.4),\n              borderRadius: '20px',\n              padding: '4px',\n              '& .MuiTabs-flexContainer': {\n                gap: '4px'\n              },\n              '& .MuiTabs-indicator': {\n                display: 'none'\n              }\n            }}\n          >\n            <Tab\n              label=\"Cumulative P&L\"\n              sx={{\n                minHeight: 32,\n                my: 0.2,\n                textTransform: 'none',\n                fontSize: '0.875rem',\n                fontWeight: 500,\n                color: 'text.secondary',\n                borderRadius: '16px',\n                padding: '6px 18px',\n                '&.Mui-selected': {\n                  color: theme.palette.mode === 'dark' ? 'white' : 'background.paper',\n                  backgroundColor: 'primary.main',\n                  boxShadow: theme.shadows[1]\n                },\n                '&:hover:not(.Mui-selected)': {\n                  backgroundColor: alpha(theme.palette.primary.main, 0.05),\n                  color: 'primary.main'\n                }\n              }}\n            />\n            <Tab\n              label=\"Daily P&L\"\n              sx={{\n                minHeight: 32,\n                my: 0.2,\n                textTransform: 'none',\n                fontSize: '0.875rem',\n                fontWeight: 500,\n                color: 'text.secondary',\n                borderRadius: '16px',\n                padding: '6px 18px',\n                '&.Mui-selected': {\n                  color: theme.palette.mode === 'dark' ? 'white' : 'background.paper',\n                  backgroundColor: 'primary.main',\n                  boxShadow: theme.shadows[1]\n                },\n                '&:hover:not(.Mui-selected)': {\n                  backgroundColor: alpha(theme.palette.primary.main, 0.05),\n                  color: 'primary.main'\n                }\n              }}\n            />\n          </Tabs>\n        </Box>\n      </Box>\n\n      <Box sx={{ px: 3, pb: 3 }}>\n        {/* Cumulative P&L Tab */}\n        <TabPanel value={activeTab} index={0}>\n          <CumulativePnLChart\n            chartData={chartData}\n            targetValue={targetValue}\n            monthlyTarget={monthlyTarget}\n            setMultipleTradesDialog={setMultipleTradesDialog}\n            timePeriod={timePeriod}\n          />\n        </TabPanel>\n\n        {/* Daily P&L Tab */}\n        <TabPanel value={activeTab} index={1}>\n          <DailyPnLChart\n            chartData={chartData}\n            drawdownViolationValue={drawdownViolationValue}\n            setMultipleTradesDialog={setMultipleTradesDialog}\n            timePeriod={timePeriod}\n          />\n        </TabPanel>\n      </Box>\n    </Paper>\n  );\n};\n\nexport default PnLChartsWrapper;\n","import React, { useMemo, useState } from 'react';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Typography,\r\n  useTheme,\r\n  TextField,\r\n  Autocomplete,\r\n  Chip\r\n} from '@mui/material';\r\nimport {\r\n  getTagChipStyles,\r\n  formatTagForDisplay,\r\n  isGroupedTag,\r\n  getTagGroup,\r\n  getUniqueTagGroups,\r\n  filterTagsByGroup\r\n} from '../utils/tagColors';\r\nimport { BaseDialog, SelectInput } from './common';\r\nimport { scrollbarStyles } from '../styles/scrollbarStyles';\r\n\r\ninterface TagFilterDialogProps {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  title?: string;\r\n  allTags: string[];\r\n  selectedTags: string[];\r\n  onTagsChange: (tags: string[]) => void;\r\n  showClearButton?: boolean;\r\n  showApplyButton?: boolean;\r\n}\r\n\r\nconst TagFilterDialog: React.FC<TagFilterDialogProps> = ({\r\n  open,\r\n  onClose,\r\n  title = 'Filter by Tags',\r\n  allTags,\r\n  selectedTags,\r\n  onTagsChange,\r\n  showClearButton = true,\r\n  showApplyButton = true\r\n}) => {\r\n  const theme = useTheme();\r\n  const [selectedTagGroup, setSelectedTagGroup] = useState<string>('');\r\n\r\n  // Get all unique tag groups\r\n  const tagGroups = useMemo(() => {\r\n    return getUniqueTagGroups(allTags);\r\n  }, [allTags]);\r\n\r\n  // Filter tags by selected group\r\n  const filteredTags = useMemo(() => {\r\n    if (!selectedTagGroup) return allTags;\r\n    return filterTagsByGroup(allTags, selectedTagGroup);\r\n  }, [allTags, selectedTagGroup]);\r\n\r\n  const handleClearTags = () => {\r\n    onTagsChange([]);\r\n  };\r\n\r\n  const dialogTitle = (\r\n    <Typography variant=\"h6\">{title}</Typography>\r\n  );\r\n\r\n  const dialogActions = (showClearButton || showApplyButton) ? (\r\n    <Box>\r\n      {showClearButton && (\r\n        <Button onClick={handleClearTags} color=\"inherit\">\r\n          Clear All\r\n        </Button>\r\n      )}\r\n      {showApplyButton && (\r\n        <Button onClick={onClose} color=\"primary\">\r\n          Apply\r\n        </Button>\r\n      )}\r\n    </Box>\r\n  ) : undefined;\r\n\r\n  return (\r\n    <BaseDialog\r\n      open={open}\r\n      onClose={onClose}\r\n      title={dialogTitle}\r\n      actions={dialogActions}\r\n      maxWidth=\"sm\"\r\n      fullWidth\r\n    >\r\n      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 2 }}>\r\n        {tagGroups.length > 0 && (\r\n          <SelectInput\r\n            label=\"Filter by Tag Group\"\r\n            value={selectedTagGroup}\r\n            onChange={(e) => setSelectedTagGroup(e.target.value as string)}\r\n            options={[\r\n              { value: \"\", label: \"All Tags\" },\r\n              ...tagGroups.map(group => ({ value: group, label: group }))\r\n            ]}\r\n            size=\"small\"\r\n          />\r\n        )}\r\n\r\n        <Autocomplete\r\n          multiple\r\n          options={filteredTags}\r\n          value={selectedTags}\r\n          onChange={(_, newValue) => onTagsChange(newValue)}\r\n          slotProps={{\r\n            listbox: {\r\n              sx: {\r\n                ...scrollbarStyles(theme)\r\n              }\r\n            }\r\n          }}\r\n          renderInput={(params) => (\r\n            <TextField\r\n              {...params}\r\n              variant=\"outlined\"\r\n              label=\"Select Tags\"\r\n              placeholder=\"Choose tags to filter\"\r\n              fullWidth\r\n            />\r\n          )}\r\n          renderTags={(value, getTagProps) =>\r\n            value.map((option, index) => (\r\n              <Chip\r\n                label={formatTagForDisplay(option, true)}\r\n                {...getTagProps({ index })}\r\n                sx={getTagChipStyles(option, theme)}\r\n                title={isGroupedTag(option) ? `Group: ${getTagGroup(option)}` : undefined}\r\n              />\r\n            ))\r\n          }\r\n          renderOption={(props, option) => (\r\n            <li {...props}>\r\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                {isGroupedTag(option) && (\r\n                  <Chip\r\n                    label={getTagGroup(option)}\r\n                    size=\"small\"\r\n                    sx={{\r\n                      ...getTagChipStyles(option, theme),\r\n                      height: '18px',\r\n                      fontSize: '0.7rem'\r\n                    }}\r\n                  />\r\n                )}\r\n                {formatTagForDisplay(option, true)}\r\n              </Box>\r\n            </li>\r\n          )}\r\n        />\r\n      </Box>\r\n\r\n      <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 2 }}>\r\n        {selectedTags.length > 0\r\n          ? `Selected ${selectedTags.length} tag${selectedTags.length > 1 ? 's' : ''}`\r\n          : 'Select tags to filter. When no tags are selected, all items will be shown.'}\r\n      </Typography>\r\n    </BaseDialog>\r\n  );\r\n};\r\n\r\nexport default TagFilterDialog;\r\n","import React, { useState } from 'react';\r\nimport {\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  ResponsiveContainer,\r\n  Legend,\r\n  Tooltip\r\n} from 'recharts';\r\nimport { Box, Paper, Typography, useTheme, Button } from '@mui/material';\r\nimport { alpha } from '@mui/material/styles';\r\nimport { PieChart as PieChartIcon, DonutLarge as DonutLargeIcon } from '@mui/icons-material';\r\nimport { getTagColor } from '../../utils/tagColors';\r\n\r\nimport TagFilterDialog from '../TagFilterDialog';\r\n\r\ninterface WinLossDistributionProps {\r\n  winLossData: any[];\r\n  comparisonWinLossData?: any[] | null;\r\n  allTags: string[];\r\n  comparisonTags: string[];\r\n  setComparisonTags: (tags: string[]) => void;\r\n  onPieClick?: (category: string) => void;\r\n  tagStats?: { tag: string; totalTrades: number }[];\r\n}\r\n\r\nconst WinLossDistribution: React.FC<WinLossDistributionProps> = ({\r\n  winLossData,\r\n  comparisonWinLossData,\r\n  allTags,\r\n  comparisonTags,\r\n  setComparisonTags,\r\n  onPieClick,\r\n  tagStats = []\r\n}) => {\r\n  const theme = useTheme();\r\n  const [comparisonTagsDialogOpen, setComparisonTagsDialogOpen] = useState(false);\r\n\r\n  // Add a style element to remove focus outlines from SVG elements\r\n  React.useEffect(() => {\r\n    // Create a style element\r\n    const style = document.createElement('style');\r\n    // Add CSS to remove focus outlines from SVG elements\r\n    style.innerHTML = `\r\n      .recharts-sector:focus,\r\n      .recharts-sector:focus-visible,\r\n      .recharts-pie:focus,\r\n      .recharts-pie:focus-visible,\r\n      .recharts-pie-sector:focus,\r\n      .recharts-pie-sector:focus-visible,\r\n      .recharts-layer:focus,\r\n      .recharts-layer:focus-visible,\r\n      .recharts-surface:focus,\r\n      .recharts-surface:focus-visible {\r\n        outline: none !important;\r\n        stroke: none !important;\r\n        stroke-width: 0 !important;\r\n        box-shadow: none !important;\r\n      }\r\n\r\n      /* Target all SVG elements in the chart */\r\n      .recharts-wrapper svg *:focus,\r\n      .recharts-wrapper svg *:focus-visible,\r\n      .win-loss-chart-container svg *:focus,\r\n      .win-loss-chart-container svg *:focus-visible {\r\n        outline: none !important;\r\n        stroke-width: 0 !important;\r\n      }\r\n    `;\r\n    // Append the style element to the document head\r\n    document.head.appendChild(style);\r\n\r\n    // Clean up the style element when the component unmounts\r\n    return () => {\r\n      document.head.removeChild(style);\r\n    };\r\n  }, []);\r\n\r\n  // Define colors with enhanced visual appeal\r\n  const COLORS = {\r\n    win: theme.palette.mode === 'dark' ? '#66bb6a' : '#4caf50', // Slightly lighter green in dark mode\r\n    loss: theme.palette.mode === 'dark' ? '#ef5350' : '#f44336', // Slightly lighter red in dark mode\r\n    zero: theme.palette.mode === 'dark' ? '#bdbdbd' : '#9e9e9e', // Lighter gray in dark mode\r\n    breakEven: theme.palette.mode === 'dark' ? '#ffb74d' : '#ff9800' // Lighter orange in dark mode\r\n  };\r\n\r\n  // Define chart styling\r\n  const chartStyle = {\r\n    outerRadius: 100,\r\n    innerRadius: 60,\r\n    paddingAngle: 3,\r\n    cornerRadius: 4,\r\n    activeFillOpacity: 0.9,\r\n    hoverShadowColor: theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.2)' : 'rgba(0, 0, 0, 0.2)',\r\n    labelFontSize: '0.85rem',\r\n    labelFontWeight: 500\r\n  };\r\n\r\n  // Generate tag distribution data when in tag distribution mode\r\n  const generateTagDistributionData = () => {\r\n    if (!comparisonTags || comparisonTags.length === 0) return [];\r\n\r\n    // If we don't have any win/loss data, we can't generate tag distribution\r\n    if (!comparisonWinLossData || !comparisonWinLossData.some(d => d.value > 0)) {\r\n      return [];\r\n    }\r\n\r\n    // Create a map to store the count for each tag\r\n    const tagCounts = new Map<string, number>();\r\n\r\n    // Use the tagStats from the parent component if available\r\n    if (tagStats && tagStats.length > 0) {\r\n      // Filter to only include the selected comparison tags\r\n      const filteredTagStats = tagStats.filter(stat => comparisonTags.includes(stat.tag));\r\n\r\n      // If we have stats for the selected tags, use them\r\n      if (filteredTagStats.length > 0) {\r\n        filteredTagStats.forEach(stat => {\r\n          tagCounts.set(stat.tag, stat.totalTrades);\r\n        });\r\n      } else {\r\n        // Fallback if we don't have stats for the selected tags\r\n        comparisonTags.forEach(tag => {\r\n          // Use a hash of the tag name to generate a consistent value\r\n          const hash = tag.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\r\n          // Generate a value between 1 and 10 based on the hash\r\n          const value = (hash % 10) + 1;\r\n          tagCounts.set(tag, value);\r\n        });\r\n      }\r\n    } else {\r\n      // Fallback if we don't have any tag stats\r\n      comparisonTags.forEach(tag => {\r\n        // Use a hash of the tag name to generate a consistent value\r\n        const hash = tag.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\r\n        // Generate a value between 1 and 10 based on the hash\r\n        const value = (hash % 10) + 1;\r\n        tagCounts.set(tag, value);\r\n      });\r\n    }\r\n\r\n    // Convert to the format needed for the pie chart\r\n    return Array.from(tagCounts.entries())\r\n      .map(([tag, count]) => ({\r\n        name: tag,\r\n        value: count\r\n      }));\r\n  };\r\n\r\n  // Get the appropriate data based on whether tags are selected\r\n  const chartData = comparisonTags.length > 0\r\n    ? generateTagDistributionData()\r\n    : winLossData;\r\n\r\n  return (\r\n    <Paper\r\n      elevation={theme.palette.mode === 'dark' ? 2 : 1}\r\n      sx={{\r\n        p: 3,\r\n        borderRadius: 2,\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        bgcolor: theme.palette.background.paper,\r\n      }}>\r\n      <Box sx={{\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        mb: 3,\r\n        pb: 1.5,\r\n      }}>\r\n        <Typography variant=\"h6\" sx={{\r\n\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          gap: 1\r\n        }}>\r\n          {comparisonTags.length > 0 ? (\r\n            <>\r\n\r\n              Tag Distribution\r\n            </>\r\n          ) : (\r\n            <>\r\n\r\n              Win/Loss Distribution\r\n            </>\r\n          )}\r\n        </Typography>\r\n        <Button\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          onClick={() => setComparisonTagsDialogOpen(true)}\r\n          sx={{ textTransform: 'none' }}\r\n        >\r\n          {comparisonTags.length > 0 ? `Compare: ${comparisonTags.length} tags` : 'Compare Tags'}\r\n        </Button>\r\n        <TagFilterDialog\r\n          open={comparisonTagsDialogOpen}\r\n          onClose={() => setComparisonTagsDialogOpen(false)}\r\n          title=\"Select Tags to Compare\"\r\n          allTags={allTags}\r\n          selectedTags={comparisonTags}\r\n          onTagsChange={(tags) => setComparisonTags(tags)}\r\n          showApplyButton={true}\r\n          showClearButton={true}\r\n        />\r\n      </Box>\r\n      <Box sx={{ flex: 1, minHeight: 300 }} className=\"win-loss-chart-container\">\r\n        {/* Show message when no data is available */}\r\n        {comparisonTags.length > 0 && chartData.length === 0 ? (\r\n          <Box sx={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            height: '100%',\r\n            flexDirection: 'column',\r\n            gap: 2\r\n          }}>\r\n            <Typography variant=\"body1\" color=\"text.secondary\">\r\n              No trades found with the selected tags\r\n            </Typography>\r\n            <Typography variant=\"caption\" color=\"text.secondary\">\r\n              Try selecting different tags for comparison\r\n            </Typography>\r\n          </Box>\r\n        ) : (\r\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n            <PieChart\r\n              style={{ outline: 'none' }}\r\n              tabIndex={-1}\r\n              margin={{ top: 5, right: 5, bottom: 5, left: 5 }}\r\n            >\r\n              <Tooltip\r\n                content={({ active, payload }) => {\r\n                  if (active && payload && payload.length) {\r\n                    const data = payload[0].payload;\r\n                    return (\r\n                      <Paper sx={{ p: 1.5, boxShadow: theme.shadows[3] }}>\r\n                        <Typography variant=\"body2\" sx={{ fontWeight: 'bold', mb: 0.5 }}>\r\n                          {data.name}\r\n                        </Typography>\r\n                        <Typography\r\n                          variant=\"body2\"\r\n                          sx={{\r\n                            color: comparisonTags.length > 0\r\n                              ? getTagColor(data.name)\r\n                              : data.name === 'Wins'\r\n                                ? COLORS.win\r\n                                : data.name === 'Losses'\r\n                                  ? COLORS.loss\r\n                                  : data.name === 'Breakeven'\r\n                                    ? COLORS.breakEven\r\n                                    : COLORS.zero,\r\n                            fontWeight: 'bold'\r\n                          }}\r\n                        >\r\n                          {data.value} trade{data.value !== 1 ? 's' : ''}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\" color=\"text.secondary\">\r\n                          {(data.value / chartData.reduce((sum, item) => sum + item.value, 0) * 100).toFixed(1)}% of total\r\n                        </Typography>\r\n                        {onPieClick && (\r\n                          <Typography variant=\"body2\" sx={{ color: theme.palette.primary.main, fontSize: '0.75rem', mt: 0.5 }}>\r\n                            Click to view trades\r\n                          </Typography>\r\n                        )}\r\n                      </Paper>\r\n                    );\r\n                  }\r\n                  return null;\r\n                }}\r\n              />\r\n              <Pie\r\n                data={chartData}\r\n                cx=\"50%\"\r\n                cy=\"50%\"\r\n                labelLine={false}\r\n                outerRadius={chartStyle.outerRadius}\r\n                strokeWidth={0}\r\n                innerRadius={chartStyle.innerRadius}\r\n                fill=\"#8884d8\"\r\n                dataKey=\"value\"\r\n                label={({ name, percent }) => {\r\n                  // Only show labels for segments with significant percentage\r\n                  if (percent < 0.05) return null;\r\n                  return `${name} ${(percent * 100).toFixed(0)}%`;\r\n                }}\r\n                paddingAngle={chartStyle.paddingAngle}\r\n                cornerRadius={chartStyle.cornerRadius}\r\n                onClick={(data) => {\r\n                  if (onPieClick) {\r\n                    onPieClick(data.name);\r\n                  }\r\n                }}\r\n                cursor={'pointer'}\r\n                style={{\r\n                  outline: 'none',\r\n                  filter: 'drop-shadow(0px 2px 5px rgba(0,0,0,0.1))'\r\n                }}\r\n                tabIndex={-1}\r\n              >\r\n                {chartData.map((entry, index) => {\r\n                  // Determine the fill color based on whether we're showing tags or win/loss\r\n                  let fillColor;\r\n                  if (comparisonTags.length > 0) {\r\n                    // For tag distribution, use the tag's color from the tagColors utility\r\n                    fillColor = getTagColor(entry.name);\r\n                  } else {\r\n                    // For win/loss distribution, use the predefined colors\r\n                    fillColor = entry.name === 'Wins' ? COLORS.win :\r\n                               entry.name === 'Losses' ? COLORS.loss :\r\n                               entry.name === 'Breakeven' ? COLORS.breakEven :\r\n                               COLORS.zero;\r\n                  }\r\n\r\n                  return (\r\n                    <Cell\r\n                      key={`cell-${index}`}\r\n                      fill={fillColor}\r\n                      strokeWidth={1}\r\n                      stroke={theme.palette.background.paper}\r\n                      style={{\r\n                        outline: 'none',\r\n                        transition: 'opacity 0.3s'\r\n                      }}\r\n                    />\r\n                  );\r\n                })}\r\n              </Pie>\r\n              <Legend\r\n                verticalAlign=\"bottom\"\r\n                align=\"center\"\r\n                layout=\"horizontal\"\r\n                iconSize={12}\r\n                iconType=\"circle\"\r\n                wrapperStyle={{\r\n                  paddingTop: 15,\r\n                  fontSize: '0.85rem',\r\n                  fontWeight: 500\r\n                }}\r\n              />\r\n            </PieChart>\r\n          </ResponsiveContainer>\r\n        )}\r\n      </Box>\r\n      {/* Only show this message when we're displaying a chart */}\r\n      {!(comparisonTags.length > 0 && chartData.length === 0) && (\r\n        <Box sx={{\r\n          display: 'flex',\r\n          justifyContent: 'center',\r\n          mt: 2,\r\n          pt: 1.5,\r\n          flexDirection: 'column',\r\n          alignItems: 'center',\r\n          marginTop: 'auto'\r\n        }}>\r\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ fontWeight: 500 }}>\r\n            {comparisonTags.length > 0\r\n              ? 'Showing distribution of selected tags'\r\n              : 'Showing win/loss distribution for all trades'}\r\n          </Typography>\r\n          {onPieClick && (\r\n            <Box sx={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              gap: 0.5,\r\n              mt: 0.5,\r\n              bgcolor: alpha(theme.palette.primary.main, 0.08),\r\n              px: 1.5,\r\n              py: 0.5,\r\n              borderRadius: 1\r\n            }}>\r\n              <Typography variant=\"caption\" color=\"primary\" sx={{ fontWeight: 500 }}>\r\n                Click on a segment to view trades\r\n              </Typography>\r\n            </Box>\r\n          )}\r\n        </Box>\r\n      )}\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default WinLossDistribution;\r\n","import React from 'react';\nimport { Box, Paper, Typography, Tooltip, useTheme, Stack, alpha } from '@mui/material';\nimport { InfoOutlined } from '@mui/icons-material';\nimport { formatCurrency } from '../../utils/formatters';\nimport { Trade } from '../../types/trade';\n\ninterface WinLossStatsProps {\n  winLossStats: {\n    totalTrades: number;\n    winRate: number;\n    winners: {\n      total: number;\n      avgAmount: number;\n      maxConsecutive: number;\n      avgConsecutive: number;\n      bestWin?: number;\n      averageWin?: number;\n    };\n    losers: {\n      total: number;\n      avgAmount: number;\n      maxConsecutive: number;\n      avgConsecutive: number;\n      worstLoss?: number;\n      averageLoss?: number;\n    };\n    breakevens?: {\n      total: number;\n      avgAmount: number;\n    };\n  };\n  trades: Trade[];\n  onTradeClick?: (tradeId: string) => void;\n}\n\nconst WinLossStats: React.FC<WinLossStatsProps> = ({ winLossStats, trades, onTradeClick }) => {\n  const theme = useTheme();\n\n  // Find the best win (trade with highest amount)\n  const bestWin = React.useMemo(() => {\n    const winTrades = trades.filter(trade => trade.type === 'win');\n    if (winTrades.length === 0) return null;\n    return winTrades.reduce((best, current) =>\n      current.amount > best.amount ? current : best, winTrades[0]);\n  }, [trades]);\n\n  // Find the worst loss (trade with lowest/most negative amount)\n  const worstLoss = React.useMemo(() => {\n    const lossTrades = trades.filter(trade => trade.type === 'loss');\n    if (lossTrades.length === 0) return null;\n    return lossTrades.reduce((worst, current) =>\n      current.amount < worst.amount ? current : worst, lossTrades[0]);\n  }, [trades]);\n\n  return (\n    <Box>\n      {/* Winners and Losers Section */}\n      {(winLossStats.winners.total > 0 || winLossStats.losers.total > 0) && (\n        <Box sx={{ display: 'flex', gap: 2, mb: 3 }}>\n          {/* Winners Card */}\n          <Paper sx={{ \n            flex: 1, \n            p: 2, \n            border: `4px solid ${alpha(theme.palette.success.main, 0.1)}`,\n            borderRadius: 2\n          }}>\n            <Typography variant=\"subtitle1\" sx={{ color: theme.palette.success.main, mb: 2 }}>\n              Winners\n            </Typography>\n            <Stack spacing={1.5}>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Total winners\n                  </Typography>\n                  <Tooltip title=\"Total number of winning trades in the selected period\" arrow>\n                    <InfoOutlined sx={{ fontSize: 14, color: 'text.secondary', opacity: 0.7, cursor: 'help' }} />\n                  </Tooltip>\n                </Box>\n                <Typography variant=\"body2\">{winLossStats.winners.total}</Typography>\n              </Box>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Best win\n                  </Typography>\n                  <Tooltip title=\"Your largest winning trade as a percentage of your account\" arrow>\n                    <InfoOutlined sx={{ fontSize: 14, color: 'text.secondary', opacity: 0.7, cursor: 'help' }} />\n                  </Tooltip>\n                </Box>\n                <Typography variant=\"body2\">\n                  {bestWin ? formatCurrency(bestWin.amount) : '0'}\n                </Typography>\n              </Box>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Average win\n                  </Typography>\n                  <Tooltip title=\"The average size of your winning trades as a percentage of your account\" arrow>\n                    <InfoOutlined sx={{ fontSize: 14, color: 'text.secondary', opacity: 0.7, cursor: 'help' }} />\n                  </Tooltip>\n                </Box>\n                <Typography variant=\"body2\">{formatCurrency(winLossStats.winners.avgAmount)}</Typography>\n              </Box>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Max consecutive wins\n                  </Typography>\n                  <Tooltip title=\"Your longest streak of consecutive winning trades\" arrow>\n                    <InfoOutlined sx={{ fontSize: 14, color: 'text.secondary', opacity: 0.7, cursor: 'help' }} />\n                  </Tooltip>\n                </Box>\n                <Typography variant=\"body2\">{winLossStats.winners.maxConsecutive}</Typography>\n              </Box>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Avg consecutive wins\n                  </Typography>\n                  <Tooltip title=\"The average number of wins you achieve in a row before a loss\" arrow>\n                    <InfoOutlined sx={{ fontSize: 14, color: 'text.secondary', opacity: 0.7, cursor: 'help' }} />\n                  </Tooltip>\n                </Box>\n                <Typography variant=\"body2\">{winLossStats.winners.avgConsecutive.toFixed(1)}</Typography>\n              </Box>\n            </Stack>\n          </Paper>\n\n          {/* Losers Card */}\n          <Paper sx={{ \n            flex: 1, \n            p: 2, \n            border: `4px solid ${alpha(theme.palette.error.main, 0.1)}`,\n            borderRadius: 2\n          }}>\n            <Typography variant=\"subtitle1\" sx={{ color: theme.palette.error.main, mb: 2 }}>\n              Losers\n            </Typography>\n            <Stack spacing={1.5}>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Total losers\n                  </Typography>\n                  <Tooltip title=\"Total number of losing trades in the selected period\" arrow>\n                    <InfoOutlined sx={{ fontSize: 14, color: 'text.secondary', opacity: 0.7, cursor: 'help' }} />\n                  </Tooltip>\n                </Box>\n                <Typography variant=\"body2\">{winLossStats.losers.total}</Typography>\n              </Box>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Worst loss\n                  </Typography>\n                  <Tooltip title=\"Your largest losing trade as a percentage of your account\" arrow>\n                    <InfoOutlined sx={{ fontSize: 14, color: 'text.secondary', opacity: 0.7, cursor: 'help' }} />\n                  </Tooltip>\n                </Box>\n                <Typography variant=\"body2\">\n                  {worstLoss ? formatCurrency(Math.abs(worstLoss.amount)) : '0'}\n                </Typography>\n              </Box>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Average loss\n                  </Typography>\n                  <Tooltip title=\"The average size of your losing trades as a percentage of your account\" arrow>\n                    <InfoOutlined sx={{ fontSize: 14, color: 'text.secondary', opacity: 0.7, cursor: 'help' }} />\n                  </Tooltip>\n                </Box>\n                <Typography variant=\"body2\">{formatCurrency(Math.abs(winLossStats.losers.avgAmount))}</Typography>\n              </Box>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Max consecutive losses\n                  </Typography>\n                  <Tooltip title=\"Your longest streak of consecutive losing trades\" arrow>\n                    <InfoOutlined sx={{ fontSize: 14, color: 'text.secondary', opacity: 0.7, cursor: 'help' }} />\n                  </Tooltip>\n                </Box>\n                <Typography variant=\"body2\">{winLossStats.losers.maxConsecutive}</Typography>\n              </Box>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Avg consecutive losses\n                  </Typography>\n                  <Tooltip title=\"The average number of losses you have in a row before a win\" arrow>\n                    <InfoOutlined sx={{ fontSize: 14, color: 'text.secondary', opacity: 0.7, cursor: 'help' }} />\n                  </Tooltip>\n                </Box>\n                <Typography variant=\"body2\">{winLossStats.losers.avgConsecutive.toFixed(1)}</Typography>\n              </Box>\n            </Stack>\n          </Paper>\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default WinLossStats;\n","import React, { useState } from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  Cell\n} from 'recharts';\nimport { Box, Paper, Typography, useTheme, Button, alpha, Tooltip as MuiTooltip } from '@mui/material';\nimport { InfoOutlined } from '@mui/icons-material';\nimport { format, isSameMonth } from 'date-fns';\nimport { Trade } from '../../types/trade';\nimport { formatValue } from '../../utils/formatters';\nimport TagFilterDialog from '../TagFilterDialog';\n\ninterface TagPerformanceAnalysisProps {\n  trades: Trade[];\n  selectedDate: Date;\n  timePeriod: 'month' | 'year' | 'all';\n  allTags: string[];\n  primaryTags: string[];\n  secondaryTags: string[];\n  setPrimaryTags: (tags: string[]) => void;\n  setSecondaryTags: (tags: string[]) => void;\n  filteredTagStats: any[];\n  setMultipleTradesDialog: (dialogState: any) => void;\n}\n\nconst TagPerformanceAnalysis: React.FC<TagPerformanceAnalysisProps> = ({\n  trades,\n  selectedDate,\n  timePeriod,\n  allTags,\n  primaryTags,\n  secondaryTags,\n  setPrimaryTags,\n  setSecondaryTags,\n  filteredTagStats,\n  setMultipleTradesDialog\n}) => {\n  const theme = useTheme();\n  const [primaryTagsDialogOpen, setPrimaryTagsDialogOpen] = useState(false);\n  const [secondaryTagsDialogOpen, setSecondaryTagsDialogOpen] = useState(false);\n\n  // Define colors\n  const COLORS = {\n    win: '#4caf50',\n    loss: '#f44336',\n    zero: '#9e9e9e',\n    breakEven: '#ff9800'\n  };\n\n  return (\n    <Box>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n          <Typography variant=\"h6\">Tag Performance Analysis</Typography>\n          <MuiTooltip\n            title=\"Analyze how different tags perform. Select primary tags to filter, and optionally secondary tags to see how they perform in combination.\"\n            arrow\n            placement=\"top\"\n          >\n            <InfoOutlined sx={{ fontSize: 16, color: 'text.secondary', opacity: 0.7, cursor: 'help' }} />\n          </MuiTooltip>\n        </Box>\n        <Box sx={{ display: 'flex', gap: 1 }}>\n          <MuiTooltip\n            title=\"Select primary tags to filter trades that have ANY of these tags. These are your main strategies or setups to analyze.\"\n            arrow\n            placement=\"top\"\n          >\n            <Button\n              variant=\"outlined\"\n              size=\"small\"\n              onClick={() => setPrimaryTagsDialogOpen(true)}\n              sx={{ textTransform: 'none' }}\n            >\n              {primaryTags.length > 0 ? `Primary: ${primaryTags.length} tags` : 'Select Primary Tags'}\n            </Button>\n          </MuiTooltip>\n          <MuiTooltip\n            title=\"Select secondary tags to further filter trades that have ALL of these tags. Use this to analyze specific conditions within your primary strategies.\"\n            arrow\n            placement=\"top\"\n          >\n            <Button\n              variant=\"outlined\"\n              size=\"small\"\n              onClick={() => setSecondaryTagsDialogOpen(true)}\n              color={secondaryTags.length > 0 ? \"secondary\" : \"primary\"}\n              sx={{\n                textTransform: 'none',\n                borderColor: secondaryTags.length > 0 ? 'secondary.main' : undefined\n              }}\n            >\n              {secondaryTags.length > 0 ? `Secondary: ${secondaryTags.length} tags` : 'Select Secondary Tags'}\n            </Button>\n          </MuiTooltip>\n          <TagFilterDialog\n            open={primaryTagsDialogOpen}\n            onClose={() => setPrimaryTagsDialogOpen(false)}\n            title=\"Select Primary Tags\"\n            allTags={allTags}\n            selectedTags={primaryTags}\n            onTagsChange={(tags) => setPrimaryTags(tags)}\n            showApplyButton={true}\n            showClearButton={true}\n          />\n          <TagFilterDialog\n            open={secondaryTagsDialogOpen}\n            onClose={() => setSecondaryTagsDialogOpen(false)}\n            title=\"Select Secondary Tags\"\n            allTags={allTags}\n            selectedTags={secondaryTags}\n            onTagsChange={(tags) => setSecondaryTags(tags)}\n            showApplyButton={true}\n            showClearButton={true}\n          />\n        </Box>\n      </Box>\n      {primaryTags.length === 0 && secondaryTags.length === 0 ? (\n        <Box sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          height: 300,\n          bgcolor: alpha(theme.palette.background.paper, 0.4),\n          borderRadius: 2,\n          p: 3\n        }}>\n          <Typography variant=\"h6\" color=\"text.secondary\" sx={{ mb: 1 }}>\n            No Tags Selected\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\">\n            Please select primary or secondary tags to view performance analysis.\n          </Typography>\n        </Box>\n      ) : (\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <BarChart\n            data={filteredTagStats}\n            margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n            maxBarSize={50}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n            <XAxis\n              dataKey=\"tag\"\n              axisLine={false}\n              tickLine={false}\n              tick={{ fill: theme.palette.text.secondary, fontSize: 12 }}\n            />\n            <YAxis\n              axisLine={false}\n              tickLine={false}\n              tick={{ fill: theme.palette.text.secondary, fontSize: 12 }}\n            />\n            <Tooltip\n              content={({ active, payload, label }) => {\n                if (active && payload && payload.length) {\n                  const data = payload[0].payload;\n                  return (\n                    <Paper sx={{ p: 1.5, bgcolor: 'background.paper' }}>\n                      <Typography variant=\"body2\" sx={{ fontWeight: 'bold' }}>\n                        {label}\n                      </Typography>\n                      <Typography variant=\"body2\" sx={{ color: COLORS.win }}>\n                        Wins: {data.wins}\n                      </Typography>\n                      <Typography variant=\"body2\" sx={{ color: COLORS.loss }}>\n                        Losses: {data.losses}\n                      </Typography>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        Win Rate: {data.winRate}%\n                      </Typography>\n                      <Typography\n                        variant=\"body2\"\n                        sx={{\n                          color: data.totalPnL > 0 ? COLORS.win : COLORS.loss,\n                          fontWeight: 'bold',\n                          mt: 0.5\n                        }}\n                      >\n                        P&L: {formatValue(data.totalPnL)}\n                      </Typography>\n                    </Paper>\n                  );\n                }\n                return null;\n              }}\n            />\n            <Legend />\n            <Bar\n              dataKey=\"wins\"\n              name=\"Wins\"\n              stackId=\"trades\"\n              fill={COLORS.win}\n              radius={[4, 4, 0, 0]}\n              onClick={(data) => {\n               if (data && data.payload) {\n                 const tag = data.payload.tag;\n                 const filteredTrades = trades.filter(trade =>\n                   trade.tags?.includes(tag) &&\n                   trade.type === 'win' &&\n                   (timePeriod === 'month' ? isSameMonth(new Date(trade.date), selectedDate) :\n                    timePeriod === 'year' ? new Date(trade.date).getFullYear() === selectedDate.getFullYear() :\n                    true)\n                 );\n                 if (filteredTrades.length > 0) {\n                   setMultipleTradesDialog({\n                     open: true,\n                     trades: filteredTrades,\n                     date: `Winning trades with tag: ${tag}`,\n                     expandedTradeId: filteredTrades.length === 1 ? filteredTrades[0].id : null\n                   });\n                 }\n               }\n             }}\n             style={{ cursor: 'pointer' }}\n            />\n            <Bar\n              dataKey=\"losses\"\n              name=\"Losses\"\n              stackId=\"trades\"\n              fill={COLORS.loss}\n              radius={[4, 4, 0, 0]}\n              onClick={(data) => {\n               if (data && data.payload) {\n                 const tag = data.payload.tag;\n                 const filteredTrades = trades.filter(trade =>\n                   trade.tags?.includes(tag) &&\n                   trade.type === 'loss' &&\n                   (timePeriod === 'month' ? isSameMonth(new Date(trade.date), selectedDate) :\n                    timePeriod === 'year' ? new Date(trade.date).getFullYear() === selectedDate.getFullYear() :\n                    true)\n                 );\n                 if (filteredTrades.length > 0) {\n                   setMultipleTradesDialog({\n                     open: true,\n                     trades: filteredTrades,\n                     date: `Losing trades with tag: ${tag}`,\n                     expandedTradeId: filteredTrades.length === 1 ? filteredTrades[0].id : null\n                   });\n                 }\n               }\n             }}\n             style={{ cursor: 'pointer' }}\n            />\n          </BarChart>\n        </ResponsiveContainer>\n      )}\n    </Box>\n  );\n};\n\nexport default TagPerformanceAnalysis;\n","import React, { useState } from 'react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  Cell\n} from 'recharts';\nimport { Box, Paper, Typography, useTheme, Button, alpha, Tooltip as MuiTooltip } from '@mui/material';\nimport { InfoOutlined } from '@mui/icons-material';\nimport { format, getDay } from 'date-fns';\nimport { Trade } from '../../types/trade';\nimport { formatCurrency } from '../../utils/formatters';\nimport TagFilterDialog from '../TagFilterDialog';\n\ninterface TagDayOfWeekAnalysisProps {\n  trades: Trade[];\n  selectedDate: Date;\n  timePeriod: 'month' | 'year' | 'all';\n  allTags: string[];\n  primaryTags: string[];\n  secondaryTags: string[];\n  setPrimaryTags: (tags: string[]) => void;\n  setSecondaryTags: (tags: string[]) => void;\n  setMultipleTradesDialog: (dialogState: any) => void;\n}\n\n// Day of week names\nconst DAYS_OF_WEEK = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\nconst TagDayOfWeekAnalysis: React.FC<TagDayOfWeekAnalysisProps> = ({\n  trades,\n  selectedDate,\n  timePeriod,\n  allTags,\n  primaryTags,\n  secondaryTags,\n  setPrimaryTags,\n  setSecondaryTags,\n  setMultipleTradesDialog\n}) => {\n  const theme = useTheme();\n  const [primaryTagsDialogOpen, setPrimaryTagsDialogOpen] = useState(false);\n  const [secondaryTagsDialogOpen, setSecondaryTagsDialogOpen] = useState(false);\n  const [selectedMetric, setSelectedMetric] = useState<'winRate' | 'pnl'>('winRate');\n\n  // Define colors - memoized to prevent unnecessary re-renders\n  const COLORS = React.useMemo(() => ({\n    win: theme.palette.success.main,\n    loss: theme.palette.error.main,\n    neutral: theme.palette.grey[500],\n    sunday: '#FF6384',\n    monday: '#36A2EB',\n    tuesday: '#FFCE56',\n    wednesday: '#4BC0C0',\n    thursday: '#9966FF',\n    friday: '#FF9F40',\n    saturday: '#C9CBCF'\n  }), [theme]);\n\n  // Calculate tag performance by day of week\n  const tagDayOfWeekData = React.useMemo(() => {\n    // If no tags selected, return empty array\n    if (primaryTags.length === 0) {\n      return [];\n    }\n\n    // Filter trades by selected tags\n    const filteredTrades = trades.filter(trade => {\n      // Check if trade has tags\n      if (!trade.tags || trade.tags.length === 0) {\n        return false;\n      }\n\n      // Check if trade has any of the primary tags\n      const hasPrimaryTag = primaryTags.some(tag => trade.tags?.includes(tag));\n      if (!hasPrimaryTag) {\n        return false;\n      }\n\n      // If secondary tags are selected, check if trade has all of them\n      if (secondaryTags.length > 0) {\n        return secondaryTags.every(tag => trade.tags?.includes(tag));\n      }\n\n      return true;\n    });\n\n    // Group trades by day of week\n    const tradesByDay = DAYS_OF_WEEK.map((day, index) => {\n      // Get trades for this day of week\n      const dayTrades = filteredTrades.filter(trade => {\n        const tradeDate = new Date(trade.date);\n        return getDay(tradeDate) === index;\n      });\n\n      // Calculate statistics\n      const totalTrades = dayTrades.length;\n      const winTrades = dayTrades.filter(trade => trade.type === 'win').length;\n      const lossTrades = dayTrades.filter(trade => trade.type === 'loss').length;\n      const winRate = totalTrades > 0 ? (winTrades / totalTrades) * 100 : 0;\n      const totalPnL = dayTrades.reduce((sum, trade) => sum + trade.amount, 0);\n\n      return {\n        day,\n        dayIndex: index,\n        totalTrades,\n        winTrades,\n        lossTrades,\n        winRate,\n        pnl: totalPnL,\n        trades: dayTrades\n      };\n    });\n\n    return tradesByDay;\n  }, [trades, primaryTags, secondaryTags]);\n\n  // Format data for the chart based on selected metric\n  const chartData = React.useMemo(() => {\n    return tagDayOfWeekData.map(dayData => ({\n      day: dayData.day.substring(0, 3), // Abbreviate day names\n      fullDay: dayData.day,\n      value: selectedMetric === 'winRate' ? dayData.winRate : dayData.pnl,\n      totalTrades: dayData.totalTrades,\n      winTrades: dayData.winTrades,\n      lossTrades: dayData.lossTrades,\n      winRate: dayData.winRate,\n      pnl: dayData.pnl,\n      trades: dayData.trades,\n      color: COLORS[dayData.day.toLowerCase() as keyof typeof COLORS] || COLORS.neutral\n    }));\n  }, [tagDayOfWeekData, selectedMetric, COLORS]);\n\n  // Custom tooltip for the chart\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      const data = payload[0].payload;\n      return (\n        <Paper sx={{ p: 1.5, bgcolor: 'background.paper' }}>\n          <Typography variant=\"body2\" sx={{ fontWeight: 'bold' }}>\n            {data.fullDay}\n          </Typography>\n          <Typography variant=\"body2\">\n            Total Trades: {data.totalTrades}\n          </Typography>\n          <Typography variant=\"body2\" sx={{ color: COLORS.win }}>\n            Wins: {data.winTrades}\n          </Typography>\n          <Typography variant=\"body2\" sx={{ color: COLORS.loss }}>\n            Losses: {data.lossTrades}\n          </Typography>\n          <Typography variant=\"body2\">\n            Win Rate: {data.winRate.toFixed(1)}%\n          </Typography>\n          <Typography variant=\"body2\">\n            P&L: {formatCurrency(data.pnl)}\n          </Typography>\n        </Paper>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <Box>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n          <Typography variant=\"h6\">Tag Performance by Day of Week</Typography>\n          <MuiTooltip\n            title=\"Analyze how selected tags perform on different days of the week. This helps identify which strategies work better on specific days.\"\n            arrow\n            placement=\"top\"\n          >\n            <InfoOutlined sx={{ fontSize: 16, color: 'text.secondary', opacity: 0.7, cursor: 'help' }} />\n          </MuiTooltip>\n        </Box>\n        <Box sx={{ display: 'flex', gap: 1 }}>\n          <Button\n            variant={selectedMetric === 'winRate' ? 'contained' : 'outlined'}\n            size=\"small\"\n            onClick={() => setSelectedMetric('winRate')}\n            sx={{ textTransform: 'none' }}\n          >\n            Win Rate\n          </Button>\n          <Button\n            variant={selectedMetric === 'pnl' ? 'contained' : 'outlined'}\n            size=\"small\"\n            onClick={() => setSelectedMetric('pnl')}\n            sx={{ textTransform: 'none' }}\n          >\n            P&L\n          </Button>\n          <MuiTooltip\n            title=\"Select primary tags to filter trades that have ANY of these tags. These are your main strategies or setups to analyze.\"\n            arrow\n            placement=\"top\"\n          >\n            <Button\n              variant=\"outlined\"\n              size=\"small\"\n              onClick={() => setPrimaryTagsDialogOpen(true)}\n              sx={{ textTransform: 'none' }}\n            >\n              {primaryTags.length > 0 ? `Primary: ${primaryTags.length} tags` : 'Select Primary Tags'}\n            </Button>\n          </MuiTooltip>\n          <MuiTooltip\n            title=\"Select secondary tags to further filter trades that have ALL of these tags. Use this to analyze specific conditions within your primary strategies.\"\n            arrow\n            placement=\"top\"\n          >\n            <Button\n              variant=\"outlined\"\n              size=\"small\"\n              onClick={() => setSecondaryTagsDialogOpen(true)}\n              color={secondaryTags.length > 0 ? \"secondary\" : \"primary\"}\n              sx={{\n                textTransform: 'none',\n                borderColor: secondaryTags.length > 0 ? 'secondary.main' : undefined\n              }}\n            >\n              {secondaryTags.length > 0 ? `Secondary: ${secondaryTags.length} tags` : 'Select Secondary Tags'}\n            </Button>\n          </MuiTooltip>\n          <TagFilterDialog\n            open={primaryTagsDialogOpen}\n            onClose={() => setPrimaryTagsDialogOpen(false)}\n            title=\"Select Primary Tags\"\n            allTags={allTags}\n            selectedTags={primaryTags}\n            onTagsChange={(tags) => setPrimaryTags(tags)}\n            showApplyButton={true}\n            showClearButton={true}\n          />\n          <TagFilterDialog\n            open={secondaryTagsDialogOpen}\n            onClose={() => setSecondaryTagsDialogOpen(false)}\n            title=\"Select Secondary Tags\"\n            allTags={allTags}\n            selectedTags={secondaryTags}\n            onTagsChange={(tags) => setSecondaryTags(tags)}\n            showApplyButton={true}\n            showClearButton={true}\n          />\n        </Box>\n      </Box>\n      {primaryTags.length === 0 ? (\n        <Box sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          height: 300,\n          bgcolor: alpha(theme.palette.background.paper, 0.4),\n          borderRadius: 2,\n          p: 3\n        }}>\n          <Typography variant=\"h6\" color=\"text.secondary\" sx={{ mb: 1 }}>\n            No Tags Selected\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\">\n            Please select primary tags to view day of week performance analysis.\n          </Typography>\n        </Box>\n      ) : (\n        <>\n          <Box sx={{ mb: 2 }}>\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ lineHeight: 1.6 }}>\n              This chart shows how your selected trading strategies (tags) perform on different days of the week.\n              {selectedMetric === 'winRate'\n                ? ' Higher bars indicate better win rates on those days. '\n                : ' Higher bars indicate better profitability on those days. '}\n              Click on any bar to see the specific trades for that day.\n            </Typography>\n            {chartData.some(data => data.totalTrades > 0) ? (\n              <Typography variant=\"body2\" color=\"primary\" sx={{ mt: 1, fontWeight: 500 }}>\n                {selectedMetric === 'winRate'\n                  ? `Best day for selected strategies: ${chartData.reduce((best, day) => day.totalTrades > 0 && day.winRate > best.winRate ? day : best, { winRate: 0, fullDay: 'None' }).fullDay}`\n                  : `Most profitable day: ${chartData.reduce((best, day) => day.totalTrades > 0 && day.pnl > best.pnl ? day : best, { pnl: -Infinity, fullDay: 'None' }).fullDay}`\n                }\n              </Typography>\n            ) : null}\n          </Box>\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <BarChart\n            data={chartData}\n            margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n            maxBarSize={50}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n            <XAxis\n              dataKey=\"day\"\n              axisLine={false}\n              tickLine={false}\n              tick={{ fill: theme.palette.text.secondary, fontSize: 12 }}\n            />\n            <YAxis\n              axisLine={false}\n              tickLine={false}\n              tick={{ fill: theme.palette.text.secondary, fontSize: 12 }}\n              domain={selectedMetric === 'winRate' ? [0, 100] : ['auto', 'auto']}\n              tickFormatter={selectedMetric === 'winRate'\n                ? (value) => `${value}%`\n                : (value) => formatCurrency(value).replace('$', '')}\n            />\n            <Tooltip content={<CustomTooltip />} />\n            <Legend />\n            <Bar\n              dataKey=\"value\"\n              name={selectedMetric === 'winRate' ? 'Win Rate' : 'P&L'}\n              fill={theme.palette.primary.main}\n              radius={[4, 4, 0, 0]}\n              onClick={(data) => {\n                if (data && data.payload) {\n                  const dayTrades = data.payload.trades;\n                  if (dayTrades.length > 0) {\n                    setMultipleTradesDialog({\n                      open: true,\n                      trades: dayTrades,\n                      date: `${selectedMetric === 'winRate' ? 'Win Rate' : 'P&L'} for ${data.payload.fullDay}`,\n                      expandedTradeId: dayTrades.length === 1 ? dayTrades[0].id : null\n                    });\n                  }\n                }\n              }}\n              style={{ cursor: 'pointer' }}\n            >\n              {chartData.map((entry, index) => (\n                <Cell key={`cell-${index}`} fill={entry.color} />\n              ))}\n            </Bar>\n          </BarChart>\n        </ResponsiveContainer>\n        </>\n      )}\n    </Box>\n  );\n};\n\nexport default TagDayOfWeekAnalysis;\n","import React from 'react';\nimport {\n  Paper,\n  Typography,\n  useTheme,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Box,\n  Tooltip\n} from '@mui/material';\nimport { alpha } from '@mui/material/styles';\nimport { InfoOutlined, TrendingUp, TrendingDown, TrendingFlat } from '@mui/icons-material';\nimport { format } from 'date-fns';\nimport { Trade } from '../../types/trade';\nimport { formatValue } from '../../utils/formatters';\nimport { scrollbarStyles } from '../../styles/scrollbarStyles';\n\ninterface DailySummaryTableProps {\n  dailySummaryData: any[];\n  trades: Trade[];\n  setMultipleTradesDialog: (dialogState: any) => void;\n}\n\nconst DailySummaryTable: React.FC<DailySummaryTableProps> = ({\n  dailySummaryData,\n  trades,\n  setMultipleTradesDialog\n}) => {\n  const theme = useTheme();\n\n  // Calculate total PnL from dailySummaryData\n  const totalPnL = React.useMemo(() => {\n    if (!dailySummaryData || dailySummaryData.length === 0) return 0;\n    return dailySummaryData.reduce((sum, day) => sum + day.pnl, 0);\n  }, [dailySummaryData]);\n\n  return (\n    <Paper sx={{ p: 3, borderRadius: 2, height: '100%', display: 'flex', flexDirection: 'column' }}>\n      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n          <Typography variant=\"h6\">Daily Summary</Typography>\n          <Tooltip\n            title=\"Daily trading summary showing trades, session, and P&L for each day\"\n            arrow\n            placement=\"top\"\n          >\n            <InfoOutlined sx={{ fontSize: 16, color: 'text.secondary', opacity: 0.7, cursor: 'help' }} />\n          </Tooltip>\n        </Box>\n        {dailySummaryData && dailySummaryData.length > 0 && (\n          <Box sx={{\n            display: 'flex',\n            alignItems: 'center',\n            gap: 1,\n            bgcolor: alpha(\n              totalPnL > 0\n                ? theme.palette.success.main\n                : totalPnL < 0\n                ? theme.palette.error.main\n                : theme.palette.grey[500],\n              0.1\n            ),\n            px: 1.5,\n            py: 0.5,\n            borderRadius: 2,\n            border: `1px solid ${alpha(\n              totalPnL > 0\n                ? theme.palette.success.main\n                : totalPnL < 0\n                ? theme.palette.error.main\n                : theme.palette.grey[500],\n              0.2\n            )}`,\n          }}>\n          {totalPnL > 0 ? (\n            <TrendingUp sx={{ color: theme.palette.success.main }} />\n          ) : totalPnL < 0 ? (\n            <TrendingDown sx={{ color: theme.palette.error.main }} />\n          ) : (\n            <TrendingFlat sx={{ color: theme.palette.grey[500] }} />\n          )}\n          <Typography\n            variant=\"subtitle1\"\n            sx={{\n              fontWeight: 600,\n              color: totalPnL > 0\n                ? theme.palette.success.main\n                : totalPnL < 0\n                ? theme.palette.error.main\n                : 'text.secondary'\n            }}\n          >\n            Total P&L: {formatValue(totalPnL)}\n          </Typography>\n        </Box>\n        )}\n      </Box>\n      <TableContainer sx={{\n        flex: 1,\n        overflow: 'auto',\n        ...scrollbarStyles(theme)\n      }}>\n        <Table stickyHeader size=\"small\">\n          <TableHead>\n            <TableRow>\n              <TableCell\n                sx={{\n                  fontWeight: 600,\n                  backgroundColor: theme.palette.background.paper,\n                  borderBottom: `2px solid ${theme.palette.divider}`,\n                  color: 'text.secondary'\n                }}\n              >\n                DATE\n              </TableCell>\n              <TableCell\n                align=\"right\"\n                sx={{\n                  fontWeight: 600,\n                  backgroundColor: theme.palette.background.paper,\n                  borderBottom: `2px solid ${theme.palette.divider}`,\n                  color: 'text.secondary'\n                }}\n              >\n                TRADES\n              </TableCell>\n              <TableCell\n                align=\"center\"\n                sx={{\n                  fontWeight: 600,\n                  backgroundColor: theme.palette.background.paper,\n                  borderBottom: `2px solid ${theme.palette.divider}`,\n                  color: 'text.secondary'\n                }}\n              >\n                SESSION\n              </TableCell>\n              <TableCell\n                align=\"right\"\n                sx={{\n                  fontWeight: 600,\n                  backgroundColor: theme.palette.background.paper,\n                  borderBottom: `2px solid ${theme.palette.divider}`,\n                  color: 'text.secondary'\n                }}\n              >\n                P/L\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {dailySummaryData.map((row) => (\n              <TableRow\n                key={format(row.date, 'yyyy-MM-dd')}\n                onClick={() => {\n                  const dayTrades = trades.filter(trade =>\n                    format(new Date(trade.date), 'yyyy-MM-dd') === format(row.date, 'yyyy-MM-dd')\n                  );\n                  if (dayTrades.length > 0) {\n                    setMultipleTradesDialog({\n                      open: true,\n                      trades: dayTrades,\n                      date: format(row.date, 'dd/MM/yyyy'),\n                      expandedTradeId: dayTrades.length === 1 ? dayTrades[0].id : null\n                    });\n                  }\n                }}\n                sx={{\n                  '&:last-child td, &:last-child th': { border: 0 },\n                  '&:hover': {\n                    backgroundColor: alpha(theme.palette.primary.main, 0.04),\n                    cursor: 'pointer'\n                  },\n                  bgcolor: row.pnl > 0\n                    ? alpha(theme.palette.success.main, 0.05)\n                    : row.pnl < 0\n                    ? alpha(theme.palette.error.main, 0.05)\n                    : 'transparent'\n                }}\n              >\n                <TableCell\n                  sx={{\n                    fontWeight: 500,\n                    color: 'text.primary'\n                  }}\n                >\n                  {format(row.date, 'dd/MM/yyyy')}\n                </TableCell>\n                <TableCell\n                  align=\"right\"\n                  sx={{\n                    fontWeight: 500,\n                    color: 'text.primary'\n                  }}\n                >\n                  {row.trades}\n                </TableCell>\n                <TableCell align=\"center\">\n                  {row.session ? (\n                    <Typography\n                      sx={{\n                        color: 'text.primary',\n                        fontWeight: 500\n                      }}\n                    >\n                      {row.session}\n                    </Typography>\n                  ) : (\n                    <Typography\n                      sx={{\n                        color: 'text.secondary',\n                        fontStyle: 'italic'\n                      }}\n                    >\n                      —\n                    </Typography>\n                  )}\n                </TableCell>\n                <TableCell\n                  align=\"right\"\n                  sx={{\n                    color: row.pnl > 0\n                      ? theme.palette.success.main\n                      : row.pnl < 0\n                      ? theme.palette.error.main\n                      : 'text.secondary',\n                    fontWeight: 600,\n                    fontSize: '0.875rem'\n                  }}\n                >\n                  {formatValue(row.pnl)}\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Paper>\n  );\n};\n\nexport default DailySummaryTable;\n","import React from 'react';\nimport { Box, Paper, Typography, useTheme, Stack, alpha } from '@mui/material';\nimport { isSameMonth } from 'date-fns';\nimport { Trade } from '../../types/trade';\nimport { formatValue } from '../../utils/formatters';\n\ninterface SessionPerformanceAnalysisProps {\n  sessionStats: any[];\n  trades: Trade[];\n  selectedDate: Date;\n  timePeriod: 'month' | 'year' | 'all';\n  setMultipleTradesDialog: (dialogState: any) => void;\n}\n\nconst SessionPerformanceAnalysis: React.FC<SessionPerformanceAnalysisProps> = ({\n  sessionStats,\n  trades,\n  selectedDate,\n  timePeriod,\n  setMultipleTradesDialog\n}) => {\n  const theme = useTheme();\n\n  // Define colors\n  const COLORS = {\n    win: '#4caf50',\n    loss: '#f44336',\n    zero: '#9e9e9e',\n    breakEven: '#ff9800'\n  };\n\n  // Define session-specific colors\n  const SESSION_COLORS = {\n    'Asia': '#2962ff',\n    'London': '#388e3c',\n    'NY AM': '#f57c00',\n    'NY PM': '#9c27b0'\n  };\n\n  return (\n    <Paper\n      elevation={theme.palette.mode === 'dark' ? 2 : 1}\n      sx={{\n        p: 3,\n        borderRadius: 2,\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        bgcolor: theme.palette.background.paper,\n      }}>\n      <Typography variant=\"h6\" sx={{ mb: 2 }}>\n        Session Performance\n      </Typography>\n      <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3, flex: 1, minHeight: 300 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'center', gap: 2, flexWrap: 'wrap' }}>\n          {sessionStats.map(session => (\n            <Paper\n              key={session.session}\n              sx={{\n                p: 2,\n                border: `1px solid ${alpha(\n                  SESSION_COLORS[session.session as keyof typeof SESSION_COLORS],\n                  0.3\n                )}`,\n                borderRadius: 2,\n                bgcolor: theme.palette.mode === 'dark' ? 'rgba(0, 0, 0, 0.2)' : 'rgba(0, 0, 0, 0.02)',\n                opacity: session.totalTrades === 0 ? 0.5 : 1,\n                cursor: session.totalTrades > 0 ? 'pointer' : 'default',\n                transition: 'all 0.2s',\n                '&:hover': {\n                  boxShadow: session.totalTrades > 0 ? theme.shadows[2] : 'none',\n                  bgcolor: session.totalTrades > 0 ? alpha(theme.palette.primary.main, 0.05) : theme.palette.mode === 'dark' ? 'rgba(0, 0, 0, 0.2)' : 'rgba(0, 0, 0, 0.02)'\n                }\n              }}\n              onClick={() => {\n                if (session.totalTrades > 0) {\n                  const sessionTrades = trades.filter(trade =>\n                    trade.session === session.session &&\n                    (timePeriod === 'month' ? isSameMonth(new Date(trade.date), selectedDate) :\n                     timePeriod === 'year' ? new Date(trade.date).getFullYear() === selectedDate.getFullYear() :\n                     true)\n                  );\n                  setMultipleTradesDialog({\n                    open: true,\n                    trades: sessionTrades,\n                    date: `${session.session} Session Trades`,\n                    expandedTradeId: sessionTrades.length === 1 ? sessionTrades[0].id : null\n                  });\n                }\n              }}\n            >\n              <Typography\n                variant=\"subtitle2\"\n                gutterBottom\n                sx={{ color: SESSION_COLORS[session.session as keyof typeof SESSION_COLORS] }}\n              >\n                {session.session}\n              </Typography>\n\n              <Stack spacing={1}>\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Total Trades\n                  </Typography>\n                  <Typography variant=\"body2\">\n                    {session.totalTrades}\n                  </Typography>\n                </Box>\n\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Win Rate\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    sx={{\n                      color: session.winRate >= 50 ? theme.palette.success.main : theme.palette.error.main\n                    }}\n                  >\n                    {session.winRate.toFixed(1)}%\n                  </Typography>\n                </Box>\n\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    P&L\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    sx={{\n                      color: session.totalPnL > 0 ? theme.palette.success.main : theme.palette.error.main,\n                      fontWeight: 500\n                    }}\n                  >\n                    {formatValue(session.totalPnL)}\n                  </Typography>\n                </Box>\n\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    Avg P&L per Trade\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    sx={{\n                      ml: 1,\n                      color: session.averagePnL > 0 ? theme.palette.success.main : theme.palette.error.main\n                    }}\n                  >\n                    {formatValue(session.averagePnL)}\n                  </Typography>\n                </Box>\n\n                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Account %\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    sx={{\n                      color: session.pnlPercentage > 0 ? theme.palette.success.main : theme.palette.error.main\n                    }}\n                  >\n                    {session.pnlPercentage.toFixed(2)}%\n                  </Typography>\n                </Box>\n\n                <Box sx={{ display: 'flex', gap: 1, mt: 1 }}>\n                  <Box\n                    sx={{\n                      flex: session.winners,\n                      height: 6,\n                      bgcolor: COLORS.win,\n                      borderRadius: 1\n                    }}\n                  />\n                  <Box\n                    sx={{\n                      flex: session.losers,\n                      height: 6,\n                      bgcolor: COLORS.loss,\n                      borderRadius: 1\n                    }}\n                  />\n                </Box>\n                <Box\n                  sx={{\n                    height: 3,\n                    bgcolor: alpha(SESSION_COLORS[session.session as keyof typeof SESSION_COLORS], 0.2),\n                    borderRadius: 1,\n                    mt: 1\n                  }}\n                />\n              </Stack>\n            </Paper>\n          ))}\n        </Box>\n\n        {/* Pro Tip Section */}\n        {sessionStats.some(session => session.totalTrades > 0) && (\n          <Box\n            sx={{\n              p: 2,\n              bgcolor: theme.palette.mode === 'dark' ? 'rgba(33, 150, 243, 0.1)' : 'rgba(33, 150, 243, 0.05)',\n              border: `1px solid ${alpha(theme.palette.info.main, 0.2)}`,\n              borderRadius: 2,\n              mt: 1\n            }}\n          >\n            <Typography\n              variant=\"subtitle2\"\n              sx={{\n                color: theme.palette.info.main,\n                fontWeight: 600,\n                mb: 1,\n                display: 'flex',\n                alignItems: 'center',\n                gap: 1\n              }}\n            >\n              💡 Pro Tip\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              {(() => {\n                const sessionsWithTrades = sessionStats.filter(session => session.totalTrades > 0);\n                if (sessionsWithTrades.length === 0) return \"No trading data available for analysis.\";\n\n                // Find most profitable session by total P&L\n                const mostProfitable = sessionsWithTrades.reduce((prev, current) =>\n                  current.totalPnL > prev.totalPnL ? current : prev\n                );\n\n                // Find session with highest win rate\n                const highestWinRate = sessionsWithTrades.reduce((prev, current) =>\n                  current.winRate > prev.winRate ? current : prev\n                );\n\n                // Find session with best average P&L per trade\n                const bestAverage = sessionsWithTrades.reduce((prev, current) =>\n                  current.averagePnL > prev.averagePnL ? current : prev\n                );\n\n                if (mostProfitable.totalPnL > 0) {\n                  if (mostProfitable.session === highestWinRate.session && mostProfitable.session === bestAverage.session) {\n                    return `${mostProfitable.session} session is your strongest performer with the highest total P&L (${formatValue(mostProfitable.totalPnL)}), best win rate (${mostProfitable.winRate.toFixed(1)}%), and highest average per trade (${formatValue(mostProfitable.averagePnL)}). Consider focusing more trades during this session.`;\n                  } else if (mostProfitable.session === highestWinRate.session) {\n                    return `${mostProfitable.session} session has both the highest total P&L (${formatValue(mostProfitable.totalPnL)}) and best win rate (${mostProfitable.winRate.toFixed(1)}%). ${bestAverage.session} session has the best average per trade (${formatValue(bestAverage.averagePnL)}).`;\n                  } else {\n                    return `${mostProfitable.session} session is most profitable overall (${formatValue(mostProfitable.totalPnL)}), while ${highestWinRate.session} session has the highest win rate (${highestWinRate.winRate.toFixed(1)}%). Consider analyzing what makes each session successful.`;\n                  }\n                } else {\n                  const leastLosing = sessionsWithTrades.reduce((prev, current) =>\n                    current.totalPnL > prev.totalPnL ? current : prev\n                  );\n                  return `All sessions are currently showing losses. ${leastLosing.session} session has the smallest loss (${formatValue(leastLosing.totalPnL)}). Consider reviewing your strategy and risk management.`;\n                }\n              })()}\n            </Typography>\n          </Box>\n        )}\n\n      </Box>\n    </Paper>\n  );\n};\n\nexport default SessionPerformanceAnalysis;\n","import React from 'react';\r\nimport {\r\n  Typography,\r\n  Box,\r\n  Button,\r\n  Tooltip\r\n} from '@mui/material';\r\nimport {\r\n  ViewCarousel as GalleryIcon\r\n} from '@mui/icons-material';\r\nimport { Trade } from '../../types/trade';\r\nimport TradeList from '../trades/TradeList';\r\nimport { BaseDialog } from '../common';\r\nimport DayHeader from '../trades/DayHeader';\r\nimport { calculateCumulativePnL, startOfNextDay } from '../trades/TradeFormDialog';\r\n\r\ninterface TradesDialogProps {\r\n  open: boolean;\r\n  trades: Trade[];\r\n  date: string;\r\n  expandedTradeId: string | null;\r\n  onClose: () => void;\r\n  onTradeExpand: (tradeId: string) => void;\r\n onUpdateTradeProperty?: (tradeId: string, updateCallback: (trade: Trade) => Trade) => Promise<Trade | undefined>;\r\n  onZoomImage: (imageUrl: string, allImages?: string[], initialIndex?: number) => void;\r\n  accountBalance: number;\r\n  allTrades: Trade[];\r\n  onEditClick?: (trade: Trade) => void;\r\n  onDeleteClick?: (tradeId: string) => void;\r\n  onDeleteMultiple?: (tradeIds: string[]) => void;\r\n  onOpenGalleryMode?: (trades: Trade[], initialTradeId?: string, title?: string) => void;\r\n  calendarId?: string;\r\n}\r\n\r\nconst TradesListDialog: React.FC<TradesDialogProps> = ({\r\n  open,\r\n  trades,\r\n  date,\r\n  expandedTradeId,\r\n  onClose,\r\n  onTradeExpand,\r\n  onZoomImage,\r\n  accountBalance,\r\n  allTrades,\r\n  onUpdateTradeProperty,\r\n  onEditClick,\r\n  onDeleteClick,\r\n  onDeleteMultiple,\r\n  onOpenGalleryMode,\r\n  calendarId\r\n}) => {\r\n\r\n  // Gallery mode handler\r\n  const handleGalleryModeClick = () => {\r\n    if (onOpenGalleryMode && trades.length > 0) {\r\n      const title = `${date} - ${trades.length} Trade${trades.length > 1 ? 's' : ''}`;\r\n      onOpenGalleryMode(trades, expandedTradeId || trades[0].id, title);\r\n      onClose(); // Close the dialog when opening gallery mode\r\n    }\r\n  };\r\n\r\n  // Calculate total PnL from trades\r\n  const totalPnL = React.useMemo(() => {\r\n    return trades.reduce((sum, trade) => sum + trade.amount, 0);\r\n  }, [trades]);\r\n  const dialogTitle = (\r\n    <Typography variant=\"h6\">\r\n      {trades.length} {trades.length === 1 ? 'Trade' : 'Trades'} for {date}\r\n    </Typography>\r\n  );\r\n\r\n  // Custom actions for the dialog\r\n  const dialogActions = onOpenGalleryMode && trades.length > 0 ? (\r\n    <Tooltip title=\"View trades in gallery mode\">\r\n      <Button\r\n        variant=\"contained\"\r\n        size=\"large\"\r\n        startIcon={<GalleryIcon />}\r\n        onClick={handleGalleryModeClick}\r\n        sx={{\r\n          textTransform: 'none',\r\n          fontWeight: 600,\r\n          borderRadius: 1.5,\r\n          px: 3\r\n        }}\r\n      >\r\n        Gallery View\r\n      </Button>\r\n    </Tooltip>\r\n  ) : undefined;\r\n\r\n  return (\r\n    <BaseDialog\r\n      open={open}\r\n      onClose={onClose}\r\n      maxWidth=\"sm\"\r\n      fullWidth\r\n      title={dialogTitle}\r\n      actions={dialogActions}\r\n    >\r\n      <Box sx={{ p: 2 }}>\r\n        {/* DayHeader with navigation buttons hidden */}\r\n        <DayHeader\r\n          title={''}\r\n          accountBalance={accountBalance + calculateCumulativePnL(startOfNextDay(date), allTrades)}\r\n          formInputVisible={true} // Set to true to hide navigation buttons\r\n          totalPnL={totalPnL}\r\n          onPrevDay={() => { }} // Empty function since we're hiding the buttons\r\n          onNextDay={() => { }} // Empty function since we're hiding the buttons\r\n        />\r\n\r\n        <TradeList\r\n          sx={{ mt: 0 }}\r\n          trades={trades}\r\n          expandedTradeId={expandedTradeId}\r\n          onTradeClick={onTradeExpand}\r\n          onEditClick={onEditClick || (() => { })} // Use provided handler or no-op\r\n          onDeleteClick={onDeleteClick || (() => { })} // Use provided handler or no-op\r\n          onDeleteMultiple={onDeleteMultiple}\r\n          onZoomedImage={onZoomImage}\r\n          onUpdateTradeProperty={onUpdateTradeProperty}\r\n          hideActions={!onEditClick && !onDeleteClick} // Hide actions only if both handlers are not provided\r\n          enableBulkSelection={trades.length > 1 && !!onDeleteMultiple} // Enable bulk selection when there are multiple trades and handler is provided\r\n          calendarId={calendarId}\r\n          onOpenGalleryMode={onOpenGalleryMode}\r\n        />\r\n      </Box>\r\n    </BaseDialog>\r\n  );\r\n};\r\n\r\nexport default TradesListDialog;\r\n","import React from 'react';\nimport {\n  AreaChart,\n  Area,\n  ResponsiveContainer\n} from 'recharts';\nimport { Box, Paper, Typography, useTheme, Tooltip } from '@mui/material';\nimport { InfoOutlined } from '@mui/icons-material';\n\ninterface RiskRewardChartProps {\n  riskRewardStats: {\n    average: number;\n    max: number;\n    data: Array<{\n      date: string;\n      rr: number;\n    }>;\n  };\n}\n\nconst RiskRewardChart: React.FC<RiskRewardChartProps> = ({ riskRewardStats }) => {\n  const theme = useTheme();\n\n  if (riskRewardStats.data.length === 0) {\n    return null;\n  }\n\n  return (\n    <Paper\n      sx={{\n        p: 2,\n        mb: 2,\n        borderRadius: 2\n      }}\n    >\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>\n        <Box>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5, mb: 0.5 }}>\n            <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\n              Average RR\n            </Typography>\n            <Tooltip\n              title=\"Average Risk to reward ratio (RR) per trade. An RR of 2 means that for every 1$ you risk you will make 2$.\"\n              arrow\n              placement=\"top\"\n            >\n              <InfoOutlined sx={{ fontSize: 16, color: 'text.secondary', opacity: 0.7, cursor: 'help' }} />\n            </Tooltip>\n          </Box>\n          <Typography variant=\"h4\" sx={{ fontWeight: 500, color: 'text.primary' }}>\n            {riskRewardStats.average.toFixed(2)}\n          </Typography>\n        </Box>\n        <Box>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5, mb: 0.5 }}>\n            <Typography variant=\"body2\" sx={{ color: 'text.secondary' }}>\n              Max RR\n            </Typography>\n            <Tooltip\n              title=\"Maximum Risk to reward Ratio between all your trades. You can use the small graph at the bottom of this card to see the RR of every one of your trades.\"\n              arrow\n              placement=\"top\"\n            >\n              <InfoOutlined sx={{ fontSize: 16, color: 'text.secondary', opacity: 0.7, cursor: 'help' }} />\n            </Tooltip>\n          </Box>\n          <Typography variant=\"h4\" sx={{ fontWeight: 500, color: 'text.primary' }}>\n            {riskRewardStats.max.toFixed(2)}\n          </Typography>\n        </Box>\n      </Box>\n\n      {/* RR Trend Line Graph */}\n      <Box sx={{ height: 60, mt: 2 }}>\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <AreaChart data={riskRewardStats.data} margin={{ top: 0, right: 0, left: 0, bottom: 0 }}>\n            <defs>\n              <linearGradient id=\"rrGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop offset=\"5%\" stopColor={theme.palette.primary.main} stopOpacity={0.3} />\n                <stop offset=\"95%\" stopColor={theme.palette.primary.main} stopOpacity={0} />\n              </linearGradient>\n            </defs>\n            <Area\n              type=\"monotone\"\n              dataKey=\"rr\"\n              stroke={theme.palette.primary.main}\n              strokeWidth={2}\n              fill=\"url(#rrGradient)\"\n              dot={false}\n            />\n          </AreaChart>\n        </ResponsiveContainer>\n      </Box>\n    </Paper>\n  );\n};\n\nexport default RiskRewardChart;\n","/**\r\n * Format a numeric value as currency\r\n * @param amount The amount to format\r\n * @returns Formatted currency string\r\n */\r\nexport const formatValue = (amount: number): string => {\r\n  const absAmount = Math.abs(amount);\r\n  if (absAmount >= 1000) {\r\n    return `$${(amount / 1000).toFixed(1)}k`;\r\n  }\r\n  return `$${amount.toFixed(2)}`;\r\n};\r\n\r\n/**\r\n * Format a numeric value as currency with full precision\r\n * @param amount The amount to format\r\n * @returns Formatted currency string\r\n */\r\nexport const formatCurrency = (amount: number): string => {\r\n  return `$${amount.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\r\n};\r\n\r\n/**\r\n * Format a percentage value\r\n * @param value The percentage value to format\r\n * @param decimals Number of decimal places\r\n * @returns Formatted percentage string\r\n */\r\nexport const formatPercentage = (value: number, decimals: number = 1): string => {\r\n  return `${value.toFixed(decimals)}%`;\r\n};\r\n\r\n/**\r\n * Format a date in a consistent way\r\n * @param date The date to format\r\n * @param format The format to use (short, medium, long)\r\n * @returns Formatted date string\r\n */\r\nexport const formatDate = (date: Date, format: 'short' | 'medium' | 'long' = 'medium'): string => {\r\n  switch (format) {\r\n    case 'short':\r\n      return date.toLocaleDateString(undefined, { month: 'numeric', day: 'numeric' });\r\n    case 'medium':\r\n      return date.toLocaleDateString(undefined, { month: 'short', day: 'numeric', year: 'numeric' });\r\n    case 'long':\r\n      return date.toLocaleDateString(undefined, { month: 'long', day: 'numeric', year: 'numeric' });\r\n    default:\r\n      return date.toLocaleDateString();\r\n  }\r\n};\r\n","import React, { useState } from 'react';\nimport {\n  Box,\n  Typography,\n  IconButton,\n  Chip,\n  Stack,\n  Tooltip,\n  SxProps,\n  Theme,\n  CircularProgress,\n  Checkbox,\n  Button\n} from '@mui/material';\nimport {\n  Edit as EditIcon,\n  Delete as DeleteIcon,\n  ExpandMore as ExpandIcon,\n  ExpandLess as CollapseIcon,\n  Image as ImageIcon,\n  Note as NoteIcon,\n  Balance as RiskIcon,\n  Schedule as SessionIcon,\n  SelectAll as SelectAllIcon,\n  DeleteSweep as DeleteMultipleIcon\n} from '@mui/icons-material';\nimport { Trade } from '../../types/trade';\nimport { TradeListItem, TradeInfo, TradeActions } from '../StyledComponents';\nimport { getTagChipStyles, formatTagForDisplay, isGroupedTag, getTagGroup } from '../../utils/tagColors';\nimport { useTheme } from '@mui/material/styles';\nimport TradeDetailExpanded from '../TradeDetailExpanded';\n\ninterface TradeListProps {\n  trades: Trade[];\n  expandedTradeId: string | null;\n  onTradeClick: (tradeId: string) => void;\n  onEditClick: (trade: Trade) => void;\n  onDeleteClick: (tradeId: string) => void;\n  onDeleteMultiple?: (tradeIds: string[]) => void; // New prop for bulk deletion\n  onZoomedImage: (url: string, allImages?: string[], initialIndex?: number) => void;\n  onUpdateTradeProperty?: (tradeId: string, updateCallback: (trade: Trade) => Trade) => Promise<Trade | undefined>;\n  hideActions?: boolean; // New prop to hide edit/delete buttons\n  enableBulkSelection?: boolean; // New prop to enable bulk selection\n  sx?: SxProps<Theme>; // Allow styling from parent component\n  deletingTradeIds?: string[]; // IDs of trades currently being deleted\n  calendarId?: string; // Calendar ID for sharing functionality\n  // Optional props for trade link navigation in notes\n  onOpenGalleryMode?: (trades: any[], initialTradeId?: string, title?: string) => void;\n}\n\n\n\nconst TradeList: React.FC<TradeListProps> = ({\n  trades,\n  expandedTradeId,\n  onTradeClick,\n  onEditClick,\n  onDeleteClick,\n  onDeleteMultiple,\n  onZoomedImage,\n  onUpdateTradeProperty,\n  hideActions = false, // Default to showing actions\n  enableBulkSelection = false, // Default to disabled\n  sx,\n  deletingTradeIds = [],\n  calendarId,\n  onOpenGalleryMode\n}) => {\n  const theme = useTheme();\n  const [selectedTradeIds, setSelectedTradeIds] = useState<string[]>([]);\n\n  // Helper function to check if a trade is being deleted\n  const isTradeBeingDeleted = (tradeId: string) => deletingTradeIds.includes(tradeId);\n\n  // Helper function to check if a trade is selected\n  const isTradeSelected = (tradeId: string) => selectedTradeIds.includes(tradeId);\n\n  // Handle individual trade selection\n  const handleTradeSelection = (tradeId: string, selected: boolean) => {\n    if (selected) {\n      setSelectedTradeIds(prev => [...prev, tradeId]);\n    } else {\n      setSelectedTradeIds(prev => prev.filter(id => id !== tradeId));\n    }\n  };\n\n  // Handle select all/none\n  const handleSelectAll = () => {\n    if (selectedTradeIds.length === trades.length) {\n      setSelectedTradeIds([]);\n    } else {\n      setSelectedTradeIds(trades.map(trade => trade.id));\n    }\n  };\n\n  // Handle bulk delete\n  const handleBulkDelete = () => {\n    if (onDeleteMultiple && selectedTradeIds.length > 0) {\n      onDeleteMultiple(selectedTradeIds);\n      setSelectedTradeIds([]);\n    }\n  };\n\n  return (\n    <Box sx={{ mt: 2, ...sx }}>\n      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 1 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n          <Typography variant=\"subtitle1\" sx={{ mr: 1 }}>\n            Trades\n          </Typography>\n          {trades.length > 0 && (\n            <Chip\n              label={trades.length}\n              size=\"small\"\n              color=\"primary\"\n              sx={{\n                height: 20,\n                minWidth: 40,\n                '& .MuiChip-label': { px: 1, fontSize: '0.75rem', color: 'primary.main' },\n                background: 'none',\n                border: '2px dotted',\n                borderColor: 'primary.main'\n              }}\n            />\n          )}\n          {enableBulkSelection && selectedTradeIds.length > 0 && (\n            <Chip\n              label={`${selectedTradeIds.length} selected`}\n              size=\"small\"\n              color=\"secondary\"\n              sx={{\n                height: 20,\n                ml: 1,\n                '& .MuiChip-label': { px: 1, fontSize: '0.75rem' }\n              }}\n            />\n          )}\n        </Box>\n\n        {enableBulkSelection && trades.length > 0 && (\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            <Button\n              size=\"small\"\n              startIcon={<SelectAllIcon />}\n              onClick={handleSelectAll}\n              sx={{ minWidth: 'auto', fontSize: '0.75rem' }}\n            >\n              {selectedTradeIds.length === trades.length ? 'None' : 'All'}\n            </Button>\n            {selectedTradeIds.length > 0 && (\n              <Button\n                size=\"small\"\n                color=\"error\"\n                startIcon={<DeleteMultipleIcon />}\n                onClick={handleBulkDelete}\n                sx={{ minWidth: 'auto', fontSize: '0.75rem' }}\n              >\n                Delete ({selectedTradeIds.length})\n              </Button>\n            )}\n          </Box>\n        )}\n      </Box>\n\n      {trades.length === 0 ? (\n        <Typography variant=\"body2\" color=\"text.secondary\" sx={{ fontStyle: 'italic' }}>\n          No trades for this day\n        </Typography>\n      ) : (\n        <Stack spacing={1}>\n          {trades.map((trade) => (\n            <React.Fragment key={trade.id}>\n              <TradeListItem\n                $type={trade.type}\n                onClick={isTradeBeingDeleted(trade.id) ? undefined : () => onTradeClick(trade.id)}\n                sx={{\n                  cursor: isTradeBeingDeleted(trade.id) ? 'default' : 'pointer',\n                  ...(trade.isTemporary && {\n                    opacity: 0.7,\n                    border: '1px dashed',\n                    borderColor: 'divider',\n                    backgroundColor: theme => theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.02)'\n                  }),\n                  ...(isTradeBeingDeleted(trade.id) && {\n                    opacity: 0.6,\n                    pointerEvents: 'none'\n                  }),\n                  ...(enableBulkSelection && isTradeSelected(trade.id) && {\n                    backgroundColor: theme => theme.palette.mode === 'dark'\n                      ? 'rgba(144, 202, 249, 0.08)'\n                      : 'rgba(25, 118, 210, 0.08)',\n                    borderColor: 'primary.main'\n                  })\n                }}\n              >\n                {enableBulkSelection && (\n                  <Box\n                    sx={{ mr: 1, display: 'flex', alignItems: 'flex-start', pt: 0.5 }}\n                    onClick={(e) => e.stopPropagation()} // Prevent event bubbling to parent\n                  >\n                    <Checkbox\n                      size=\"small\"\n                      checked={isTradeSelected(trade.id)}\n                      onChange={(e) => {\n                        e.stopPropagation();\n                        handleTradeSelection(trade.id, e.target.checked);\n                      }}\n                      onClick={(e) => e.stopPropagation()} // Additional protection\n                      disabled={isTradeBeingDeleted(trade.id)}\n                      sx={{ p: 0.5 }}\n                    />\n                  </Box>\n                )}\n                <TradeInfo>\n                  <Box sx={{ display: 'flex', alignItems: 'flex-start', gap: 0.5, justifyContent: 'space-between' }}>\n                    <Box sx={{ display: 'flex', flexDirection: 'column' }}>\n                      {trade.name && (\n                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                          <Typography variant=\"body2\" sx={{ fontWeight: 600 }}>\n                            {trade.isTemporary ? trade.name : `📈 ${trade.name.replace(/^📈 /, '')}`}\n                          </Typography>\n\n                        </Box>\n                      )}\n                      <Typography variant=\"body1\" sx={{\n                        fontWeight: 500,\n                        color: trade.type === 'win'\n                          ? 'success.main'\n                          : trade.type === 'loss'\n                            ? 'error.main'\n                            : 'info.main'\n                      }}>\n                        ${Math.abs(trade.amount).toLocaleString()}\n                      </Typography>\n                      <Box sx={{ display: 'flex', flexDirection: 'row', gap: 1.5, alignItems: 'center', mt: 0.5, flexWrap: 'wrap' }}>\n                        {trade.images && trade.images.length > 0 && (\n                          <Tooltip title={`${trade.images.length} image${trade.images.length > 1 ? 's' : ''}`}>\n                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                              <ImageIcon\n                                fontSize=\"small\"\n                                sx={{\n                                  opacity: 0.8,\n                                  fontSize: '1rem',\n                                  verticalAlign: 'middle',\n                                  color: theme.palette.primary.main\n                                }}\n                              />\n                            </Box>\n                          </Tooltip>\n                        )}\n\n                        {trade.notes && (\n                          <Tooltip title={trade.notes}>\n                            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n                              <NoteIcon\n                                fontSize=\"small\"\n                                sx={{\n                                  opacity: 0.8,\n                                  fontSize: '1rem',\n                                  verticalAlign: 'middle',\n                                  color: theme.palette.info.main\n                                }}\n                              />\n                            </Box>\n                          </Tooltip>\n                        )}\n\n                        {trade.riskToReward && (\n                          <Tooltip title={`Risk to Reward: ${trade.riskToReward}`}>\n                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                              <RiskIcon\n                                fontSize=\"small\"\n                                sx={{\n                                  opacity: 0.8,\n                                  fontSize: '1rem',\n                                  verticalAlign: 'middle',\n                                  color: theme.palette.warning.main\n                                }}\n                              />\n                              <Typography variant=\"caption\" sx={{\n                                fontSize: '0.7rem',\n                                color: 'text.secondary',\n                                fontWeight: 500,\n                                bgcolor: theme => theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.04)',\n                                px: 0.5,\n                                py: 0.2,\n                                borderRadius: 0.5\n                              }}>\n                                {trade.riskToReward}R\n                              </Typography>\n                            </Box>\n                          </Tooltip>\n                        )}\n\n                        {trade.session && (\n                          <Tooltip title={`Session: ${trade.session}`}>\n                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                              <SessionIcon\n                                fontSize=\"small\"\n                                sx={{\n                                  opacity: 0.8,\n                                  fontSize: '1rem',\n                                  verticalAlign: 'middle',\n                                  color: theme.palette.secondary.main\n                                }}\n                              />\n                              <Typography variant=\"caption\" sx={{\n                                fontSize: '0.7rem',\n                                color: 'text.secondary',\n                                fontWeight: 500,\n                                bgcolor: theme => theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.04)',\n                                px: 0.5,\n                                py: 0.2,\n                                borderRadius: 0.5\n                              }}>\n                                {trade.session}\n                              </Typography>\n                            </Box>\n                          </Tooltip>\n                        )}\n                      </Box>\n                    </Box>\n\n                  </Box>\n\n                  {trade.tags && trade.tags.length > 0 && (() => {\n                    // Filter out Partials tags\n                    const filteredTags = trade.tags.filter(tag => !tag.startsWith('Partials:'));\n\n                    // Group tags by their group name\n                    const tagGroups: Record<string, string[]> = {};\n                    const ungroupedTags: string[] = [];\n\n                    filteredTags.forEach(tag => {\n                      if (isGroupedTag(tag)) {\n                        const group = getTagGroup(tag);\n                        if (!tagGroups[group]) {\n                          tagGroups[group] = [];\n                        }\n                        tagGroups[group].push(tag);\n                      } else {\n                        ungroupedTags.push(tag);\n                      }\n                    });\n\n                    return (\n                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, mt: 1 }}>\n                        {/* Display one chip per group with tooltip */}\n                        {Object.entries(tagGroups).map(([group, groupTags]) => (\n                          <Tooltip\n                            key={group}\n                            title={\n                              <Box sx={{ p: 0.5 }}>\n                                {groupTags.map(tag => (\n                                  <Typography key={tag} variant=\"body2\">\n                                    {formatTagForDisplay(tag,true)}\n                                  </Typography>\n                                ))}\n                              </Box>\n                            }\n                            arrow\n                          >\n                            <Chip\n                              label={group}\n                              size=\"small\"\n                              sx={{\n                                ...getTagChipStyles(groupTags[0], theme),\n                                height: '20px',\n                                fontWeight: 600,\n                                '& .MuiChip-label': {\n                                  px: 1,\n                                  fontSize: '0.7rem'\n                                }\n                              }}\n                            />\n                          </Tooltip>\n                        ))}\n\n                        {/* Display ungrouped tags normally */}\n                        {ungroupedTags.map((tag, tagIndex) => (\n                          <Chip\n                            key={tagIndex}\n                            label={formatTagForDisplay(tag)}\n                            size=\"small\"\n                            sx={{\n                              ...getTagChipStyles(tag, theme),\n                              height: '20px',\n                              '& .MuiChip-label': {\n                                px: 1,\n                                fontSize: '0.7rem'\n                              }\n                            }}\n                          />\n                        ))}\n                      </Box>\n                    );\n                  })()}\n                  <Box sx={{ flex: 1, display: 'flex', justifyContent: 'flex-end',  }}>\n                    {!isTradeBeingDeleted(trade.id) && (\n                      <Box sx={{ mt: 0.5, mr: 1 }}>\n                        {expandedTradeId === trade.id ?\n                          <CollapseIcon fontSize=\"small\" sx={{ color: 'text.secondary' }} /> :\n                          <ExpandIcon fontSize=\"small\" sx={{ color: 'text.secondary' }} />\n                        }\n                      </Box>\n                    )}\n                  </Box>\n                </TradeInfo>\n\n                {!hideActions && (\n                  <TradeActions>\n                    {!isTradeBeingDeleted(trade.id) && (\n                      <IconButton\n                        size=\"small\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          onEditClick(trade);\n                        }}\n                      >\n                        <EditIcon fontSize=\"small\" />\n                      </IconButton>\n                    )}\n                    <IconButton\n                      size=\"small\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        onDeleteClick(trade.id);\n                      }}\n                      disabled={isTradeBeingDeleted(trade.id)}\n                      sx={{\n                        position: 'relative',\n                        ...(isTradeBeingDeleted(trade.id) && {\n                          '&.Mui-disabled': {\n                            color: 'error.main',\n                            opacity: 0.7\n                          }\n                        })\n                      }}\n                    >\n                      {isTradeBeingDeleted(trade.id) ? (\n                        <CircularProgress\n                          size={16}\n                          color=\"error\" \n                        />\n                      ) : (\n                        <DeleteIcon fontSize=\"small\" />\n                      )}\n                    </IconButton>\n                  </TradeActions>\n                )}\n              </TradeListItem>\n\n              {expandedTradeId === trade.id && (\n                <TradeDetailExpanded\n                  tradeData={trade}\n                  isExpanded={true}\n                  setZoomedImage={onZoomedImage}\n                  onUpdateTradeProperty={onUpdateTradeProperty}\n                  calendarId={calendarId}\n                  trades={trades}\n                  onOpenGalleryMode={onOpenGalleryMode}\n                />\n              )}\n            </React.Fragment>\n          ))}\n        </Stack>\n      )}\n    </Box>\n  );\n};\n\nexport default TradeList;\n","import { Trade } from '../types/trade';\nimport { TradingPattern, ScoreSettings } from '../types/score';\nimport {\n  calculateWinRate,\n  calculateProfitFactor\n} from './statsUtils';\nimport {\n  getDay,\n  subDays\n} from 'date-fns';\nimport {\n  DynamicRiskSettings,\n  normalizeTradeAmount\n} from './dynamicRiskUtils';\n\n/**\n * Default scoring settings\n */\nexport const DEFAULT_SCORE_SETTINGS: ScoreSettings = {\n  weights: {\n    consistency: 40,\n    riskManagement: 25,\n    performance: 20,\n    discipline: 15\n  },\n  thresholds: {\n    minTradesForScore: 3,\n    lookbackPeriod: 30,\n    consistencyTolerance: 15\n  },\n  targets: {\n    winRate: 60,\n    profitFactor: 1.5,\n    maxDrawdown: 5,\n    avgRiskReward: 2.0\n  },\n  selectedTags: [],\n  excludedTagsFromPatterns: []\n};\n\n/**\n * Calculate recommended score based on user's targets and settings\n * This provides a target score that represents good trading performance\n */\nexport const calculateRecommendedScore = (settings: ScoreSettings): number => {\n  // Base score calculation based on targets\n  // These are reasonable benchmarks for each component\n\n  // Consistency: 75% is a good target for following patterns\n  const consistencyTarget = 75;\n\n  // Risk Management: Based on targets, calculate expected score\n  const riskMgmtTarget = Math.min(85,\n    // Win rate factor (60% target = 75 points, 70% = 85 points)\n    (settings.targets.winRate / 60) * 75 +\n    // Risk/reward factor (2.0 target = 10 points)\n    Math.min(10, (settings.targets.avgRiskReward / 2.0) * 10)\n  );\n\n  // Performance: Based on profit factor and win rate targets\n  const performanceTarget = Math.min(80,\n    // Profit factor contribution (1.5 target = 60 points, 2.0 = 80 points)\n    Math.min(60, (settings.targets.profitFactor / 1.5) * 60) +\n    // Win rate contribution (60% = 20 points)\n    Math.min(20, (settings.targets.winRate / 60) * 20)\n  );\n\n  // Discipline: 70% is a reasonable target for discipline metrics\n  const disciplineTarget = 70;\n\n  // Calculate weighted recommended score\n  const recommendedScore = (\n    (consistencyTarget * settings.weights.consistency) +\n    (riskMgmtTarget * settings.weights.riskManagement) +\n    (performanceTarget * settings.weights.performance) +\n    (disciplineTarget * settings.weights.discipline)\n  ) / 100;\n\n  // Ensure the score is between 50-90 (reasonable range)\n  return Math.max(50, Math.min(90, recommendedScore));\n};\n\n\n\n/**\n * Calculate trading pattern from historical trades\n */\nexport const calculateTradingPattern = (\n  targetDate: Date,\n  trades: Trade[],\n  lookbackDays: number = 30,\n  selectedTags?: string[],\n  dynamicRiskSettings?: DynamicRiskSettings\n): TradingPattern => {\n  if (trades.length === 0) {\n    return {\n      preferredSessions: [],\n      commonTags: [],\n      avgTradesPerDay: 0,\n      avgTradesPerWeek: 0,\n      avgPositionSize: 0,\n      avgRiskReward: 0,\n      winRate: 0,\n      profitFactor: 0,\n      maxDrawdown: 0,\n      tradingDays: []\n    };\n  }\n\n  const cutoffDate = subDays(targetDate, lookbackDays);\n  const recentTrades = trades.filter(trade => new Date(trade.date) >= cutoffDate);\n\n  // Calculate session preferences\n  const sessionCounts = recentTrades.reduce((acc, trade) => {\n    if (trade.session) {\n      acc[trade.session] = (acc[trade.session] || 0) + 1;\n    }\n    return acc;\n  }, {} as Record<string, number>); \n\n  const preferredSessions = Object.entries(sessionCounts)\n    .sort(([,a], [,b]) => b - a)\n    .slice(0, 2)\n    .map(([session]) => session);\n\n  // Calculate common tags (only from selected tags if provided)\n  const tagCounts = recentTrades.reduce((acc, trade) => {\n    if (trade.tags) {\n      trade.tags.forEach(tag => {\n        // Only count tags that are in selectedTags (if provided), otherwise count all tags\n        if (!selectedTags || selectedTags.length === 0 || selectedTags.includes(tag)) {\n          acc[tag] = (acc[tag] || 0) + 1;\n        }\n      });\n    }\n    return acc;\n  }, {} as Record<string, number>);\n\n  const commonTags = Object.entries(tagCounts)\n    .sort(([,a], [,b]) => b - a)\n    .slice(0, 5)\n    .map(([tag]) => tag);\n\n  // Calculate trading frequency\n  const tradingDays = lookbackDays;\n  const avgTradesPerDay = recentTrades.length / tradingDays;\n  const avgTradesPerWeek = avgTradesPerDay * 7;\n\n  // Calculate average position size (normalized for dynamic risk if settings provided)\n  const avgPositionSize = recentTrades.length > 0\n    ? dynamicRiskSettings\n      ? recentTrades.reduce((sum, trade) => sum + normalizeTradeAmount(trade, trades, dynamicRiskSettings), 0) / recentTrades.length\n      : Math.abs(recentTrades.reduce((sum, trade) => sum + trade.amount, 0)) / recentTrades.length\n    : 0;\n\n  // Calculate average risk/reward\n  const riskRewardTrades = recentTrades.filter(trade => trade.riskToReward && trade.riskToReward > 0);\n  const avgRiskReward = riskRewardTrades.length > 0\n    ? riskRewardTrades.reduce((sum, trade) => sum + (trade.riskToReward || 0), 0) / riskRewardTrades.length\n    : 0;\n\n  // Calculate performance metrics\n  const winRate = calculateWinRate(recentTrades);\n\n  // Calculate profit factor with dynamic risk normalization if available\n  const profitFactor = dynamicRiskSettings\n    ? (() => {\n        const normalizedTrades = recentTrades.map(trade => ({\n          ...trade,\n          amount: normalizeTradeAmount(trade, trades, dynamicRiskSettings)\n        }));\n        return calculateProfitFactor(normalizedTrades);\n      })()\n    : calculateProfitFactor(recentTrades);\n\n  // Calculate max drawdown (normalized for dynamic risk if settings provided)\n  let maxDrawdown = 0;\n  let peak = 0;\n  let runningPnL = 0;\n\n  recentTrades.forEach(trade => {\n    const tradeAmount = dynamicRiskSettings\n      ? normalizeTradeAmount(trade, trades, dynamicRiskSettings)\n      : trade.amount;\n    runningPnL += tradeAmount;\n    if (runningPnL > peak) {\n      peak = runningPnL;\n    }\n    const drawdown = ((peak - runningPnL) / Math.max(peak, 1)) * 100;\n    if (drawdown > maxDrawdown) {\n      maxDrawdown = drawdown;\n    }\n  });\n\n  // Calculate preferred trading days\n  const dayOfWeekCounts = recentTrades.reduce((acc, trade) => {\n    const dayOfWeek = getDay(new Date(trade.date));\n    acc[dayOfWeek] = (acc[dayOfWeek] || 0) + 1;\n    return acc;\n  }, {} as Record<number, number>);\n\n  const tradingDaysArray = Object.entries(dayOfWeekCounts)\n    .filter(([, count]) => count >= avgTradesPerDay * 0.5) // Days with significant trading activity\n    .map(([day]) => parseInt(day))\n    .sort((a, b) => a - b);\n\n  return {\n    preferredSessions,\n    commonTags,\n    avgTradesPerDay,\n    avgTradesPerWeek,\n    avgPositionSize,\n    avgRiskReward,\n    winRate,\n    profitFactor,\n    maxDrawdown,\n    tradingDays: tradingDaysArray\n  };\n};\n\n/**\n * Calculate consistency score based on adherence to trading pattern\n */\nexport const calculateConsistencyScore = (\n  trades: Trade[],\n  pattern: TradingPattern,\n  settings: ScoreSettings,\n  allTrades?: Trade[],\n  dynamicRiskSettings?: DynamicRiskSettings\n): { score: number; factors: any } => {\n  if (trades.length < settings.thresholds.minTradesForScore) {\n    return {\n      score: 0,\n      factors: {\n        sessionConsistency: 0,\n        tagConsistency: 0,\n        timingConsistency: 0,\n        sizeConsistency: 0\n      }\n    };\n  }\n\n  // Session consistency\n  const sessionTrades = trades.filter(trade => trade.session);\n  const sessionConsistency = sessionTrades.length > 0 && pattern.preferredSessions.length > 0\n    ? (sessionTrades.filter(trade => pattern.preferredSessions.includes(trade.session!)).length / sessionTrades.length) * 100\n    : 50;\n\n  // Tag consistency\n  const tagTrades = trades.filter(trade => trade.tags && trade.tags.length > 0);\n  const tagConsistency = tagTrades.length > 0 && pattern.commonTags.length > 0\n    ? (tagTrades.filter(trade =>\n        trade.tags!.some(tag => pattern.commonTags.includes(tag))\n      ).length / tagTrades.length) * 100\n    : 50;\n\n  // Timing consistency (trading on preferred days)\n  const timingConsistency = trades.length > 0 && pattern.tradingDays.length > 0\n    ? (trades.filter(trade =>\n        pattern.tradingDays.includes(getDay(new Date(trade.date)))\n      ).length / trades.length) * 100\n    : 50;\n\n  // Size consistency (position sizing relative to pattern, normalized for dynamic risk)\n  const avgTradeSize = trades.length > 0\n    ? (dynamicRiskSettings && allTrades\n      ? trades.reduce((sum, trade) => sum + normalizeTradeAmount(trade, allTrades, dynamicRiskSettings), 0) / trades.length\n      : Math.abs(trades.reduce((sum, trade) => sum + trade.amount, 0)) / trades.length)\n    : 0;\n  const sizeDeviation = pattern.avgPositionSize > 0\n    ? Math.abs(avgTradeSize - pattern.avgPositionSize) / pattern.avgPositionSize\n    : 0;\n    \n  const sizeConsistency = Math.max(0, 100 - (sizeDeviation * 100));\n\n  const factors = {\n    sessionConsistency: isNaN(sessionConsistency) ? 50 : sessionConsistency,\n    tagConsistency: isNaN(tagConsistency) ? 50 : tagConsistency,\n    timingConsistency: isNaN(timingConsistency) ? 50 : timingConsistency,\n    sizeConsistency: isNaN(sizeConsistency) ? 50 : sizeConsistency\n  };\n\n  const score = (factors.sessionConsistency + factors.tagConsistency + factors.timingConsistency + factors.sizeConsistency) / 4;\n\n  return { score: isNaN(score) ? 0 : score, factors };\n};\n\n/**\n * Calculate risk management score\n */\nexport const calculateRiskManagementScore = (\n  trades: Trade[],\n  pattern: TradingPattern,\n  settings: ScoreSettings,\n  allTrades?: Trade[],\n  dynamicRiskSettings?: DynamicRiskSettings\n): { score: number; factors: any } => {\n  if (trades.length < settings.thresholds.minTradesForScore) {\n    return {\n      score: 0,\n      factors: {\n        riskRewardRatio: 0,\n        positionSizing: 0,\n        maxDrawdownAdherence: 0,\n        stopLossUsage: 0\n      }\n    };\n  }\n\n  // Risk/Reward ratio adherence\n  const rrTrades = trades.filter(trade => trade.riskToReward && trade.riskToReward > 0);\n  const avgRR = rrTrades.length > 0\n    ? rrTrades.reduce((sum, trade) => sum + (trade.riskToReward || 0), 0) / rrTrades.length\n    : 0;\n  const rrDeviation = settings.targets.avgRiskReward > 0\n    ? Math.abs(avgRR - settings.targets.avgRiskReward) / settings.targets.avgRiskReward\n    : 0;\n  const riskRewardRatio = avgRR > 0 ? Math.max(0, 100 - (rrDeviation * 100)) : 50;\n\n  // Position sizing consistency (normalized for dynamic risk)\n  const tradeSizes = dynamicRiskSettings && allTrades\n    ? trades.map(trade => normalizeTradeAmount(trade, allTrades, dynamicRiskSettings))\n    : trades.map(trade => Math.abs(trade.amount));\n  const avgSize = tradeSizes.length > 0\n    ? tradeSizes.reduce((sum, size) => sum + size, 0) / tradeSizes.length\n    : 0;\n  const sizeVariance = tradeSizes.length > 0\n    ? tradeSizes.reduce((sum, size) => sum + Math.pow(size - avgSize, 2), 0) / tradeSizes.length\n    : 0;\n  const sizeStdDev = Math.sqrt(sizeVariance);\n  const positionSizing = avgSize > 0\n    ? Math.max(0, 100 - ((sizeStdDev / avgSize) * 100))\n    : 50;\n\n  // Max drawdown adherence (normalized for dynamic risk)\n  let maxDrawdown = 0;\n  let peak = 0;\n  let runningPnL = 0;\n\n  trades.forEach(trade => {\n    const tradeAmount = dynamicRiskSettings && allTrades\n      ? normalizeTradeAmount(trade, allTrades, dynamicRiskSettings)\n      : trade.amount;\n    runningPnL += tradeAmount;\n    if (runningPnL > peak) {\n      peak = runningPnL;\n    }\n    const drawdown = peak > 0 ? ((peak - runningPnL) / peak) * 100 : 0;\n    if (drawdown > maxDrawdown) {\n      maxDrawdown = drawdown;\n    }\n  });\n\n  const maxDrawdownAdherence = maxDrawdown <= settings.targets.maxDrawdown\n    ? 100\n    : Math.max(0, 100 - ((maxDrawdown - settings.targets.maxDrawdown) * 10));\n\n  // Stop loss usage (approximated by loss trades having reasonable sizes, normalized for dynamic risk)\n  const lossTrades = trades.filter(trade => trade.type === 'loss');\n  const avgLoss = lossTrades.length > 0\n    ? (dynamicRiskSettings && allTrades\n      ? Math.abs(lossTrades.reduce((sum, trade) => sum + normalizeTradeAmount(trade, allTrades, dynamicRiskSettings), 0)) / lossTrades.length\n      : Math.abs(lossTrades.reduce((sum, trade) => sum + trade.amount, 0)) / lossTrades.length)\n    : 0;\n  const winTrades = trades.filter(trade => trade.type === 'win');\n  const avgWin = winTrades.length > 0\n    ? (dynamicRiskSettings && allTrades\n      ? winTrades.reduce((sum, trade) => sum + normalizeTradeAmount(trade, allTrades, dynamicRiskSettings), 0) / winTrades.length\n      : winTrades.reduce((sum, trade) => sum + trade.amount, 0) / winTrades.length)\n    : 0;\n\n  const stopLossUsage = avgWin > 0 && avgLoss > 0\n    ? Math.min(100, (avgWin / avgLoss) * 50) // Reasonable win/loss ratio indicates stop loss usage\n    : 50;\n\n  const factors = {\n    riskRewardRatio: isNaN(riskRewardRatio) ? 50 : riskRewardRatio,\n    positionSizing: isNaN(positionSizing) ? 50 : positionSizing,\n    maxDrawdownAdherence: isNaN(maxDrawdownAdherence) ? 50 : maxDrawdownAdherence,\n    stopLossUsage: isNaN(stopLossUsage) ? 50 : stopLossUsage\n  };\n\n  const score = (factors.riskRewardRatio + factors.positionSizing + factors.maxDrawdownAdherence + factors.stopLossUsage) / 4;\n\n  return { score: isNaN(score) ? 0 : score, factors };\n};\n\n/**\n * Calculate performance score based on consistency with historical performance\n */\nexport const calculatePerformanceScore = (\n  trades: Trade[],\n  pattern: TradingPattern,\n  settings: ScoreSettings,\n  allTrades?: Trade[],\n  dynamicRiskSettings?: DynamicRiskSettings\n): { score: number; factors: any } => {\n  if (trades.length < settings.thresholds.minTradesForScore) {\n    return {\n      score: 0,\n      factors: {\n        winRateConsistency: 0,\n        profitFactorStability: 0,\n        returnsConsistency: 0,\n        volatilityControl: 0\n      }\n    };\n  }\n\n  const currentWinRate = calculateWinRate(trades);\n\n  // Calculate profit factor with dynamic risk normalization if available\n  const currentProfitFactor = dynamicRiskSettings && allTrades\n    ? (() => {\n        const normalizedTrades = trades.map(trade => ({\n          ...trade,\n          amount: normalizeTradeAmount(trade, allTrades, dynamicRiskSettings)\n        }));\n        return calculateProfitFactor(normalizedTrades);\n      })()\n    : calculateProfitFactor(trades);\n\n  // Win rate consistency\n  const winRateDeviation = pattern.winRate > 0\n    ? Math.abs(currentWinRate - pattern.winRate) / pattern.winRate\n    : 0;\n  const winRateConsistency = pattern.winRate > 0\n    ? Math.max(0, 100 - (winRateDeviation * 100))\n    : 50;\n\n  // Profit factor stability\n  const pfDeviation = pattern.profitFactor > 0\n    ? Math.abs(currentProfitFactor - pattern.profitFactor) / pattern.profitFactor\n    : 0;\n  const profitFactorStability = pattern.profitFactor > 0\n    ? Math.max(0, 100 - (pfDeviation * 100))\n    : 50;\n\n  // Returns consistency (daily returns variance, normalized for dynamic risk)\n  const dailyReturns = dynamicRiskSettings && allTrades\n    ? trades.map(trade => normalizeTradeAmount(trade, allTrades, dynamicRiskSettings))\n    : trades.map(trade => trade.amount);\n  const avgReturn = dailyReturns.length > 0\n    ? dailyReturns.reduce((sum, ret) => sum + ret, 0) / dailyReturns.length\n    : 0;\n  const returnVariance = dailyReturns.length > 0\n    ? dailyReturns.reduce((sum, ret) => sum + Math.pow(ret - avgReturn, 2), 0) / dailyReturns.length\n    : 0;\n  const returnStdDev = Math.sqrt(returnVariance);\n  const returnsConsistency = Math.abs(avgReturn) > 0\n    ? Math.max(0, 100 - ((returnStdDev / Math.abs(avgReturn)) * 50))\n    : 50;\n\n  // Volatility control (based on drawdown patterns, normalized for dynamic risk)\n  let maxDrawdown = 0;\n  let peak = 0;\n  let runningPnL = 0;\n\n  trades.forEach(trade => {\n    const tradeAmount = dynamicRiskSettings && allTrades\n      ? normalizeTradeAmount(trade, allTrades, dynamicRiskSettings)\n      : trade.amount;\n    runningPnL += tradeAmount;\n    if (runningPnL > peak) {\n      peak = runningPnL;\n    }\n    const drawdown = peak > 0 ? ((peak - runningPnL) / peak) * 100 : 0;\n    if (drawdown > maxDrawdown) {\n      maxDrawdown = drawdown;\n    }\n  });\n\n  const volatilityControl = pattern.maxDrawdown > 0 && maxDrawdown <= pattern.maxDrawdown * 1.2\n    ? 100\n    : pattern.maxDrawdown > 0\n      ? Math.max(0, 100 - ((maxDrawdown - pattern.maxDrawdown) * 5))\n      : 50;\n\n  const factors = {\n    winRateConsistency: isNaN(winRateConsistency) ? 50 : winRateConsistency,\n    profitFactorStability: isNaN(profitFactorStability) ? 50 : profitFactorStability,\n    returnsConsistency: isNaN(returnsConsistency) ? 50 : returnsConsistency,\n    volatilityControl: isNaN(volatilityControl) ? 50 : volatilityControl\n  };\n\n  const score = (factors.winRateConsistency + factors.profitFactorStability + factors.returnsConsistency + factors.volatilityControl) / 4;\n\n  return { score: isNaN(score) ? 0 : score, factors };\n};\n\n/**\n * Calculate discipline score based on trading behavior\n */\nexport const calculateDisciplineScore = (\n  trades: Trade[],\n  pattern: TradingPattern,\n  settings: ScoreSettings,\n  allTrades?: Trade[],\n  dynamicRiskSettings?: DynamicRiskSettings\n): { score: number; factors: any } => {\n  if (trades.length < settings.thresholds.minTradesForScore) {\n    return {\n      score: 0,\n      factors: {\n        tradingPlanAdherence: 0,\n        emotionalControl: 0,\n        overtrading: 0,\n        ruleFollowing: 0\n      }\n    };\n  }\n\n  // Trading plan adherence (based on session and tag consistency)\n  const sessionTrades = trades.filter(trade => trade.session);\n  const sessionAdherence = sessionTrades.length > 0 && pattern.preferredSessions.length > 0\n    ? (trades.filter(trade =>\n        trade.session && pattern.preferredSessions.includes(trade.session)\n      ).length / sessionTrades.length) * 100\n    : 50;\n\n  const tagTrades = trades.filter(trade => trade.tags && trade.tags.length > 0);\n  const tagAdherence = tagTrades.length > 0 && pattern.commonTags.length > 0\n    ? (trades.filter(trade =>\n        trade.tags && trade.tags.some(tag => pattern.commonTags.includes(tag))\n      ).length / tagTrades.length) * 100\n    : 50;\n\n  const tradingPlanAdherence = (sessionAdherence + tagAdherence) / 2;\n\n  // Emotional control (based on trade size consistency and revenge trading patterns, normalized for dynamic risk)\n  const tradeSizes = dynamicRiskSettings && allTrades\n    ? trades.map(trade => normalizeTradeAmount(trade, allTrades, dynamicRiskSettings))\n    : trades.map(trade => Math.abs(trade.amount));\n  const avgSize = tradeSizes.length > 0\n    ? tradeSizes.reduce((sum, size) => sum + size, 0) / tradeSizes.length\n    : 0;\n  const sizeVariance = tradeSizes.length > 0\n    ? tradeSizes.reduce((sum, size) => sum + Math.pow(size - avgSize, 2), 0) / tradeSizes.length\n    : 0;\n  const sizeCoeffVar = avgSize > 0 ? Math.sqrt(sizeVariance) / avgSize : 0;\n  const emotionalControl = Math.max(0, 100 - (sizeCoeffVar * 200));\n\n  // Overtrading detection\n  const currentFrequency = trades.length / 30; // trades per day over last 30 days\n  const expectedFrequency = pattern.avgTradesPerDay;\n  const frequencyRatio = expectedFrequency > 0\n    ? currentFrequency / expectedFrequency\n    : currentFrequency / 0.1;\n  const overtrading = frequencyRatio <= 1.5\n    ? 100\n    : Math.max(0, 100 - ((frequencyRatio - 1.5) * 50));\n\n  // Rule following (based on having required fields filled)\n  const rulesFollowed = trades.length > 0\n    ? (trades.filter(trade =>\n        trade.session &&\n        trade.tags &&\n        trade.tags.length > 0 &&\n        (trade.riskToReward || trade.type === 'breakeven')\n      ).length / trades.length) * 100\n    : 0;\n\n  const factors = {\n    tradingPlanAdherence: isNaN(tradingPlanAdherence) ? 50 : tradingPlanAdherence,\n    emotionalControl: isNaN(emotionalControl) ? 50 : emotionalControl,\n    overtrading: isNaN(overtrading) ? 50 : overtrading,\n    ruleFollowing: isNaN(rulesFollowed) ? 50 : rulesFollowed\n  };\n\n  const score = (factors.tradingPlanAdherence + factors.emotionalControl + factors.overtrading + factors.ruleFollowing) / 4;\n\n  return { score: isNaN(score) ? 0 : score, factors };\n};\n\n/**\n * Generate recommendations based on score analysis\n */\nexport const generateRecommendations = (\n  breakdown: any,\n  pattern: TradingPattern,\n  tagPatternAnalysis?: any\n): { recommendations: string[]; strengths: string[]; weaknesses: string[] } => {\n  const recommendations: string[] = [];\n  const strengths: string[] = [];\n  const weaknesses: string[] = [];\n\n  // Analyze consistency\n  if (breakdown.consistency.score < 70) {\n    if (breakdown.consistency.factors.sessionConsistency < 70) {\n      recommendations.push(\"Focus on trading during your most profitable sessions\");\n      weaknesses.push(\"Inconsistent session timing\");\n    }\n    if (breakdown.consistency.factors.tagConsistency < 70) {\n      recommendations.push(\"Stick to your proven trading strategies and setups\");\n      weaknesses.push(\"Deviating from successful patterns\");\n    }\n  } else {\n    strengths.push(\"Consistent trading approach\");\n  }\n\n  // Analyze risk management\n  if (breakdown.riskManagement.score < 70) {\n    if (breakdown.riskManagement.factors.maxDrawdownAdherence < 70) {\n      recommendations.push(\"Reduce position sizes to control drawdown\");\n      weaknesses.push(\"Excessive drawdown risk\");\n    }\n    if (breakdown.riskManagement.factors.riskRewardRatio < 70) {\n      recommendations.push(\"Improve risk/reward ratios on your trades\");\n      weaknesses.push(\"Poor risk/reward management\");\n    }\n  } else {\n    strengths.push(\"Strong risk management\");\n  }\n\n  // Analyze performance\n  if (breakdown.performance.score < 70) {\n    if (breakdown.performance.factors.winRateConsistency < 70) {\n      recommendations.push(\"Focus on quality setups to maintain win rate\");\n      weaknesses.push(\"Declining win rate\");\n    }\n  } else {\n    strengths.push(\"Consistent performance\");\n  }\n\n  // Analyze discipline\n  if (breakdown.discipline.score < 70) {\n    if (breakdown.discipline.factors.overtrading < 70) {\n      recommendations.push(\"Reduce trading frequency and focus on quality\");\n      weaknesses.push(\"Overtrading detected\");\n    }\n    if (breakdown.discipline.factors.emotionalControl < 70) {\n      recommendations.push(\"Work on emotional control and position sizing\");\n      weaknesses.push(\"Emotional trading patterns\");\n    }\n  } else {\n    strengths.push(\"Good trading discipline\");\n  }\n\n  // Add tag pattern insights to recommendations\n  if (tagPatternAnalysis && tagPatternAnalysis.insights) {\n    tagPatternAnalysis.insights.slice(0, 2).forEach((insight: any) => {\n      if (insight.type === 'high_performance') {\n        recommendations.push(`Focus on \"${insight.tagCombination.join(' + ')}\" pattern (${insight.winRate.toFixed(1)}% win rate)`);\n        strengths.push(`Strong performance with ${insight.tagCombination.join(' + ')} combination`);\n      } else if (insight.type === 'declining_pattern') {\n        recommendations.push(`Review \"${insight.tagCombination.join(' + ')}\" strategy - performance declining`);\n        weaknesses.push(`Declining performance in ${insight.tagCombination.join(' + ')} trades`);\n      }\n    });\n  }\n\n  return { recommendations, strengths, weaknesses };\n};\n","import { Trade } from '../types/trade';\nimport { TagCombination, TagPatternInsight, TagPatternAnalysis, ScoreSettings } from '../types/score';\nimport { subDays, isAfter } from 'date-fns';\n\n/**\n * Service for analyzing tag patterns and winrate trends\n */\nclass TagPatternService {\n  private minTradesForAnalysis = 5;\n  private minTradesForCombination = 3;\n  private recentPeriodDays = 30;\n  private historicalPeriodDays = 90;\n\n  /**\n   * Analyze tag patterns and generate insights\n   */\n  analyzeTagPatterns(trades: Trade[], targetDate: Date = new Date(), settings?: ScoreSettings): TagPatternAnalysis {\n    const recentCutoff = subDays(targetDate, this.recentPeriodDays);\n    const historicalCutoff = subDays(targetDate, this.historicalPeriodDays);\n\n    // Filter trades into recent and historical periods\n    const recentTrades = trades.filter(trade => isAfter(new Date(trade.date), recentCutoff));\n    const historicalTrades = trades.filter(trade => \n      isAfter(new Date(trade.date), historicalCutoff) && \n      !isAfter(new Date(trade.date), recentCutoff)\n    );\n\n    // Get all tag combinations (excluding specified tags)\n    const combinations = this.generateTagCombinations(trades, settings?.excludedTagsFromPatterns);\n    \n    // Analyze each combination\n    const analyzedCombinations = combinations.map(combo => \n      this.analyzeTagCombination(combo, recentTrades, historicalTrades, trades)\n    ).filter(combo => combo.totalTrades >= this.minTradesForCombination);\n\n    // Sort by win rate and total trades\n    const topCombinations = [...analyzedCombinations]\n      .sort((a, b) => {\n        // Primary sort by win rate, secondary by total trades\n        const winRateDiff = b.winRate - a.winRate;\n        if (Math.abs(winRateDiff) < 5) { // If win rates are close, prioritize volume\n          return b.totalTrades - a.totalTrades;\n        }\n        return winRateDiff;\n      })\n      .slice(0, 10);\n\n    // Find declining combinations\n    const decliningCombinations = analyzedCombinations\n      .filter(combo => combo.trend === 'declining' && combo.totalTrades >= this.minTradesForAnalysis)\n      .sort((a, b) => (a.recentWinRate - a.historicalWinRate) - (b.recentWinRate - b.historicalWinRate))\n      .slice(0, 5);\n\n    // Generate insights\n    const insights = this.generateInsights(topCombinations, decliningCombinations, trades);\n    \n    // Generate market condition alerts\n    const marketConditionAlerts = this.generateMarketConditionAlerts(analyzedCombinations, trades);\n\n    return {\n      insights: [...insights, ...marketConditionAlerts],\n      topCombinations,\n      decliningCombinations,\n      marketConditionAlerts\n    };\n  }\n\n  /**\n   * Generate all meaningful tag combinations from trades\n   */\n  private generateTagCombinations(trades: Trade[], excludedTags?: string[]): string[][] {\n    const allTags = new Set<string>();\n    const tagPairs = new Set<string>();\n    const tagTriples = new Set<string>();\n\n    // Collect all tags and their combinations\n    trades.forEach(trade => {\n      if (trade.tags && trade.tags.length > 0) {\n        // Filter out system tags like Partials and excluded tags\n        const filteredTags = trade.tags.filter(tag =>\n          !tag.startsWith('Partials:') &&\n          (!excludedTags || !excludedTags.includes(tag))\n        );\n        \n        // Single tags\n        filteredTags.forEach(tag => allTags.add(tag));\n\n        // Tag pairs\n        if (filteredTags.length >= 2) {\n          for (let i = 0; i < filteredTags.length; i++) {\n            for (let j = i + 1; j < filteredTags.length; j++) {\n              const pair = [filteredTags[i], filteredTags[j]].sort().join('|');\n              tagPairs.add(pair);\n            }\n          }\n        }\n\n        // Tag triples (for high-volume traders)\n        if (filteredTags.length >= 3) {\n          for (let i = 0; i < filteredTags.length; i++) {\n            for (let j = i + 1; j < filteredTags.length; j++) {\n              for (let k = j + 1; k < filteredTags.length; k++) {\n                const triple = [filteredTags[i], filteredTags[j], filteredTags[k]].sort().join('|');\n                tagTriples.add(triple);\n              }\n            }\n          }\n        }\n      }\n    });\n\n    // Convert to arrays\n    const combinations: string[][] = [];\n    \n    // Add single tags\n    allTags.forEach(tag => combinations.push([tag]));\n    \n    // Add pairs\n    tagPairs.forEach(pair => combinations.push(pair.split('|')));\n    \n    // Add triples (only if we have enough trades)\n    if (trades.length > 50) {\n      tagTriples.forEach(triple => combinations.push(triple.split('|')));\n    }\n\n    return combinations;\n  }\n\n  /**\n   * Analyze a specific tag combination\n   */\n  private analyzeTagCombination(\n    tags: string[], \n    recentTrades: Trade[], \n    historicalTrades: Trade[], \n    allTrades: Trade[]\n  ): TagCombination {\n    // Filter trades that have all tags in the combination\n    const matchingTrades = allTrades.filter(trade =>\n      trade.tags && tags.every(tag => trade.tags!.includes(tag))\n    );\n\n    const recentMatchingTrades = recentTrades.filter(trade =>\n      trade.tags && tags.every(tag => trade.tags!.includes(tag))\n    );\n\n    const historicalMatchingTrades = historicalTrades.filter(trade =>\n      trade.tags && tags.every(tag => trade.tags!.includes(tag))\n    );\n\n    // Calculate overall stats\n    const wins = matchingTrades.filter(trade => trade.type === 'win').length;\n    const losses = matchingTrades.filter(trade => trade.type === 'loss').length;\n    const totalTrades = wins + losses; // Exclude breakevens from win rate calculation\n    const winRate = totalTrades > 0 ? (wins / totalTrades) * 100 : 0;\n    const totalPnL = matchingTrades.reduce((sum, trade) => sum + trade.amount, 0);\n    const avgPnL = matchingTrades.length > 0 ? totalPnL / matchingTrades.length : 0;\n\n    // Calculate recent and historical win rates\n    const recentWins = recentMatchingTrades.filter(trade => trade.type === 'win').length;\n    const recentLosses = recentMatchingTrades.filter(trade => trade.type === 'loss').length;\n    const recentTotal = recentWins + recentLosses;\n    const recentWinRate = recentTotal > 0 ? (recentWins / recentTotal) * 100 : 0;\n\n    const historicalWins = historicalMatchingTrades.filter(trade => trade.type === 'win').length;\n    const historicalLosses = historicalMatchingTrades.filter(trade => trade.type === 'loss').length;\n    const historicalTotal = historicalWins + historicalLosses;\n    const historicalWinRate = historicalTotal > 0 ? (historicalWins / historicalTotal) * 100 : 0;\n\n    // Determine trend\n    let trend: 'improving' | 'declining' | 'stable' = 'stable';\n    if (recentTotal >= 3 && historicalTotal >= 3) {\n      const winRateDiff = recentWinRate - historicalWinRate;\n      if (winRateDiff > 10) trend = 'improving';\n      else if (winRateDiff < -10) trend = 'declining';\n    }\n\n    return {\n      tags,\n      winRate,\n      totalTrades: matchingTrades.length,\n      wins,\n      losses,\n      totalPnL,\n      avgPnL,\n      trend,\n      recentWinRate,\n      historicalWinRate\n    };\n  }\n\n  /**\n   * Generate insights from analyzed combinations\n   */\n  private generateInsights(\n    topCombinations: TagCombination[], \n    decliningCombinations: TagCombination[],\n    allTrades: Trade[]\n  ): TagPatternInsight[] {\n    const insights: TagPatternInsight[] = [];\n\n    // High performance insights\n    topCombinations.slice(0, 3).forEach((combo, index) => {\n      if (combo.winRate > 70 && combo.totalTrades >= this.minTradesForAnalysis) {\n        insights.push({\n          type: 'high_performance',\n          title: `High-Performance Pattern #${index + 1}`,\n          description: `The combination \"${combo.tags.join(' + ')}\" shows exceptional performance with ${combo.winRate.toFixed(1)}% win rate across ${combo.totalTrades} trades.`,\n          tagCombination: combo.tags,\n          winRate: combo.winRate,\n          confidence: Math.min(95, 50 + (combo.totalTrades * 2)),\n          recommendation: `Consider focusing more on trades that match this pattern. Your success rate with \"${combo.tags.join(' + ')}\" is significantly above average.`,\n          severity: combo.winRate > 80 ? 'high' : 'medium'\n        });\n      }\n    });\n\n    // Declining pattern insights\n    decliningCombinations.forEach((combo, index) => {\n      const winRateDecline = combo.historicalWinRate - combo.recentWinRate;\n      if (winRateDecline > 15) {\n        insights.push({\n          type: 'declining_pattern',\n          title: `Declining Pattern Alert`,\n          description: `The combination \"${combo.tags.join(' + ')}\" has declined from ${combo.historicalWinRate.toFixed(1)}% to ${combo.recentWinRate.toFixed(1)}% win rate recently.`,\n          tagCombination: combo.tags,\n          winRate: combo.recentWinRate,\n          confidence: Math.min(90, 40 + (combo.totalTrades * 3)),\n          recommendation: `Review your approach with \"${combo.tags.join(' + ')}\" trades. Market conditions may have changed, requiring strategy adjustment.`,\n          severity: winRateDecline > 25 ? 'high' : 'medium'\n        });\n      }\n    });\n\n    return insights;\n  }\n\n  /**\n   * Generate market condition alerts based on tag patterns\n   */\n  private generateMarketConditionAlerts(\n    combinations: TagCombination[], \n    allTrades: Trade[]\n  ): TagPatternInsight[] {\n    const alerts: TagPatternInsight[] = [];\n\n    // Look for session-based patterns\n    const sessionCombos = combinations.filter(combo => \n      combo.tags.some(tag => ['Asia', 'London', 'NY AM', 'NY PM'].includes(tag))\n    );\n\n    sessionCombos.forEach(combo => {\n      if (combo.trend === 'declining' && combo.totalTrades >= 5) {\n        const sessionTag = combo.tags.find(tag => ['Asia', 'London', 'NY AM', 'NY PM'].includes(tag));\n        if (sessionTag) {\n          alerts.push({\n            type: 'market_condition',\n            title: `${sessionTag} Session Performance Decline`,\n            description: `Your performance during ${sessionTag} session with \"${combo.tags.filter(t => t !== sessionTag).join(' + ')}\" has declined recently.`,\n            tagCombination: combo.tags,\n            winRate: combo.recentWinRate,\n            confidence: 75,\n            recommendation: `Consider adjusting your strategy for ${sessionTag} session or reducing position sizes during this time until performance improves.`,\n            severity: 'medium'\n          });\n        }\n      }\n    });\n\n    return alerts.slice(0, 2); // Limit to 2 alerts to avoid overwhelming\n  }\n\n  /**\n   * Get tag combination statistics for a specific combination\n   */\n  getTagCombinationStats(trades: Trade[], tags: string[]): TagCombination | null {\n    const recentCutoff = subDays(new Date(), this.recentPeriodDays);\n    const historicalCutoff = subDays(new Date(), this.historicalPeriodDays);\n\n    const recentTrades = trades.filter(trade => isAfter(new Date(trade.date), recentCutoff));\n    const historicalTrades = trades.filter(trade => \n      isAfter(new Date(trade.date), historicalCutoff) && \n      !isAfter(new Date(trade.date), recentCutoff)\n    );\n\n    return this.analyzeTagCombination(tags, recentTrades, historicalTrades, trades);\n  }\n}\n\nexport const tagPatternService = new TagPatternService();\n","import { Trade } from '../types/trade';\nimport {\n  ScoreMetrics,\n  ScoreBreakdown,\n  ScoreHistory,\n  ScoreSettings,\n  ScoreAnalysis\n} from '../types/score';\nimport {\n  DEFAULT_SCORE_SETTINGS,\n  calculateTradingPattern,\n  calculateConsistencyScore,\n  calculateRiskManagementScore,\n  calculatePerformanceScore,\n  calculateDisciplineScore,\n  generateRecommendations\n} from '../utils/scoreUtils';\nimport { DynamicRiskSettings } from '../utils/dynamicRiskUtils';\nimport { tagPatternService } from './tagPatternService';\nimport {\n  subDays,\n  subWeeks,\n  subMonths,\n  subYears,\n  isSameDay,\n  isSameWeek,\n  isSameMonth,\n  isSameYear\n} from 'date-fns';\n\n/**\n * Main score calculation service\n */\nexport class ScoreService {\n  private settings: ScoreSettings;\n  private dynamicRiskSettings?: DynamicRiskSettings;\n\n  constructor(settings: ScoreSettings = DEFAULT_SCORE_SETTINGS) {\n    this.settings = settings;\n  }\n\n  /**\n   * Update dynamic risk settings for score calculations\n   */\n  updateDynamicRiskSettings(dynamicRiskSettings?: DynamicRiskSettings): void {\n    this.dynamicRiskSettings = dynamicRiskSettings;\n  }\n\n  /**\n   * Calculate comprehensive score analysis for a given period\n   */\n  async calculateScore(\n    allTrades: Trade[],\n    period: 'daily' | 'weekly' | 'monthly' | 'yearly' = 'weekly',\n    targetDate: Date = new Date(),\n    scoreSettings: ScoreSettings = DEFAULT_SCORE_SETTINGS\n  ): Promise<ScoreAnalysis> {\n    // Filter trades for the target period\n    const periodTrades = this.getTradesForPeriod(allTrades, period, targetDate);\n\n    // Yield control to prevent UI blocking\n    await new Promise(resolve => setTimeout(resolve, 0));\n\n    // Calculate historical pattern from longer lookback period\n    const historicalTrades = this.getHistoricalTrades(allTrades, targetDate);\n    const pattern = calculateTradingPattern(targetDate, historicalTrades, this.settings.thresholds.lookbackPeriod, this.settings.selectedTags, this.dynamicRiskSettings);\n\n    // Yield control again\n    await new Promise(resolve => setTimeout(resolve, 0));\n\n    // Calculate individual score components\n    const consistency = calculateConsistencyScore(periodTrades, pattern, this.settings, allTrades, this.dynamicRiskSettings);\n    const riskManagement = calculateRiskManagementScore(periodTrades, pattern, this.settings, allTrades, this.dynamicRiskSettings);\n    const performance = calculatePerformanceScore(periodTrades, pattern, this.settings, allTrades, this.dynamicRiskSettings);\n    const discipline = calculateDisciplineScore(periodTrades, pattern, this.settings, allTrades, this.dynamicRiskSettings);\n\n    // Calculate overall score using weights\n    const overall = (\n      (consistency.score * this.settings.weights.consistency) +\n      (riskManagement.score * this.settings.weights.riskManagement) +\n      (performance.score * this.settings.weights.performance) +\n      (discipline.score * this.settings.weights.discipline)\n    ) / 100;\n\n    // Ensure overall score is not NaN\n    const finalOverall = isNaN(overall) ? 0 : overall;\n\n    const currentScore: ScoreMetrics = {\n      consistency: isNaN(consistency.score) ? 0 : consistency.score,\n      riskManagement: isNaN(riskManagement.score) ? 0 : riskManagement.score,\n      performance: isNaN(performance.score) ? 0 : performance.score,\n      discipline: isNaN(discipline.score) ? 0 : discipline.score,\n      overall: finalOverall\n    };\n\n    const breakdown: ScoreBreakdown = {\n      consistency,\n      riskManagement,\n      performance,\n      discipline\n    };\n\n    // Determine trend\n    const trend = this.calculateTrend(allTrades, period, targetDate);\n\n    // Calculate tag pattern analysis (only for sufficient data)\n    const tagPatternAnalysis = allTrades.length >= 10\n      ? tagPatternService.analyzeTagPatterns(allTrades, targetDate, scoreSettings)\n      : undefined;\n\n    // Generate recommendations (including tag pattern insights)\n    const { recommendations, strengths, weaknesses } = generateRecommendations(breakdown, pattern, tagPatternAnalysis);\n\n    return {\n      currentScore,\n      breakdown,\n      pattern,\n      recommendations,\n      strengths,\n      weaknesses,\n      trend,\n      tagPatternAnalysis\n    };\n  }\n\n  /**\n   * Get score history for a range of periods\n   */\n  async getScoreHistory(\n    allTrades: Trade[],\n    period: 'daily' | 'weekly' | 'monthly' | 'yearly',\n    periodsBack: number = 12,\n    scoreSettings: ScoreSettings = DEFAULT_SCORE_SETTINGS\n  ): Promise<ScoreHistory[]> {\n    const history: ScoreHistory[] = [];\n    const today = new Date();\n\n    for (let i = 0; i < periodsBack; i++) {\n      let targetDate: Date;\n\n      switch (period) {\n        case 'daily':\n          targetDate = subDays(today, i);\n          break;\n        case 'weekly':\n          targetDate = subWeeks(today, i);\n          break;\n        case 'monthly':\n          targetDate = subMonths(today, i);\n          break;\n        case 'yearly':\n          targetDate = subYears(today, i);\n          break;\n      }\n\n      const periodTrades = this.getTradesForPeriod(allTrades, period, targetDate);\n\n      if (periodTrades.length >= this.settings.thresholds.minTradesForScore) {\n        const analysis = await this.calculateScore(allTrades, period, targetDate, scoreSettings);\n\n        history.push({\n          date: targetDate,\n          period,\n          metrics: analysis.currentScore,\n          breakdown: analysis.breakdown,\n          tradeCount: periodTrades.length\n        });\n      }\n\n      // Yield control periodically to prevent UI blocking\n      if (i % 3 === 0) {\n        await new Promise(resolve => setTimeout(resolve, 0));\n      }\n    }\n\n    return history.reverse(); // Return chronological order\n  }\n\n  /**\n   * Get trades for a specific period\n   */\n  private getTradesForPeriod(\n    trades: Trade[],\n    period: 'daily' | 'weekly' | 'monthly' | 'yearly',\n    targetDate: Date\n  ): Trade[] {\n    return trades.filter(trade => {\n      const tradeDate = new Date(trade.date);\n\n      switch (period) {\n        case 'daily':\n          return isSameDay(tradeDate, targetDate);\n        case 'weekly':\n          return isSameWeek(tradeDate, targetDate, { weekStartsOn: 0 });\n        case 'monthly':\n          return isSameMonth(tradeDate, targetDate);\n        case 'yearly':\n          return isSameYear(tradeDate, targetDate);\n        default:\n          return false;\n      }\n    });\n  }\n\n  /**\n   * Get historical trades for pattern calculation\n   */\n  private getHistoricalTrades(trades: Trade[], targetDate: Date): Trade[] {\n    const cutoffDate = subDays(targetDate, this.settings.thresholds.lookbackPeriod);\n    return trades.filter(trade => {\n      const tradeDate = new Date(trade.date);\n      return tradeDate >= cutoffDate && tradeDate <= targetDate;\n    });\n  }\n\n  /**\n   * Calculate trend based on recent score history\n   */\n  private calculateTrend(\n    allTrades: Trade[],\n    period: 'daily' | 'weekly' | 'monthly' | 'yearly',\n    targetDate: Date\n  ): 'improving' | 'declining' | 'stable' {\n    try {\n      // Check if the target period is current or past\n      const now = new Date();\n      const isCurrentPeriod = this.isCurrentPeriod(targetDate, period, now);\n\n      // For past periods, always return 'stable' since they can't change\n      if (!isCurrentPeriod) {\n        return 'stable';\n      }\n\n      // Get current period trades\n      const currentTrades = this.getTradesForPeriod(allTrades, period, targetDate);\n\n      // Get previous period date\n      const previousDate = new Date(targetDate);\n      switch (period) {\n        case 'daily':\n          previousDate.setDate(previousDate.getDate() - 1);\n          break;\n        case 'weekly':\n          previousDate.setDate(previousDate.getDate() - 7);\n          break;\n        case 'monthly':\n          previousDate.setMonth(previousDate.getMonth() - 1);\n          break;\n        case 'yearly':\n          previousDate.setFullYear(previousDate.getFullYear() - 1);\n          break;\n      }\n\n      // Get previous period trades\n      const previousTrades = this.getTradesForPeriod(allTrades, period, previousDate);\n\n      // Need at least some trades in both periods to calculate trend\n      if (currentTrades.length < 2 || previousTrades.length < 2) {\n        return 'stable';\n      }\n\n      // Calculate scores for both periods (without recursion by using a simple calculation)\n      const currentScore = this.calculateSimpleScore(currentTrades);\n      const previousScore = this.calculateSimpleScore(previousTrades);\n\n      // Compare scores to determine trend\n      const scoreDifference = currentScore - previousScore;\n      const threshold = 5; // 5% threshold for trend detection\n\n      if (scoreDifference > threshold) {\n        return 'improving';\n      } else if (scoreDifference < -threshold) {\n        return 'declining';\n      } else {\n        return 'stable';\n      }\n    } catch (error) {\n      console.error('Error calculating trend:', error);\n      return 'stable';\n    }\n  }\n\n  /**\n   * Check if a target date represents the current period\n   */\n  private isCurrentPeriod(\n    targetDate: Date,\n    period: 'daily' | 'weekly' | 'monthly' | 'yearly',\n    now: Date = new Date()\n  ): boolean {\n    switch (period) {\n      case 'daily':\n        return isSameDay(targetDate, now);\n      case 'weekly':\n        return isSameWeek(targetDate, now, { weekStartsOn: 0 });\n      case 'monthly':\n        return isSameMonth(targetDate, now);\n      case 'yearly':\n        return isSameYear(targetDate, now);\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Calculate a simple overall score without trend calculation (to avoid recursion)\n   */\n  private calculateSimpleScore(trades: Trade[]): number {\n    if (trades.length === 0) return 0;\n\n    // Simple calculation based on win rate and average return\n    const wins = trades.filter(t => t.type === 'win').length;\n    const winRate = (wins / trades.length) * 100;\n\n    const totalPnL = trades.reduce((sum, t) => sum + t.amount, 0);\n    const avgReturn = totalPnL / trades.length;\n\n    // Combine win rate and average return for a simple score\n    const returnScore = avgReturn > 0 ? Math.min(100, avgReturn * 10) : Math.max(0, 50 + avgReturn * 10);\n\n    return (winRate + returnScore) / 2;\n  }\n\n  /**\n   * Update score settings\n   */\n  updateSettings(newSettings: Partial<ScoreSettings>): void {\n    this.settings = { ...this.settings, ...newSettings };\n  }\n\n  /**\n   * Get current settings\n   */\n  getSettings(): ScoreSettings {\n    return { ...this.settings };\n  }\n\n  /**\n   * Calculate score for multiple periods at once\n   */\n  async calculateMultiPeriodScore(allTrades: Trade[], targetDate: Date = new Date(), scoreSettings: ScoreSettings = DEFAULT_SCORE_SETTINGS): Promise<{\n    daily: ScoreAnalysis;\n    weekly: ScoreAnalysis;\n    monthly: ScoreAnalysis;\n    yearly: ScoreAnalysis;\n  }> {\n    const [daily, weekly, monthly, yearly] = await Promise.all([\n      this.calculateScore(allTrades, 'daily', targetDate, scoreSettings),\n      this.calculateScore(allTrades, 'weekly', targetDate, scoreSettings),\n      this.calculateScore(allTrades, 'monthly', targetDate, scoreSettings),\n      this.calculateScore(allTrades, 'yearly', targetDate, scoreSettings)\n    ]);\n\n    return {\n      daily,\n      weekly,\n      monthly,\n      yearly\n    };\n  }\n\n  /**\n   * Get score summary for dashboard\n   */\n  async getScoreSummary(allTrades: Trade[], scoreSettings: ScoreSettings = DEFAULT_SCORE_SETTINGS): Promise<{\n    currentWeekly: ScoreMetrics;\n    trend: 'improving' | 'declining' | 'stable';\n    keyMetric: string;\n    recommendation: string;\n  }> {\n    const weeklyAnalysis = await this.calculateScore(allTrades, 'weekly', new Date(), scoreSettings);\n\n    // Find the lowest scoring component\n    const scores = [\n      { name: 'Consistency', value: weeklyAnalysis.currentScore.consistency },\n      { name: 'Risk Management', value: weeklyAnalysis.currentScore.riskManagement },\n      { name: 'Performance', value: weeklyAnalysis.currentScore.performance },\n      { name: 'Discipline', value: weeklyAnalysis.currentScore.discipline }\n    ];\n\n    const lowestScore = scores.reduce((min, score) =>\n      score.value < min.value ? score : min\n    );\n\n    const keyMetric = `${lowestScore.name}: ${lowestScore.value.toFixed(0)}%`;\n    const recommendation = weeklyAnalysis.recommendations[0] || \"Keep following your trading plan\";\n\n    return {\n      currentWeekly: weeklyAnalysis.currentScore,\n      trend: weeklyAnalysis.trend,\n      keyMetric,\n      recommendation\n    };\n  }\n}\n\n// Export singleton instance\nexport const scoreService = new ScoreService();\n","import React from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  LinearProgress,\n  Chip,\n  Stack,\n  useTheme,\n  Tooltip\n} from '@mui/material';\nimport { alpha } from '@mui/material/styles';\nimport {\n  TrendingUp,\n  TrendingDown,\n  TrendingFlat,\n  Psychology,\n  Shield,\n  Timeline,\n  Rule,\n  HelpOutline,\n  Flag\n} from '@mui/icons-material';\nimport { ScoreMetrics } from '../../types/score';\n\ninterface ScoreCardProps {\n  score: ScoreMetrics;\n  trend: 'improving' | 'declining' | 'stable';\n  period: 'daily' | 'weekly' | 'monthly' | 'yearly';\n  compact?: boolean;\n  recommendedScore?: number; // Target score to achieve (0-100)\n}\n\nconst ScoreCard: React.FC<ScoreCardProps> = ({\n  score,\n  trend,\n  period,\n  compact = false,\n  recommendedScore = 75 // Default recommended score of 75%\n}) => {\n  const theme = useTheme();\n\n  const getScoreColor = (value: number) => {\n    if (value >= 50) return theme.palette.success.main;\n    if (value >= 30) return theme.palette.warning.main;\n    return theme.palette.error.main;\n  };\n\n  const getTrendIcon = () => {\n    switch (trend) {\n      case 'improving':\n        return <TrendingUp sx={{ color: theme.palette.success.main }} />;\n      case 'declining':\n        return <TrendingDown sx={{ color: theme.palette.error.main }} />;\n      default:\n        return <TrendingFlat sx={{ color: theme.palette.text.secondary }} />;\n    }\n  };\n\n  const getTrendColor = () => {\n    switch (trend) {\n      case 'improving':\n        return theme.palette.success.main;\n      case 'declining':\n        return theme.palette.error.main;\n      default:\n        return theme.palette.text.secondary;\n    }\n  };\n\n  const isScoreMeetingTarget = (currentScore: number) => {\n    return currentScore >= recommendedScore;\n  };\n\n  const getTargetStatus = (currentScore: number) => {\n    const difference = currentScore - recommendedScore;\n    if (difference >= 0) {\n      return {\n        status: 'achieved',\n        message: `${difference.toFixed(0)}% above target`,\n        color: theme.palette.success.main\n      };\n    } else {\n      return {\n        status: 'below',\n        message: `${Math.abs(difference).toFixed(0)}% below target`,\n        color: theme.palette.warning.main\n      };\n    }\n  };\n\n  const ProgressWithTarget: React.FC<{\n    value: number;\n    height: number;\n    showTarget?: boolean;\n  }> = ({ value, height, showTarget = true }) => (\n    <Box sx={{ position: 'relative', width: '100%' }}>\n      <LinearProgress\n        variant=\"determinate\"\n        value={isNaN(value) ? 0 : value}\n        sx={{\n          height,\n          borderRadius: height / 2,\n          backgroundColor: theme.palette.mode === 'dark'\n            ? alpha(theme.palette.common.white, 0.1)\n            : theme.palette.grey[200],\n          '& .MuiLinearProgress-bar': {\n            backgroundColor: getScoreColor(value),\n            borderRadius: height / 2\n          }\n        }}\n      />\n      {showTarget && (\n        <Box\n          sx={{\n            position: 'absolute',\n            left: `${recommendedScore}%`,\n            top: 0,\n            height: '100%',\n            width: 2,\n            backgroundColor: theme.palette.info.main,\n            borderRadius: 1,\n            '&::before': {\n              content: '\"\"',\n              position: 'absolute',\n              top: -2,\n              left: -2,\n              width: 6,\n              height: 6,\n              backgroundColor: theme.palette.info.main,\n              borderRadius: '50%'\n            }\n          }}\n        />\n      )}\n    </Box>\n  );\n\n  const getDetailedTooltip = (componentName: string): string => {\n    switch (componentName.toLowerCase()) {\n      case 'consistency':\n        return `Consistency Score measures how well you stick to your established trading patterns:\n\n• Pattern Adherence (40%): How closely your trades match your historical successful patterns\n• Session Consistency (30%): Trading during your most profitable time periods\n• Strategy Consistency (30%): Using your most successful trading strategies\n\nHigher scores indicate better discipline in following proven patterns.`;\n\n      case 'risk mgmt':\n      case 'risk management':\n        return `Risk Management Score evaluates your discipline in managing risk and position sizing:\n\n• Position Sizing (35%): Consistency in risk per trade vs your target\n• Stop Loss Usage (25%): Proper use of stop losses on trades\n• Risk/Reward Ratio (25%): Achieving your target risk/reward ratios\n• Drawdown Control (15%): Keeping drawdowns within acceptable limits\n\nHigher scores indicate better risk control and capital preservation.`;\n\n      case 'performance':\n        return `Performance Score measures the consistency of your trading results vs historical patterns:\n\n• Win Rate Consistency (40%): How close your win rate is to your historical average\n• Profit Factor Stability (35%): Maintaining consistent profit factors over time\n• Return Consistency (25%): Steady returns without extreme volatility\n\nHigher scores indicate more predictable and stable trading performance.`;\n\n      case 'discipline':\n        return `Discipline Score evaluates your emotional control and trading discipline:\n\n• Trade Frequency (30%): Avoiding overtrading or undertrading\n• Plan Adherence (25%): Following your predetermined trading plan\n• Emotional Control (25%): Avoiding revenge trading and FOMO\n• Exit Discipline (20%): Taking profits and losses according to plan\n\nHigher scores indicate better emotional control and systematic trading.`;\n\n      default:\n        return 'This score component measures specific aspects of your trading performance and discipline.';\n    }\n  };\n\n  const scoreComponents = [\n    {\n      name: 'Consistency',\n      value: score.consistency,\n      icon: <Rule />,\n      description: 'How well you stick to your trading patterns'\n    },\n    {\n      name: 'Risk Mgmt',\n      value: score.riskManagement,\n      icon: <Shield />,\n      description: 'Risk management and position sizing discipline'\n    },\n    {\n      name: 'Performance',\n      value: score.performance,\n      icon: <Timeline />,\n      description: 'Performance consistency vs historical patterns'\n    },\n    {\n      name: 'Discipline',\n      value: score.discipline,\n      icon: <Psychology />,\n      description: 'Trading discipline and emotional control'\n    }\n  ];\n\n  if (compact) {\n    return (\n      <Card\n        sx={{\n          minWidth: 200,\n          backgroundColor: theme.palette.mode === 'dark'\n            ? alpha(theme.palette.background.paper, 0.8)\n            : theme.palette.background.paper,\n          borderRadius: 2,\n          boxShadow: theme.shadows[2],\n          border: `1px solid ${theme.palette.mode === 'dark'\n            ? alpha(theme.palette.common.white, 0.1)\n            : alpha(theme.palette.common.black, 0.1)}`,\n          transition: 'all 0.2s ease-in-out',\n          '&:hover': {\n            transform: 'translateY(-2px)',\n            boxShadow: theme.shadows[4],\n          }\n        }}\n      >\n        <CardContent sx={{ p: 2, '&:last-child': { pb: 2 } }}>\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" mb={1}>\n            <Typography\n              variant=\"subtitle2\"\n              sx={{\n                color: theme.palette.text.secondary,\n                fontWeight: 500\n              }}\n            >\n              {period.charAt(0).toUpperCase() + period.slice(1)} Score\n            </Typography>\n            {getTrendIcon()}\n          </Stack>\n\n          <Typography\n            variant=\"h4\"\n            sx={{\n              color: getScoreColor(score.overall),\n              fontWeight: 'bold',\n              mb: 0.5\n            }}\n          >\n            {isNaN(score.overall) ? '0' : score.overall.toFixed(0)}%\n          </Typography>\n\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" mb={1}>\n            <Typography\n              variant=\"caption\"\n              sx={{\n                color: getTrendColor(),\n                fontWeight: 500,\n                display: 'flex',\n                alignItems: 'center',\n                gap: 0.5\n              }}\n            >\n              {trend.charAt(0).toUpperCase() + trend.slice(1)}\n            </Typography>\n            <Tooltip title={`Target: ${recommendedScore}%`}>\n              <Flag\n                sx={{\n                  fontSize: 14,\n                  color: isScoreMeetingTarget(score.overall)\n                    ? theme.palette.success.main\n                    : theme.palette.info.main\n                }}\n              />\n            </Tooltip>\n          </Stack>\n\n          <ProgressWithTarget\n            value={score.overall}\n            height={6}\n          />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card\n      sx={{\n        backgroundColor: theme.palette.mode === 'dark'\n          ? alpha(theme.palette.background.paper, 0.8)\n          : theme.palette.background.paper,\n        borderRadius: 2,\n        boxShadow: theme.shadows[2],\n        border: `1px solid ${theme.palette.mode === 'dark'\n          ? alpha(theme.palette.common.white, 0.1)\n          : alpha(theme.palette.common.black, 0.1)}`,\n        transition: 'all 0.2s ease-in-out',\n        '&:hover': {\n          transform: 'translateY(-2px)',\n          boxShadow: theme.shadows[4],\n        }\n      }}\n    >\n      <CardContent sx={{ p: 3 }}>\n        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" mb={2}>\n          <Typography\n            variant=\"h6\"\n            sx={{\n              color: theme.palette.text.primary,\n              fontWeight: 600\n            }}\n          >\n            📊 {period.charAt(0).toUpperCase() + period.slice(1)} Trading Score\n          </Typography>\n          <Chip\n            icon={getTrendIcon()}\n            label={trend.charAt(0).toUpperCase() + trend.slice(1)}\n            size=\"small\"\n            sx={{\n              backgroundColor: alpha(getTrendColor(), 0.1),\n              color: getTrendColor(),\n              fontWeight: 500,\n              border: `1px solid ${alpha(getTrendColor(), 0.3)}`,\n              '& .MuiChip-icon': {\n                color: getTrendColor()\n              }\n            }}\n          />\n        </Stack>\n\n        {/* Overall Score */}\n        <Box sx={{ textAlign: 'center', mb: 3 }}>\n          <Typography\n            variant=\"h2\"\n            sx={{\n              color: getScoreColor(score.overall),\n              fontWeight: 'bold',\n              mb: 1\n            }}\n          >\n            {isNaN(score.overall) ? '0' : score.overall.toFixed(0)}%\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1 }}>\n            Overall Trading Score\n          </Typography>\n\n          {/* Target Status */}\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" spacing={1} mb={1}>\n            <Flag sx={{ fontSize: 16, color: theme.palette.info.main }} />\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              Target: {recommendedScore}%\n            </Typography>\n            <Chip\n              label={getTargetStatus(score.overall).message}\n              size=\"small\"\n              sx={{\n                backgroundColor: alpha(getTargetStatus(score.overall).color, 0.1),\n                color: getTargetStatus(score.overall).color,\n                fontWeight: 500,\n                fontSize: '0.7rem'\n              }}\n            />\n          </Stack>\n\n          <ProgressWithTarget\n            value={score.overall}\n            height={8}\n          />\n        </Box>\n\n        {/* Component Scores */}\n        <Stack spacing={2}>\n          {scoreComponents.map((component) => (\n            <Box key={component.name}>\n              <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" mb={0.5}>\n                <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n                  <Box sx={{ color: theme.palette.text.secondary }}>\n                    {component.icon}\n                  </Box>\n                  <Typography variant=\"body2\" fontWeight=\"medium\">\n                    {component.name}\n                  </Typography>\n                  {(['Risk Management', 'Performance', 'Discipline'].includes(component.name)) && (\n                    <Tooltip\n                      title={\n                        <Box sx={{ p: 1, maxWidth: 400 }}>\n                          <Typography variant=\"body2\" sx={{ whiteSpace: 'pre-line' }}>\n                            {getDetailedTooltip(component.name)}\n                          </Typography>\n                        </Box>\n                      }\n                      placement=\"top\"\n                      arrow\n                    >\n                      <HelpOutline\n                        sx={{\n                          fontSize: 16,\n                          color: theme.palette.text.secondary,\n                          cursor: 'help',\n                          '&:hover': {\n                            color: theme.palette.primary.main\n                          }\n                        }}\n                      />\n                    </Tooltip>\n                  )}\n                </Stack>\n                <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n                  <Typography\n                    variant=\"body2\"\n                    fontWeight=\"bold\"\n                    sx={{ color: getScoreColor(component.value) }}\n                  >\n                    {isNaN(component.value) ? '0' : component.value.toFixed(0)}%\n                  </Typography>\n                  {isScoreMeetingTarget(component.value) && (\n                    <Tooltip title=\"Meeting target\">\n                      <Flag sx={{ fontSize: 12, color: theme.palette.success.main }} />\n                    </Tooltip>\n                  )}\n                </Stack>\n              </Stack>\n              <ProgressWithTarget\n                value={component.value}\n                height={4}\n              />\n            </Box>\n          ))}\n        </Stack>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ScoreCard;\n","import React, { useState } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  LinearProgress,\n  Stack,\n  Chip,\n  useTheme,\n  Alert,\n  List,\n  ListItem,\n  ListItemText,\n  Tooltip\n} from '@mui/material';\nimport { alpha } from '@mui/material/styles';\nimport {\n  ExpandMore,\n  CheckCircle,\n  Warning,\n  Error,\n  TrendingUp,\n  Psychology,\n  Shield,\n  Timeline,\n  Rule,\n  HelpOutline\n} from '@mui/icons-material';\nimport { ScoreBreakdown as ScoreBreakdownType, TradingPattern } from '../../types/score';\nimport { getTagChipStyles } from '../../utils/tagColors';\n\ninterface ScoreBreakdownProps {\n  breakdown: ScoreBreakdownType;\n  pattern: TradingPattern;\n  recommendations: string[];\n  strengths: string[];\n  weaknesses: string[];\n}\n\nconst ScoreBreakdown: React.FC<ScoreBreakdownProps> = ({\n  breakdown,\n  pattern,\n  recommendations,\n  strengths,\n  weaknesses\n}) => {\n  const theme = useTheme();\n  const [expanded, setExpanded] = useState<string | false>('');\n\n  const handleChange = (panel: string) => (_: React.SyntheticEvent, isExpanded: boolean) => {\n    setExpanded(isExpanded ? panel : false);\n  };\n\n  const getScoreColor = (value: number) => {\n    if (value >= 50) return theme.palette.success.main;\n    if (value >= 30) return theme.palette.warning.main;\n    return theme.palette.error.main;\n  };\n\n  const getScoreIcon = (value: number) => {\n    if (value >= 50) return <CheckCircle sx={{ color: theme.palette.success.main }} />;\n    if (value >= 30) return <Warning sx={{ color: theme.palette.warning.main }} />;\n    return <Error sx={{ color: theme.palette.error.main }} />;\n  };\n\n  const scoreCategories = [\n    {\n      id: 'consistency',\n      name: 'Consistency',\n      icon: <Rule />,\n      score: breakdown.consistency.score,\n      factors: breakdown.consistency.factors,\n      description: 'How well you stick to your established trading patterns'\n    },\n    {\n      id: 'riskManagement',\n      name: 'Risk Management',\n      icon: <Shield />,\n      score: breakdown.riskManagement.score,\n      factors: breakdown.riskManagement.factors,\n      description: 'Your discipline in managing risk and position sizing'\n    },\n    {\n      id: 'performance',\n      name: 'Performance',\n      icon: <Timeline />,\n      score: breakdown.performance.score,\n      factors: breakdown.performance.factors,\n      description: 'Consistency of performance vs your historical patterns'\n    },\n    {\n      id: 'discipline',\n      name: 'Discipline',\n      icon: <Psychology />,\n      score: breakdown.discipline.score,\n      factors: breakdown.discipline.factors,\n      description: 'Trading discipline and emotional control'\n    }\n  ];\n\n  const formatFactorName = (factorKey: string): string => {\n    return factorKey\n      .replace(/([A-Z])/g, ' $1')\n      .replace(/^./, str => str.toUpperCase())\n      .trim();\n  };\n\n  const getScoreTooltip = (categoryName: string): string => {\n    switch (categoryName.toLowerCase()) {\n      case 'consistency':\n        return `Consistency Score measures how well you stick to your established trading patterns:\n\n• Session Consistency (25%): % of trades in your top 2 preferred sessions\n• Tag Consistency (25%): % of trades using your top 5 common strategies\n• Timing Consistency (25%): % of trades on your preferred trading days\n• Size Consistency (25%): Deviation from historical average position size\n\nCalculation: Average of all four factors. Uses 30-day lookback for historical patterns.\nHigher scores indicate better discipline in following proven patterns.`;\n\n      case 'risk management':\n        return `Risk Management Score evaluates your discipline in managing risk and position sizing:\n\n• Risk/Reward Ratio (25%): Deviation from target R:R settings\n• Position Sizing (25%): Variance in trade sizes (coefficient of variation)\n• Max Drawdown Adherence (25%): Staying within drawdown limits\n• Stop Loss Usage (25%): Win/loss ratio indicating stop discipline\n\nCalculation: Average of all four factors. Uses normalized amounts for dynamic risk.\nHigher scores indicate better risk control and capital preservation.`;\n\n      case 'performance':\n        return `Performance Score measures the consistency of your trading results vs historical patterns:\n\n• Win Rate Consistency (25%): Deviation from historical win rate\n• Profit Factor Stability (25%): Deviation from historical profit factor\n• Returns Consistency (25%): Variance in trade returns (coefficient of variation)\n• Volatility Control (25%): Current vs historical maximum drawdown\n\nCalculation: Average of all four factors. Uses normalized amounts for dynamic risk.\nHigher scores indicate more predictable and stable trading performance.`;\n\n      case 'discipline':\n        return `Discipline Score evaluates your emotional control and trading discipline:\n\n• Trading Plan Adherence (25%): Average of session and tag adherence\n• Emotional Control (25%): Position size variance (coefficient of variation)\n• Overtrading (25%): Current vs historical trading frequency\n• Rule Following (25%): % of trades with complete data entry\n\nCalculation: Average of all four factors. Uses normalized amounts for emotional control.\nHigher scores indicate better emotional control and systematic trading.`;\n\n      default:\n        return 'This score component measures specific aspects of your trading performance and discipline.';\n    }\n  };\n\n  const getFactorTooltip = (categoryName: string, factorKey: string): string => {\n    if (categoryName.toLowerCase() === 'discipline') {\n      switch (factorKey.toLowerCase()) {\n        case 'overtrading':\n          return 'Measures if you are taking too many trades relative to your historical average.\\n\\nCalculation: Compares your current trading frequency (trades per day) to your historical pattern. Score = 100 if frequency ratio ≤ 1.5x, then decreases as ratio increases.\\n\\nHigher scores = appropriate frequency (better). Lower scores = overtrading detected (worse).';\n        case 'emotionalcontrol':\n          return 'Evaluates your ability to stick to your trading plan without letting emotions drive decisions.\\n\\nCalculation: Measures variance in your position sizes (normalized for dynamic risk). Uses coefficient of variation: StdDev/Average. Score = 100 - (coefficient × 200).\\n\\nHigher scores = good emotional control (better). Lower scores = emotional trading patterns (worse).';\n        case 'tradingplanadhrence':\n        case 'tradingplanadherence':\n        case 'planadhrence':\n        case 'plan_adherence':\n          return 'Measures how well you follow your predetermined trading rules and strategies.\\n\\nCalculation: Average of session adherence (% of trades in your preferred sessions) and tag adherence (% of trades using your common strategies).\\n\\nHigher scores = better plan execution (better). Lower scores = poor discipline (worse).';\n        case 'rulefollowing':\n        case 'rule_following':\n          return 'Evaluates how consistently you fill out required trade information.\\n\\nCalculation: Percentage of trades that have session, tags, and risk/reward data filled out (breakeven trades exempt from risk/reward requirement).\\n\\nHigher scores = complete data entry (better). Lower scores = incomplete records (worse).';\n        case 'exitdiscipline':\n        case 'exit_discipline':\n          return 'Evaluates your ability to take profits and cut losses according to your plan.\\n\\nCalculation: Analyzes exit timing patterns and adherence to predetermined exit rules.\\n\\nHigher scores = good exit discipline (better). Lower scores = poor exit timing (worse).';\n        default:\n          return 'This factor measures a specific aspect of your trading discipline and emotional control.';\n      }\n    }\n\n    if (categoryName.toLowerCase() === 'consistency') {\n      switch (factorKey.toLowerCase()) {\n        case 'sessionconsistency':\n        case 'session_consistency':\n          return 'Measures how consistently you trade during your most profitable sessions.\\n\\nCalculation: (Trades in preferred sessions / Total trades with session data) × 100. Preferred sessions are your top 2 most-traded sessions from historical data.\\n\\nHigher scores = better session discipline (better). Lower scores = inconsistent timing (worse).';\n        case 'tagconsistency':\n        case 'tag_consistency':\n          return 'Evaluates how consistently you use your most successful trading strategies and setups.\\n\\nCalculation: (Trades using common tags / Total trades with tags) × 100. Common tags are your top 5 most-used strategy tags from historical data.\\n\\nHigher scores = sticking to proven patterns (better). Lower scores = random experimentation (worse).';\n        case 'timingconsistency':\n        case 'timing_consistency':\n          return 'Measures how consistently you trade on your preferred days of the week.\\n\\nCalculation: (Trades on preferred days / Total trades) × 100. Preferred days are determined from your historical trading pattern (days with significant activity).\\n\\nHigher scores = following established schedule (better). Lower scores = impulsive trading (worse).';\n        case 'sizeconsistency':\n        case 'size_consistency':\n          return 'Evaluates the consistency of your position sizes relative to your historical average.\\n\\nCalculation: Compares current average trade size to historical pattern. Score = 100 - (deviation percentage × 100). Uses normalized amounts for dynamic risk.\\n\\nHigher scores = disciplined sizing (better). Lower scores = emotional deviations (worse).';\n        default:\n          return 'This factor measures a specific aspect of your trading consistency and pattern adherence.';\n      }\n    }\n\n    if (categoryName.toLowerCase() === 'risk management') {\n      switch (factorKey.toLowerCase()) {\n        case 'riskrewardratio':\n        case 'risk_reward_ratio':\n          return 'Measures how well your actual risk/reward ratios match your target settings.\\n\\nCalculation: Compares average R:R of trades with R:R data to your target R:R setting. Score = 100 - (deviation percentage × 100).\\n\\nHigher scores = better adherence to targets (better). Lower scores = deviation from targets (worse).';\n        case 'positionsizing':\n        case 'position_sizing':\n          return 'Measures how consistent your trade sizes are relative to each other.\\n\\nCalculation: Uses coefficient of variation (StdDev/Average) of trade sizes. Score = 100 - (coefficient × 100). Uses normalized amounts for dynamic risk.\\n\\nHigher scores = consistent position sizing (better risk control). Lower scores = highly variable trade sizes (poor risk management).';\n        case 'maxdrawdownadherence':\n        case 'max_drawdown_adherence':\n          return 'Measures how well you stay within your maximum drawdown limits.\\n\\nCalculation: Tracks running P&L to find maximum drawdown percentage. Score = 100 if ≤ target, then decreases by 10 points per 1% over target. Uses normalized amounts for dynamic risk.\\n\\nHigher scores = better capital preservation (better). Lower scores = excessive drawdown risk (worse).';\n        case 'stoplossusage':\n        case 'stop_loss_usage':\n          return 'Approximates your use of stop losses by analyzing the ratio between average wins and losses.\\n\\nCalculation: (Average win / Average loss) × 50, capped at 100. Uses normalized amounts for dynamic risk. Assumes good stop loss discipline creates reasonable win/loss ratios.\\n\\nHigher scores = better stop loss discipline (better). Lower scores = poor risk control (worse).';\n        default:\n          return 'This factor measures a specific aspect of your risk management and capital preservation.';\n      }\n    }\n\n    if (categoryName.toLowerCase() === 'performance') {\n      switch (factorKey.toLowerCase()) {\n        case 'winrateconsistency':\n        case 'win_rate_consistency':\n          return 'Measures how consistent your current win rate is compared to your historical average.\\n\\nCalculation: Compares current win rate (wins/total trades) to historical pattern. Score = 100 - (deviation percentage × 100).\\n\\nHigher scores = maintaining consistent win rate (better). Lower scores = declining or volatile win rate (worse).';\n        case 'profitfactorstability':\n        case 'profit_factor_stability':\n          return 'Evaluates how stable your profit factor is compared to your historical pattern.\\n\\nCalculation: Profit factor = Total profits / Total losses. Compares current to historical pattern. Score = 100 - (deviation percentage × 100). Uses normalized amounts for dynamic risk.\\n\\nHigher scores = stable profitability (better). Lower scores = declining profit factor (worse).';\n        case 'returnsconsistency':\n        case 'returns_consistency':\n          return 'Measures the consistency of your trade returns by analyzing the variance in your trade amounts.\\n\\nCalculation: Uses coefficient of variation (StdDev/Average) of trade returns. Score = 100 - (coefficient × 50). Uses normalized amounts for dynamic risk.\\n\\nHigher scores = consistent returns (better). Lower scores = erratic performance (worse).';\n        case 'volatilitycontrol':\n        case 'volatility_control':\n          return 'Evaluates your ability to control drawdowns and maintain stable equity curves compared to your historical patterns.\\n\\nCalculation: Compares current maximum drawdown to historical pattern. Score = 100 if within 120% of historical, then decreases by 5 points per 1% excess. Uses normalized amounts for dynamic risk.\\n\\nHigher scores = good volatility control (better). Lower scores = excessive volatility (worse).';\n        default:\n          return 'This factor measures a specific aspect of your trading performance consistency.';\n      }\n    }\n\n    return 'This factor contributes to your overall score in this category.';\n  };\n\n  return (\n    <Card\n        sx={{\n          backgroundColor: theme.palette.mode === 'dark'\n            ? alpha(theme.palette.background.paper, 0.8)\n            : theme.palette.background.paper,\n          borderRadius: 2,\n          boxShadow: theme.shadows[2],\n          border: `1px solid ${theme.palette.mode === 'dark'\n            ? alpha(theme.palette.common.white, 0.1)\n            : alpha(theme.palette.common.black, 0.1)}`\n        }}\n      >\n      <CardContent sx={{ p: 3 }}>\n        <Typography\n          variant=\"h6\"\n          gutterBottom\n          sx={{\n            color: theme.palette.text.primary,\n            fontWeight: 600,\n            mb: 3\n          }}\n        >\n          🔍 Score Breakdown & Analysis\n        </Typography>\n\n        {/* Recommendations and Insights */}\n        <Stack spacing={2} mb={3}>\n          {recommendations.length > 0 && (\n            <Alert severity=\"info\" icon={<TrendingUp />}>\n              <Typography variant=\"subtitle2\" gutterBottom>\n                Key Recommendations\n              </Typography>\n              <List dense>\n                {recommendations.slice(0, 3).map((rec, index) => (\n                  <ListItem key={index} sx={{ py: 0 }}>\n                    <ListItemText primary={rec} />\n                  </ListItem>\n                ))}\n              </List>\n            </Alert>\n          )}\n\n          {strengths.length > 0 && (\n            <Alert severity=\"success\" icon={<CheckCircle />}>\n              <Typography variant=\"subtitle2\" gutterBottom>\n                Your Strengths\n              </Typography>\n              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                {strengths.map((strength, index) => (\n                  <Chip\n                    key={index}\n                    label={strength}\n                    size=\"small\"\n                    color=\"success\"\n                    variant=\"outlined\"\n                  />\n                ))}\n              </Box>\n            </Alert>\n          )}\n\n          {weaknesses.length > 0 && (\n            <Alert severity=\"warning\" icon={<Warning />}>\n              <Typography variant=\"subtitle2\" gutterBottom>\n                Areas for Improvement\n              </Typography>\n              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                {weaknesses.map((weakness, index) => (\n                  <Chip\n                    key={index}\n                    label={weakness}\n                    size=\"small\"\n                    color=\"warning\"\n                    variant=\"outlined\"\n                  />\n                ))}\n              </Box>\n            </Alert>\n          )}\n        </Stack>\n\n        {/* Detailed Score Breakdown */}\n        <Typography variant=\"subtitle1\" gutterBottom sx={{ mt: 2 }}>\n          Detailed Analysis\n        </Typography>\n\n        {scoreCategories.map((category) => (\n          <Box\n            key={category.id}\n            sx={{\n              backgroundColor: theme.palette.mode === 'dark'\n                ? alpha(theme.palette.background.paper, 0.6)\n                : alpha(theme.palette.background.paper, 0.8),\n              borderRadius: 3,\n              border: `1px solid ${theme.palette.mode === 'dark'\n                ? alpha(theme.palette.common.white, 0.1)\n                : alpha(theme.palette.common.black, 0.1)}`,\n              overflow: 'hidden',\n              transition: 'all 0.2s ease-in-out',\n              mb: 2,\n              '&:hover': {\n                transform: 'translateY(-1px)',\n                boxShadow: theme.shadows[3],\n              }\n            }}\n          >\n            <Accordion\n              expanded={expanded === category.id}\n              onChange={handleChange(category.id)}\n              sx={{\n                backgroundColor: 'transparent',\n                boxShadow: 'none',\n                '&:before': { display: 'none' },\n                '& .MuiAccordionSummary-root': {\n                  borderRadius: 3,\n                }\n              }}\n            >\n            <AccordionSummary expandIcon={<ExpandMore />}>\n              <Stack direction=\"row\" alignItems=\"center\" spacing={2} sx={{ width: '100%' }}>\n                <Box sx={{ color: theme.palette.text.secondary }}>\n                  {category.icon}\n                </Box>\n                <Box sx={{ flexGrow: 1 }}>\n                  <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n                    <Typography variant=\"subtitle2\" fontWeight=\"medium\">\n                      {category.name}\n                    </Typography>\n                    {(['Risk Management', 'Performance', 'Discipline'].includes(category.name)) && (\n                      <Tooltip\n                        title={\n                          <Box sx={{ p: 1, maxWidth: 400 }}>\n                            <Typography variant=\"body2\" sx={{ whiteSpace: 'pre-line' }}>\n                              {getScoreTooltip(category.name)}\n                            </Typography>\n                          </Box>\n                        }\n                        placement=\"top\"\n                        arrow\n                      >\n                        <HelpOutline\n                          sx={{\n                            fontSize: 16,\n                            color: theme.palette.text.secondary,\n                            cursor: 'help',\n                            '&:hover': {\n                              color: theme.palette.primary.main\n                            }\n                          }}\n                        />\n                      </Tooltip>\n                    )}\n                  </Stack>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    {category.description}\n                  </Typography>\n                </Box>\n                <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n                  {getScoreIcon(category.score)}\n                  <Typography\n                    variant=\"h6\"\n                    sx={{ color: getScoreColor(category.score), fontWeight: 'bold' }}\n                  >\n                    {isNaN(category.score) ? '0' : category.score.toFixed(0)}%\n                  </Typography>\n                </Stack>\n              </Stack>\n            </AccordionSummary>\n            <AccordionDetails>\n              <Stack spacing={2}>\n                <LinearProgress\n                  variant=\"determinate\"\n                  value={isNaN(category.score) ? 0 : category.score}\n                  sx={{\n                    height: 8,\n                    borderRadius: 4,\n                    backgroundColor: theme.palette.mode === 'dark'\n                      ? alpha(theme.palette.common.white, 0.1)\n                      : theme.palette.grey[200],\n                    '& .MuiLinearProgress-bar': {\n                      backgroundColor: getScoreColor(category.score),\n                      borderRadius: 4\n                    }\n                  }}\n                />\n                \n                <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n                  Factor Breakdown:\n                </Typography>\n                \n                <Stack spacing={1}>\n                  {Object.entries(category.factors).map(([factorKey, factorValue]) => (\n                    <Box key={factorKey}>\n                      <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\" mb={0.5}>\n                        <Stack direction=\"row\" alignItems=\"center\" spacing={1}>\n                          <Typography variant=\"body2\">\n                            {formatFactorName(factorKey)}\n                          </Typography>\n                          {(['discipline', 'risk management', 'consistency', 'performance'].includes(category.name.toLowerCase())) && (\n                            <Tooltip\n                              title={\n                                <Box sx={{ p: 1, maxWidth: 300 }}>\n                                  <Typography variant=\"body2\">\n                                    {getFactorTooltip(category.name, factorKey)}\n                                  </Typography>\n                                </Box>\n                              }\n                              placement=\"top\"\n                              arrow\n                            >\n                              <HelpOutline\n                                sx={{\n                                  fontSize: 14,\n                                  color: theme.palette.text.secondary,\n                                  cursor: 'help',\n                                  '&:hover': {\n                                    color: theme.palette.primary.main\n                                  }\n                                }}\n                              />\n                            </Tooltip>\n                          )}\n                        </Stack>\n                        <Typography\n                          variant=\"body2\"\n                          fontWeight=\"medium\"\n                          sx={{ color: getScoreColor(factorValue as number) }}\n                        >\n                          {isNaN(factorValue as number) ? '0' : (factorValue as number).toFixed(0)}%\n                        </Typography>\n                      </Stack>\n                      <LinearProgress\n                        variant=\"determinate\"\n                        value={isNaN(factorValue as number) ? 0 : (factorValue as number)}\n                        sx={{\n                          height: 4,\n                          borderRadius: 2,\n                          backgroundColor: theme.palette.mode === 'dark'\n                            ? alpha(theme.palette.common.white, 0.1)\n                            : theme.palette.grey[200],\n                          '& .MuiLinearProgress-bar': {\n                            backgroundColor: getScoreColor(factorValue as number),\n                            borderRadius: 2\n                          }\n                        }}\n                      />\n                    </Box>\n                  ))}\n                </Stack>\n              </Stack>\n            </AccordionDetails>\n          </Accordion>\n          </Box>\n        ))}\n\n        {/* Trading Pattern Summary */}\n        <Box\n          sx={{\n            mt: 3,\n            p: 2,\n            backgroundColor: theme.palette.mode === 'dark'\n              ? alpha(theme.palette.background.paper, 0.4)\n              : theme.palette.grey[50],\n            borderRadius: 2,\n            border: `1px solid ${theme.palette.mode === 'dark'\n              ? alpha(theme.palette.common.white, 0.1)\n              : alpha(theme.palette.common.black, 0.1)}`\n          }}\n        >\n          <Stack direction=\"row\" alignItems=\"center\" spacing={1} sx={{ mb: 1 }}>\n            <Typography\n              variant=\"subtitle2\"\n              sx={{\n                color: theme.palette.text.primary,\n                fontWeight: 600\n              }}\n            >\n              📈 Your Trading Pattern\n            </Typography>\n            <Tooltip\n              title={\n                <Box sx={{ p: 1, maxWidth: 380 }}>\n                  <Typography variant=\"body2\" sx={{ mb: 1, fontWeight: 600 }}>\n                    How Your Trading Pattern is Established:\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ mb: 1 }}>\n                    • <strong>Preferred Sessions:</strong> Your top 2 most frequently traded sessions based on historical data\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ mb: 1 }}>\n                    • <strong>Common Strategies:</strong> Your top 5 most-used tags/strategies from past trades\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ mb: 1 }}>\n                    • <strong>Trading Frequency:</strong> Average trades per week calculated from your trading history\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ mb: 1 }}>\n                    • <strong>Win Rate & Profit Factor:</strong> Historical averages used as benchmarks for consistency scoring\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ mb: 1, color: 'warning.main' }}>\n                    • <strong>Lookback Period:</strong> Pattern is based on trades from the last 30 days to reflect your current trading style\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{ fontStyle: 'italic', mt: 1 }}>\n                    Patterns are automatically updated as you add more trades. Requires minimum 3 trades for reliable pattern detection.\n                  </Typography>\n                </Box>\n              }\n              placement=\"top\"\n              arrow\n            >\n              <HelpOutline\n                sx={{\n                  fontSize: 18,\n                  color: theme.palette.text.secondary,\n                  cursor: 'help',\n                  '&:hover': {\n                    color: theme.palette.primary.main\n                  }\n                }}\n              />\n            </Tooltip>\n          </Stack>\n          <Stack spacing={1}>\n            <Typography variant=\"body2\" sx={{ color: theme.palette.text.secondary }}>\n              <strong style={{ color: theme.palette.text.primary }}>Preferred Sessions:</strong> {pattern.preferredSessions.join(', ') || 'Not established'}\n            </Typography>\n            <Box>\n              <Typography variant=\"body2\" sx={{ color: theme.palette.text.secondary, mb: 1 }}>\n                <strong style={{ color: theme.palette.text.primary }}>Common Strategies:</strong>\n              </Typography>\n              {pattern.commonTags.length > 0 ? (\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                  {pattern.commonTags.slice(0, 5).map((tag, index) => (\n                    <Chip\n                      key={index}\n                      label={tag}\n                      size=\"small\"\n                      sx={getTagChipStyles(tag, theme)}\n                    />\n                  ))}\n                </Box>\n              ) : (\n                <Typography variant=\"body2\" sx={{ color: theme.palette.text.secondary, fontStyle: 'italic' }}>\n                  Not established\n                </Typography>\n              )}\n            </Box>\n            <Typography variant=\"body2\" sx={{ color: theme.palette.text.secondary }}>\n              <strong style={{ color: theme.palette.text.primary }}>Trading Frequency:</strong> {isNaN(pattern.avgTradesPerWeek) ? '0.0' : pattern.avgTradesPerWeek.toFixed(1)} trades/week\n            </Typography>\n            <Typography variant=\"body2\" sx={{ color: theme.palette.text.secondary }}>\n              <strong style={{ color: theme.palette.text.primary }}>Win Rate:</strong> {isNaN(pattern.winRate) ? '0.0' : pattern.winRate.toFixed(1)}%\n            </Typography>\n            <Typography variant=\"body2\" sx={{ color: theme.palette.text.secondary }}>\n              <strong style={{ color: theme.palette.text.primary }}>Profit Factor:</strong> {isNaN(pattern.profitFactor) ? '0.00' : pattern.profitFactor.toFixed(2)}\n            </Typography>\n          </Stack>\n        </Box>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ScoreBreakdown;\n","import React, { useMemo } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  useTheme,\n  Stack,\n  Tabs,\n  Tab\n} from '@mui/material';\nimport { alpha } from '@mui/material/styles';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  Legend,\n  Area,\n  AreaChart\n} from 'recharts';\nimport { format } from 'date-fns';\nimport { ScoreHistory as ScoreHistoryType } from '../../types/score';\n\ninterface ScoreHistoryProps {\n  history: ScoreHistoryType[];\n  period: 'daily' | 'weekly' | 'monthly' | 'yearly';\n  onPeriodChange: (period: 'daily' | 'weekly' | 'monthly' | 'yearly') => void;\n}\n\nconst ScoreHistoryComponent: React.FC<ScoreHistoryProps> = ({\n  history,\n  period,\n  onPeriodChange\n}) => {\n  const theme = useTheme();\n\n  const chartData = useMemo(() => {\n    return history.map(entry => ({\n      date: entry.date,\n      dateLabel: format(entry.date,\n        period === 'daily' ? 'MMM dd' :\n        period === 'weekly' ? 'MMM dd' :\n        period === 'monthly' ? 'MMM yyyy' :\n        'yyyy'\n      ),\n      overall: entry.metrics.overall,\n      consistency: entry.metrics.consistency,\n      riskManagement: entry.metrics.riskManagement,\n      performance: entry.metrics.performance,\n      discipline: entry.metrics.discipline,\n      tradeCount: entry.tradeCount\n    }));\n  }, [history, period]);\n\n  const getScoreColor = (value: number) => {\n    if (value >= 50) return theme.palette.success.main;\n    if (value >= 30) return theme.palette.warning.main;\n    return theme.palette.error.main;\n  };\n\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      const data = payload[0].payload;\n      return (\n        <Box\n          sx={{\n            backgroundColor: theme.palette.mode === 'dark'\n              ? alpha(theme.palette.background.paper, 0.95)\n              : theme.palette.background.paper,\n            border: `1px solid ${theme.palette.divider}`,\n            borderRadius: 2,\n            p: 2,\n            boxShadow: theme.shadows[8],\n            backdropFilter: 'blur(10px)'\n          }}\n        >\n          <Typography variant=\"subtitle2\" gutterBottom>\n            {label}\n          </Typography>\n          <Stack spacing={0.5}>\n            <Typography variant=\"body2\">\n              <strong>Overall Score:</strong> {data.overall.toFixed(0)}%\n            </Typography>\n            <Typography variant=\"body2\">\n              <strong>Trades:</strong> {data.tradeCount}\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Consistency: {data.consistency.toFixed(0)}%\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Risk Mgmt: {data.riskManagement.toFixed(0)}%\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Performance: {data.performance.toFixed(0)}%\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Discipline: {data.discipline.toFixed(0)}%\n            </Typography>\n          </Stack>\n        </Box>\n      );\n    }\n    return null;\n  };\n\n  const averageScore = useMemo(() => {\n    if (chartData.length === 0) return 0;\n    return chartData.reduce((sum, entry) => sum + entry.overall, 0) / chartData.length;\n  }, [chartData]);\n\n  const latestScore = chartData.length > 0 ? chartData[chartData.length - 1].overall : 0;\n  const scoreChange = chartData.length > 1 \n    ? latestScore - chartData[chartData.length - 2].overall \n    : 0;\n\n  return (\n    <Card\n      sx={{\n        backgroundColor: theme.palette.mode === 'dark'\n          ? alpha(theme.palette.background.paper, 0.8)\n          : theme.palette.background.paper,\n        borderRadius: 2,\n        boxShadow: theme.shadows[2],\n        border: `1px solid ${theme.palette.mode === 'dark'\n          ? alpha(theme.palette.common.white, 0.1)\n          : alpha(theme.palette.common.black, 0.1)}`\n      }}\n    >\n      <CardContent sx={{ p: 3 }}>\n        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" mb={3}>\n          <Typography\n            variant=\"h6\"\n            sx={{\n              color: theme.palette.text.primary,\n              fontWeight: 600\n            }}\n          >\n            📈 Score History\n          </Typography>\n\n          <Tabs\n            value={period}\n            onChange={(_, newPeriod) => newPeriod && onPeriodChange(newPeriod)}\n            sx={{\n              minHeight: 32,\n              backgroundColor: theme.palette.mode === 'light'\n                ? '#f0f0f0'\n                : alpha(theme.palette.background.paper, 0.4),\n              borderRadius: '16px',\n              padding: '2px',\n              '& .MuiTabs-flexContainer': {\n                gap: '2px'\n              },\n              '& .MuiTabs-indicator': {\n                display: 'none'\n              }\n            }}\n          >\n            <Tab\n              label=\"Daily\"\n              value=\"daily\"\n              sx={{\n                minHeight: 28,\n                textTransform: 'none',\n                fontSize: '0.75rem',\n                fontWeight: 500,\n                color: 'text.secondary',\n                borderRadius: '12px',\n                padding: '4px 12px',\n                minWidth: 'auto',\n                '&.Mui-selected': {\n                  color: theme.palette.mode === 'dark' ? 'white' : 'background.paper',\n                  backgroundColor: 'primary.main',\n                  boxShadow: theme.shadows[1]\n                },\n                '&:hover:not(.Mui-selected)': {\n                  backgroundColor: alpha(theme.palette.primary.main, 0.05),\n                  color: 'primary.main'\n                }\n              }}\n            />\n            <Tab\n              label=\"Weekly\"\n              value=\"weekly\"\n              sx={{\n                minHeight: 28,\n                textTransform: 'none',\n                fontSize: '0.75rem',\n                fontWeight: 500,\n                color: 'text.secondary',\n                borderRadius: '12px',\n                padding: '4px 12px',\n                minWidth: 'auto',\n                '&.Mui-selected': {\n                  color: theme.palette.mode === 'dark' ? 'white' : 'background.paper',\n                  backgroundColor: 'primary.main',\n                  boxShadow: theme.shadows[1]\n                },\n                '&:hover:not(.Mui-selected)': {\n                  backgroundColor: alpha(theme.palette.primary.main, 0.05),\n                  color: 'primary.main'\n                }\n              }}\n            />\n            <Tab\n              label=\"Monthly\"\n              value=\"monthly\"\n              sx={{\n                minHeight: 28,\n                textTransform: 'none',\n                fontSize: '0.75rem',\n                fontWeight: 500,\n                color: 'text.secondary',\n                borderRadius: '12px',\n                padding: '4px 12px',\n                minWidth: 'auto',\n                '&.Mui-selected': {\n                  color: theme.palette.mode === 'dark' ? 'white' : 'background.paper',\n                  backgroundColor: 'primary.main',\n                  boxShadow: theme.shadows[1]\n                },\n                '&:hover:not(.Mui-selected)': {\n                  backgroundColor: alpha(theme.palette.primary.main, 0.05),\n                  color: 'primary.main'\n                }\n              }}\n            />\n            <Tab\n              label=\"Yearly\"\n              value=\"yearly\"\n              sx={{\n                minHeight: 28,\n                textTransform: 'none',\n                fontSize: '0.75rem',\n                fontWeight: 500,\n                color: 'text.secondary',\n                borderRadius: '12px',\n                padding: '4px 12px',\n                minWidth: 'auto',\n                '&.Mui-selected': {\n                  color: theme.palette.mode === 'dark' ? 'white' : 'background.paper',\n                  backgroundColor: 'primary.main',\n                  boxShadow: theme.shadows[1]\n                },\n                '&:hover:not(.Mui-selected)': {\n                  backgroundColor: alpha(theme.palette.primary.main, 0.05),\n                  color: 'primary.main'\n                }\n              }}\n            />\n          </Tabs>\n        </Stack>\n\n        {chartData.length === 0 ? (\n          <Box sx={{ textAlign: 'center', py: 4 }}>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Not enough data for {period} score history.\n              <br />\n              Complete more trades to see your score trends.\n            </Typography>\n          </Box>\n        ) : (\n          <>\n            {/* Summary Stats */}\n            <Stack direction=\"row\" spacing={3} mb={3}>\n              <Box>\n                <Typography variant=\"h4\" sx={{ color: getScoreColor(latestScore), fontWeight: 'bold' }}>\n                  {latestScore.toFixed(0)}%\n                </Typography>\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  Latest Score\n                </Typography>\n              </Box>\n              <Box>\n                <Typography \n                  variant=\"h4\" \n                  sx={{ \n                    color: scoreChange >= 0 ? theme.palette.success.main : theme.palette.error.main,\n                    fontWeight: 'bold'\n                  }}\n                >\n                  {scoreChange >= 0 ? '+' : ''}{scoreChange.toFixed(0)}%\n                </Typography>\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  Change\n                </Typography>\n              </Box>\n              <Box>\n                <Typography variant=\"h4\" sx={{ color: theme.palette.text.primary, fontWeight: 'bold' }}>\n                  {averageScore.toFixed(0)}%\n                </Typography>\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  Average\n                </Typography>\n              </Box>\n            </Stack>\n\n            {/* Main Chart */}\n            <Box sx={{ height: 300, mb: 2 }}>\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <AreaChart data={chartData}>\n                  <defs>\n                    <linearGradient id=\"overallGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"5%\" stopColor={theme.palette.primary.main} stopOpacity={theme.palette.mode === 'dark' ? 0.4 : 0.3}/>\n                      <stop offset=\"95%\" stopColor={theme.palette.primary.main} stopOpacity={0}/>\n                    </linearGradient>\n                  </defs>\n                  <CartesianGrid\n                    strokeDasharray=\"3 3\"\n                    stroke={theme.palette.mode === 'dark'\n                      ? alpha(theme.palette.common.white, 0.1)\n                      : theme.palette.divider\n                    }\n                  />\n                  <XAxis\n                    dataKey=\"dateLabel\"\n                    stroke={theme.palette.text.secondary}\n                    fontSize={12}\n                    tick={{ fill: theme.palette.text.secondary }}\n                  />\n                  <YAxis\n                    domain={[0, 100]}\n                    stroke={theme.palette.text.secondary}\n                    fontSize={12}\n                    tick={{ fill: theme.palette.text.secondary }}\n                  />\n                  <Tooltip content={<CustomTooltip />} />\n                  <Area\n                    type=\"monotone\"\n                    dataKey=\"overall\"\n                    stroke={theme.palette.primary.main}\n                    strokeWidth={3}\n                    fill=\"url(#overallGradient)\"\n                    name=\"Overall Score\"\n                  />\n                </AreaChart>\n              </ResponsiveContainer>\n            </Box>\n\n            {/* Component Breakdown Chart */}\n            <Typography variant=\"subtitle2\" gutterBottom sx={{ mt: 2 }}>\n              Score Components\n            </Typography>\n            <Box sx={{ height: 200 }}>\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={chartData}>\n                  <CartesianGrid\n                    strokeDasharray=\"3 3\"\n                    stroke={theme.palette.mode === 'dark'\n                      ? alpha(theme.palette.common.white, 0.1)\n                      : theme.palette.divider\n                    }\n                  />\n                  <XAxis\n                    dataKey=\"dateLabel\"\n                    stroke={theme.palette.text.secondary}\n                    fontSize={12}\n                    tick={{ fill: theme.palette.text.secondary }}\n                  />\n                  <YAxis\n                    domain={[0, 100]}\n                    stroke={theme.palette.text.secondary}\n                    fontSize={12}\n                    tick={{ fill: theme.palette.text.secondary }}\n                  />\n                  <Tooltip content={<CustomTooltip />} />\n                  <Legend />\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"consistency\"\n                    stroke={theme.palette.info.main}\n                    strokeWidth={2}\n                    dot={false}\n                    name=\"Consistency\"\n                  />\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"riskManagement\"\n                    stroke={theme.palette.success.main}\n                    strokeWidth={2}\n                    dot={false}\n                    name=\"Risk Mgmt\"\n                  />\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"performance\"\n                    stroke={theme.palette.warning.main}\n                    strokeWidth={2}\n                    dot={false}\n                    name=\"Performance\"\n                  />\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"discipline\"\n                    stroke={theme.palette.error.main}\n                    strokeWidth={2}\n                    dot={false}\n                    name=\"Discipline\"\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </Box>\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ScoreHistoryComponent;\n","import React, { useState, useMemo } from 'react';\nimport {\n  Box,\n  Typography,\n  Chip,\n  Stack,\n  TextField,\n  Autocomplete,\n  Card,\n  CardContent,\n  IconButton,\n  Tooltip,\n  Alert,\n  List,\n  ListItem,\n  ListItemText,\n  Button,\n  Divider,\n  InputAdornment\n} from '@mui/material';\nimport { useTheme, alpha } from '@mui/material/styles';\nimport { HelpOutline, Close, Search as SearchIcon } from '@mui/icons-material';\nimport { Trade } from '../../types/trade';\nimport {\n  getTagChipStyles,\n  formatTagForDisplay,\n  isGroupedTag,\n  getTagGroup,\n  getUniqueTagGroups,\n  filterTagsByGroup\n} from '../../utils/tagColors';\nimport { scrollbarStyles } from '../../styles/scrollbarStyles';\n\ninterface ExcludedTagsSelectorProps {\n  trades: Trade[];\n  excludedTags: string[];\n  onExcludedTagsChange: (tags: string[]) => void;\n  allTags?: string[]; // Add allTags prop to receive calendar.tags\n}\n\nconst ExcludedTagsSelector: React.FC<ExcludedTagsSelectorProps> = ({\n  trades,\n  excludedTags,\n  onExcludedTagsChange,\n  allTags: propAllTags\n}) => {\n  const theme = useTheme();\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Use calendar.tags from props, fallback to extracting from trades if not available\n  const allTags = useMemo(() => {\n    if (propAllTags && propAllTags.length > 0) {\n      // Filter out system tags like Partials from calendar.tags\n      return propAllTags.filter(tag => !tag.startsWith('Partials:')).sort();\n    }\n\n    // Fallback: extract from trades (for backwards compatibility)\n    const tagSet = new Set<string>();\n    trades.forEach(trade => {\n      if (trade.tags) {\n        trade.tags.forEach(tag => {\n          // Filter out system tags like Partials\n          if (!tag.startsWith('Partials:')) {\n            tagSet.add(tag);\n          }\n        });\n      }\n    });\n    return Array.from(tagSet).sort();\n  }, [propAllTags, trades]);\n\n  // Filter tags based on search term\n  const filteredTags = useMemo(() => {\n    if (!searchTerm) return allTags;\n\n    const term = searchTerm.toLowerCase();\n    return allTags.filter(tag =>\n      tag.toLowerCase().includes(term) ||\n      formatTagForDisplay(tag).toLowerCase().includes(term)\n    );\n  }, [allTags, searchTerm]);\n\n  // Available tags (not already excluded) from filtered tags\n  const availableTags = useMemo(() => {\n    return filteredTags.filter(tag => !excludedTags.includes(tag));\n  }, [filteredTags, excludedTags]);\n\n  // Group available tags by their group\n  const groupedAvailableTags = useMemo(() => {\n    const groups: Record<string, string[]> = {};\n\n    availableTags.forEach(tag => {\n      if (isGroupedTag(tag)) {\n        const group = getTagGroup(tag);\n        if (!groups[group]) {\n          groups[group] = [];\n        }\n        groups[group].push(tag);\n      } else {\n        if (!groups['Ungrouped']) {\n          groups['Ungrouped'] = [];\n        }\n        groups['Ungrouped'].push(tag);\n      }\n    });\n\n    return groups;\n  }, [availableTags]);\n\n  const handleAddTag = (tag: string) => {\n    if (tag && !excludedTags.includes(tag)) {\n      onExcludedTagsChange([...excludedTags, tag]);\n    }\n  };\n\n  const handleAddAllInCategory = (category: string) => {\n    const categoryTags = groupedAvailableTags[category] || [];\n    const newExcludedTags = [...excludedTags, ...categoryTags];\n    onExcludedTagsChange(newExcludedTags);\n  };\n\n  const handleRemoveTag = (tagToRemove: string) => {\n    onExcludedTagsChange(excludedTags.filter(tag => tag !== tagToRemove));\n  };\n\n  return (\n    <Card\n      sx={{\n        backgroundColor: theme.palette.mode === 'dark'\n          ? 'rgba(255, 255, 255, 0.02)'\n          : 'rgba(0, 0, 0, 0.02)',\n        border: `1px solid ${theme.palette.divider}`,\n        borderRadius: 2\n      }}\n    >\n      <CardContent sx={{ p: 3 }}>\n        <Stack direction=\"row\" alignItems=\"center\" spacing={1} mb={2}>\n          <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n            🚫 Excluded Tags from Pattern Analysis\n          </Typography>\n          <Tooltip title=\"Tags excluded from pattern analysis won't be considered when identifying high-performing or declining tag combinations. This is useful for filtering out temporary or irrelevant tags.\">\n            <IconButton size=\"small\">\n              <HelpOutline fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n        </Stack>\n\n        <Alert severity=\"info\" sx={{ mb: 3 }}>\n          <Typography variant=\"body2\">\n            Excluded tags will not be included in pattern analysis calculations. This helps focus the analysis on meaningful trading patterns by filtering out temporary, experimental, or irrelevant tags.\n          </Typography>\n        </Alert>\n\n        {/* Add new excluded tag */}\n        <Box mb={3}>\n          <Typography variant=\"subtitle2\" gutterBottom sx={{ fontWeight: 600 }}>\n            Add Tag to Exclude\n          </Typography>\n          <TextField\n            placeholder=\"Search for tags to exclude...\"\n            variant=\"outlined\"\n            size=\"small\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            slotProps={{\n              input: {\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <SearchIcon />\n                  </InputAdornment>\n                ),\n              }\n            }}\n            sx={{\n              width: '100%',\n              '& .MuiOutlinedInput-root': {\n                backgroundColor: theme.palette.mode === 'dark'\n                  ? 'rgba(255, 255, 255, 0.05)'\n                  : 'rgba(0, 0, 0, 0.02)',\n              }\n            }}\n          />\n        </Box>\n\n        {/* Available Tags by Category */}\n        {Object.keys(groupedAvailableTags).length > 0 && (\n          <Box sx={{\n            maxHeight: '250px',\n            overflow: 'auto',\n            border: `1px solid ${theme.palette.divider}`,\n            borderRadius: 1,\n            mb: 3,\n            ...scrollbarStyles(theme)\n          }}>\n            {Object.entries(groupedAvailableTags).map(([group, tags]) => (\n              <Box key={group}>\n                <Box sx={{\n                  p: 1.5,\n                  bgcolor: alpha(theme.palette.primary.main, 0.05),\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'space-between'\n                }}>\n                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                    <Typography variant=\"subtitle2\" fontWeight={600}>\n                      {group}\n                    </Typography>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      {tags.length} tag{tags.length !== 1 ? 's' : ''}\n                    </Typography>\n                  </Box>\n                  <Button\n                    size=\"small\"\n                    variant=\"outlined\"\n                    onClick={() => handleAddAllInCategory(group)}\n                    sx={{ minWidth: 'auto', px: 1 }}\n                  >\n                    Add All\n                  </Button>\n                </Box>\n                <Divider />\n                <List disablePadding>\n                  {tags.map((tag) => (\n                    <ListItem\n                      key={tag}\n                      secondaryAction={\n                        <Button\n                          size=\"small\"\n                          variant=\"text\"\n                          onClick={() => handleAddTag(tag)}\n                          sx={{ minWidth: 'auto', p: 0.5 }}\n                        >\n                          Add\n                        </Button>\n                      }\n                      sx={{\n                        '&:hover': {\n                          bgcolor: alpha(theme.palette.primary.main, 0.05)\n                        }\n                      }}\n                    >\n                      <ListItemText\n                        primary={\n                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                            <Chip\n                              label={formatTagForDisplay(tag, true)}\n                              size=\"small\"\n                              sx={getTagChipStyles(tag, theme)}\n                            />\n                          </Box>\n                        }\n                      />\n                    </ListItem>\n                  ))}\n                </List>\n              </Box>\n            ))}\n          </Box>\n        )}\n\n        {Object.keys(groupedAvailableTags).length === 0 && (\n          <Box sx={{\n            p: 2,\n            textAlign: 'center',\n            color: 'text.secondary',\n            border: `1px solid ${theme.palette.divider}`,\n            borderRadius: 1,\n            mb: 3\n          }}>\n            <Typography variant=\"body2\">\n              {searchTerm ? 'No matching tags found' : 'No tags available to exclude'}\n            </Typography>\n          </Box>\n        )}\n\n        {/* Currently excluded tags */}\n        <Box>\n          <Typography variant=\"subtitle2\" gutterBottom sx={{ fontWeight: 600 }}>\n            Currently Excluded Tags ({excludedTags.length})\n          </Typography>\n          \n          {excludedTags.length === 0 ? (\n            <Typography variant=\"body2\" color=\"text.secondary\" sx={{ fontStyle: 'italic' }}>\n              No tags are currently excluded from pattern analysis.\n            </Typography>\n          ) : (\n            <Stack direction=\"row\" spacing={1} flexWrap=\"wrap\" useFlexGap>\n              {excludedTags.map(tag => (\n                <Chip\n                  key={tag}\n                  label={formatTagForDisplay(tag)}\n                  onDelete={() => handleRemoveTag(tag)}\n                  deleteIcon={\n                    <Close \n                      sx={{ \n                        color: theme.palette.mode === 'dark' ? 'white' : 'inherit',\n                        '&:hover': {\n                          color: theme.palette.error.main\n                        }\n                      }} \n                    />\n                  }\n                  sx={{\n                    ...getTagChipStyles(tag, theme),\n                    '& .MuiChip-deleteIcon': {\n                      color: theme.palette.mode === 'dark' ? 'white' : 'inherit',\n                      '&:hover': {\n                        color: theme.palette.error.main\n                      }\n                    }\n                  }}\n                />\n              ))}\n            </Stack>\n          )}\n        </Box>\n\n        {/* Summary information */}\n        {allTags.length > 0 && (\n          <Box mt={3} p={2} sx={{\n            backgroundColor: theme.palette.mode === 'dark'\n              ? 'rgba(255, 255, 255, 0.02)'\n              : 'rgba(0, 0, 0, 0.02)',\n            borderRadius: 1,\n            border: `1px solid ${theme.palette.divider}`\n          }}>\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              <strong>Pattern Analysis Coverage:</strong> {availableTags.length} of {allTags.length} tags will be included in pattern analysis\n              {excludedTags.length > 0 && (\n                <span> ({excludedTags.length} excluded)</span>\n              )}\n            </Typography>\n          </Box>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ExcludedTagsSelector;\n","import React, { useState, useMemo } from 'react';\nimport {\n  Box,\n  Typography,\n  TextField,\n  FormControlLabel,\n  Checkbox,\n  Chip,\n  useTheme,\n  Autocomplete,\n  Stack,\n  List,\n  ListItem,\n  ListItemText,\n  Button,\n  Divider,\n  InputAdornment\n} from '@mui/material';\nimport { Search as SearchIcon } from '@mui/icons-material';\n\nimport { alpha } from '@mui/material/styles';\nimport { Trade } from '../../types/trade';\nimport {\n  getTagChipStyles,\n  formatTagForDisplay,\n  isGroupedTag,\n  getTagGroup,\n  getUniqueTagGroups,\n  filterTagsByGroup\n} from '../../utils/tagColors';\nimport { scrollbarStyles } from '../../styles/scrollbarStyles';\n\ninterface TagSelectorProps {\n  trades: Trade[];\n  selectedTags: string[];\n  onTagsChange: (tags: string[]) => void;\n  allTags?: string[]; // Add allTags prop to receive calendar.tags\n}\n\nconst TagSelector: React.FC<TagSelectorProps> = ({\n  trades,\n  selectedTags,\n  onTagsChange,\n  allTags: propAllTags\n}) => {\n  const theme = useTheme();\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Use calendar.tags from props, fallback to extracting from trades if not available\n  const allTags = useMemo(() => {\n    if (propAllTags && propAllTags.length > 0) {\n      // Filter out Partials tags from calendar.tags\n      return propAllTags.filter(tag => !tag.startsWith('Partials:')).sort();\n    }\n\n    // Fallback: extract from trades (for backwards compatibility)\n    const tagSet = new Set<string>();\n    trades.forEach(trade => {\n      if (trade.tags) {\n        trade.tags.forEach(tag => {\n          // Filter out Partials tags\n          if (!tag.startsWith('Partials:')) {\n            tagSet.add(tag);\n          }\n        });\n      }\n    });\n    return Array.from(tagSet).sort();\n  }, [propAllTags, trades]);\n\n  // Calculate tag usage statistics\n  const tagStats = useMemo(() => {\n    const stats: Record<string, { count: number; percentage: number }> = {};\n    allTags.forEach(tag => {\n      const count = trades.filter(trade =>\n        trade.tags && trade.tags.includes(tag)\n      ).length;\n      const percentage = trades.length > 0 ? Math.round((count / trades.length) * 100) : 0;\n      stats[tag] = { count, percentage };\n    });\n    return stats;\n  }, [allTags, trades]);\n\n  // Filter tags based on search term\n  const filteredTags = useMemo(() => {\n    if (!searchTerm) return allTags;\n\n    const term = searchTerm.toLowerCase();\n    return allTags.filter(tag =>\n      tag.toLowerCase().includes(term) ||\n      formatTagForDisplay(tag).toLowerCase().includes(term)\n    );\n  }, [allTags, searchTerm]);\n\n  // Available tags (not already selected) from filtered tags\n  const availableTags = useMemo(() => {\n    return filteredTags.filter(tag => !selectedTags.includes(tag));\n  }, [filteredTags, selectedTags]);\n\n  // Group available tags by their group\n  const groupedAvailableTags = useMemo(() => {\n    const groups: Record<string, string[]> = {};\n\n    availableTags.forEach(tag => {\n      if (isGroupedTag(tag)) {\n        const group = getTagGroup(tag);\n        if (!groups[group]) {\n          groups[group] = [];\n        }\n        groups[group].push(tag);\n      } else {\n        if (!groups['Ungrouped']) {\n          groups['Ungrouped'] = [];\n        }\n        groups['Ungrouped'].push(tag);\n      }\n    });\n\n    return groups;\n  }, [availableTags]);\n\n  const handleAddTag = (tag: string) => {\n    if (tag && !selectedTags.includes(tag)) {\n      onTagsChange([...selectedTags, tag]);\n    }\n  };\n\n  const handleRemoveTag = (tag: string) => {\n    onTagsChange(selectedTags.filter(t => t !== tag));\n  };\n\n  const handleAddAllInCategory = (category: string) => {\n    const categoryTags = groupedAvailableTags[category] || [];\n    const newSelectedTags = [...selectedTags, ...categoryTags];\n    onTagsChange(newSelectedTags);\n  };\n\n  const handleClearAll = () => {\n    onTagsChange([]);\n  };\n\n  return (\n    <Box>\n      <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 3 }}>\n        Select specific tags to track their usage frequency across your trades. This will show how often you use each selected strategy in the Analysis tab.\n      </Typography>\n\n      {/* Search Field */}\n      <Box mb={2}>\n        <Typography variant=\"subtitle2\" gutterBottom sx={{ fontWeight: 600 }}>\n          Add Tags to Track\n        </Typography>\n        <TextField\n          placeholder=\"Search for tags to track...\"\n          variant=\"outlined\"\n          size=\"small\"\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n          slotProps={{\n            input: {\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <SearchIcon />\n                </InputAdornment>\n              ),\n            }\n          }}\n          sx={{\n            width: '100%',\n            '& .MuiOutlinedInput-root': {\n              backgroundColor: theme.palette.mode === 'dark'\n                ? 'rgba(255, 255, 255, 0.05)'\n                : 'rgba(0, 0, 0, 0.02)',\n            }\n          }}\n        />\n      </Box>\n\n      {/* Available Tags by Category */}\n      {Object.keys(groupedAvailableTags).length > 0 && (\n        <Box sx={{\n          maxHeight: '300px',\n          overflow: 'auto',\n          border: `1px solid ${theme.palette.divider}`,\n          borderRadius: 1,\n          mb: 2,\n          ...scrollbarStyles(theme)\n        }}>\n          {Object.entries(groupedAvailableTags).map(([group, tags]) => (\n            <Box key={group}>\n              <Box sx={{\n                p: 1.5,\n                bgcolor: alpha(theme.palette.primary.main, 0.05),\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'space-between'\n              }}>\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                  <Typography variant=\"subtitle2\" fontWeight={600}>\n                    {group}\n                  </Typography>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    {tags.length} tag{tags.length !== 1 ? 's' : ''}\n                  </Typography>\n                </Box>\n                <Button\n                  size=\"small\"\n                  variant=\"outlined\"\n                  onClick={() => handleAddAllInCategory(group)}\n                  sx={{ minWidth: 'auto', px: 1 }}\n                >\n                  Add All\n                </Button>\n              </Box>\n              <Divider />\n              <List disablePadding>\n                {tags.map((tag) => {\n                  const stats = tagStats[tag];\n                  return (\n                    <ListItem\n                      key={tag}\n                      secondaryAction={\n                        <Button\n                          size=\"small\"\n                          variant=\"text\"\n                          onClick={() => handleAddTag(tag)}\n                          sx={{ minWidth: 'auto', p: 0.5 }}\n                        >\n                          Add\n                        </Button>\n                      }\n                      sx={{\n                        '&:hover': {\n                          bgcolor: alpha(theme.palette.primary.main, 0.05)\n                        }\n                      }}\n                    >\n                      <ListItemText\n                        primary={\n                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                            <Chip\n                              label={formatTagForDisplay(tag, true)}\n                              size=\"small\"\n                              sx={getTagChipStyles(tag, theme)}\n                            />\n                            <Typography variant=\"caption\" color=\"text.secondary\">\n                              {stats.count} trades ({stats.percentage}%)\n                            </Typography>\n                          </Box>\n                        }\n                      />\n                    </ListItem>\n                  );\n                })}\n              </List>\n            </Box>\n          ))}\n        </Box>\n      )}\n\n      {Object.keys(groupedAvailableTags).length === 0 && (\n        <Box sx={{\n          p: 2,\n          textAlign: 'center',\n          color: 'text.secondary',\n          border: `1px solid ${theme.palette.divider}`,\n          borderRadius: 1,\n          mb: 2\n        }}>\n          <Typography variant=\"body2\">\n            {searchTerm ? 'No matching tags found' : 'All tags are already selected'}\n          </Typography>\n        </Box>\n      )}\n\n     \n\n      {/* Selected Tags Summary */}\n      {selectedTags.length > 0 && (\n        <Box sx={{ mt: 2, p: 2, bgcolor: 'background.default', borderRadius: 1 }}>\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" mb={1}>\n            <Typography variant=\"subtitle2\">\n              Selected Tags ({selectedTags.length}):\n            </Typography>\n            <Chip\n              label=\"Clear All\"\n              size=\"small\"\n              onClick={handleClearAll}\n              sx={{ cursor: 'pointer' }}\n            />\n          </Stack>\n          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n            {selectedTags.map(tag => {\n              const stats = tagStats[tag];\n              return (\n                <Chip\n                  key={tag}\n                  label={`${tag} (${stats.percentage}%)`}\n                  size=\"small\"\n                  sx={{\n                    ...getTagChipStyles(tag, theme),\n                    '& .MuiChip-deleteIcon': {\n                      color: 'inherit',\n                      '&:hover': {\n                        color: 'inherit',\n                        opacity: 0.7\n                      }\n                    }\n                  }}\n                  onDelete={() => handleRemoveTag(tag)}\n                />\n              );\n            })}\n          </Box>\n        </Box>\n      )}\n\n    </Box>\n  );\n};\n\nexport default TagSelector;\n","import React, { useState } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Slider,\n  Stack,\n  TextField,\n  Button,\n  Alert,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  FormLabel,\n  useTheme\n} from '@mui/material';\nimport { alpha } from '@mui/material/styles';\nimport {\n  ExpandMore,\n  RestoreRounded,\n  SaveRounded,\n  InfoOutlined\n} from '@mui/icons-material';\nimport { ScoreSettings } from '../../types/score';\nimport { Trade } from '../../types/trade';\nimport { DEFAULT_SCORE_SETTINGS } from '../../utils/scoreUtils';\nimport ExcludedTagsSelector from './ExcludedTagsSelector';\nimport TagSelector from './TagSelector';\n\ninterface ScoreSettingsProps {\n  settings: ScoreSettings;\n  onSettingsChange: (settings: ScoreSettings) => void;\n  onSave?: () => void;\n  isSaving?: boolean;\n  trades: Trade[];\n  selectedTags: string[];\n  onTagsChange: (tags: string[]) => void;\n  allTags?: string[]; // Add allTags prop to receive calendar.tags\n}\n\nconst ScoreSettingsComponent: React.FC<ScoreSettingsProps> = ({\n  settings,\n  onSettingsChange,\n  onSave,\n  isSaving = false,\n  trades,\n  selectedTags,\n  onTagsChange,\n  allTags\n}) => {\n  const theme = useTheme();\n  const [localSettings, setLocalSettings] = useState<ScoreSettings>(settings);\n  const [hasChanges, setHasChanges] = useState(false);\n\n  const handleWeightChange = (component: keyof ScoreSettings['weights']) => (\n    event: Event,\n    newValue: number | number[]\n  ) => {\n    const value = Array.isArray(newValue) ? newValue[0] : newValue;\n    const newWeights = { ...localSettings.weights, [component]: value };\n    \n    // Ensure weights sum to 100\n    const total = Object.values(newWeights).reduce((sum, weight) => sum + weight, 0);\n    if (total !== 100) {\n      // Adjust other weights proportionally\n      const otherComponents = Object.keys(newWeights).filter(key => key !== component) as Array<keyof ScoreSettings['weights']>;\n      const remaining = 100 - value;\n      const otherTotal = otherComponents.reduce((sum, key) => sum + newWeights[key], 0);\n      \n      if (otherTotal > 0) {\n        otherComponents.forEach(key => {\n          newWeights[key] = (newWeights[key] / otherTotal) * remaining;\n        });\n      }\n    }\n\n    const newSettings = { ...localSettings, weights: newWeights };\n    setLocalSettings(newSettings);\n    setHasChanges(true);\n    onSettingsChange(newSettings);\n  };\n\n  const handleThresholdChange = (threshold: keyof ScoreSettings['thresholds']) => (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    const value = parseFloat(event.target.value) || 0;\n    const newSettings = {\n      ...localSettings,\n      thresholds: { ...localSettings.thresholds, [threshold]: value }\n    };\n    setLocalSettings(newSettings);\n    setHasChanges(true);\n    onSettingsChange(newSettings);\n  };\n\n  const handleTargetChange = (target: keyof ScoreSettings['targets']) => (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    const value = parseFloat(event.target.value) || 0;\n    const newSettings = {\n      ...localSettings,\n      targets: { ...localSettings.targets, [target]: value }\n    };\n    setLocalSettings(newSettings);\n    setHasChanges(true);\n    onSettingsChange(newSettings);\n  };\n\n  const handleExcludedTagsChange = (excludedTags: string[]) => {\n    const newSettings = { ...localSettings, excludedTagsFromPatterns: excludedTags };\n    setLocalSettings(newSettings);\n    setHasChanges(true);\n    onSettingsChange(newSettings);\n  };\n\n  const handleTagsChangeWithSaveState = (tags: string[]) => {\n    // Enable save button when tags change within the settings interface\n    setHasChanges(true);\n    // Call the original onTagsChange callback\n    onTagsChange(tags);\n  };\n\n  const handleReset = () => {\n    setLocalSettings(DEFAULT_SCORE_SETTINGS);\n    setHasChanges(true);\n    onSettingsChange(DEFAULT_SCORE_SETTINGS);\n  };\n\n  const handleSave = () => {\n    if (onSave) {\n      onSave();\n    }\n    setHasChanges(false);\n  };\n\n  const weightTotal = Object.values(localSettings.weights).reduce((sum, weight) => sum + weight, 0);\n\n  return (\n    <Card\n      sx={{\n        backgroundColor: theme.palette.mode === 'dark'\n          ? alpha(theme.palette.background.paper, 0.8)\n          : theme.palette.background.paper,\n        borderRadius: 3,\n        boxShadow: theme.shadows[2],\n        border: `1px solid ${theme.palette.mode === 'dark'\n          ? alpha(theme.palette.common.white, 0.1)\n          : alpha(theme.palette.common.black, 0.1)}`,\n        transition: 'all 0.2s ease-in-out',\n        '&:hover': {\n          transform: 'translateY(-1px)',\n          boxShadow: theme.shadows[4],\n        }\n      }}\n    >\n      <CardContent sx={{ p: 3 }}>\n        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" mb={3}>\n          <Typography\n            variant=\"h6\"\n            sx={{\n              color: theme.palette.text.primary,\n              fontWeight: 600\n            }}\n          >\n            ⚙️ Score Settings\n          </Typography>\n          <Stack direction=\"row\" spacing={1}>\n            <Button\n              startIcon={<RestoreRounded />}\n              onClick={handleReset}\n              size=\"small\"\n              variant=\"outlined\"\n              sx={{\n                borderColor: theme.palette.mode === 'dark'\n                  ? alpha(theme.palette.common.white, 0.3)\n                  : theme.palette.primary.main,\n                color: theme.palette.mode === 'dark'\n                  ? theme.palette.common.white\n                  : theme.palette.primary.main,\n                '&:hover': {\n                  borderColor: theme.palette.primary.main,\n                  backgroundColor: alpha(theme.palette.primary.main, 0.05)\n                }\n              }}\n            >\n              Reset\n            </Button>\n            {onSave && (\n              <Button\n                startIcon={<SaveRounded />}\n                onClick={handleSave}\n                size=\"small\"\n                variant=\"contained\"\n                disabled={!hasChanges || isSaving}\n                sx={{\n                  backgroundColor: theme.palette.primary.main,\n                  '&:hover': {\n                    backgroundColor: theme.palette.primary.dark\n                  },\n                  '&:disabled': {\n                    backgroundColor: theme.palette.mode === 'dark'\n                      ? alpha(theme.palette.common.white, 0.1)\n                      : theme.palette.grey[300]\n                  }\n                }}\n              >\n                {isSaving ? 'Saving...' : 'Save'}\n              </Button>\n            )}\n          </Stack>\n        </Stack>\n\n        {hasChanges && (\n          <Alert severity=\"info\" sx={{ mb: 2 }}>\n            You have unsaved changes. Click Save to apply them permanently.\n          </Alert>\n        )}\n\n        <Stack>\n          {/* Score Component Weights */}\n          <Accordion>\n            <AccordionSummary expandIcon={<ExpandMore />}>\n              <Typography variant=\"subtitle1\" fontWeight=\"medium\">\n                Score Component Weights\n              </Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <Alert severity=\"info\" icon={<InfoOutlined />} sx={{ mb: 2 }}>\n                Adjust how much each component contributes to your overall score. \n                Total must equal 100%.\n              </Alert>\n              \n              <Stack spacing={3}>\n                <Box>\n                  <FormLabel>Consistency ({localSettings.weights.consistency.toFixed(0)}%)</FormLabel>\n                  <Box sx={{ px: 2 }}>\n                    <Slider\n                      value={localSettings.weights.consistency}\n                      onChange={handleWeightChange('consistency')}\n                      min={0}\n                      max={100}\n                      step={5}\n                      marks={[\n                        { value: 0, label: '0%' },\n                        { value: 50, label: '50%' },\n                        { value: 100, label: '100%' }\n                      ]}\n                      sx={{\n                        '& .MuiSlider-markLabel': {\n                          fontSize: '0.75rem'\n                        },\n                        '& .MuiSlider-markLabel[data-index=\"0\"]': {\n                          transform: 'translateX(0%)'\n                        },\n                        '& .MuiSlider-markLabel[data-index=\"2\"]': {\n                          transform: 'translateX(-100%)'\n                        }\n                      }}\n                    />\n                  </Box>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    How well you stick to your trading patterns\n                  </Typography>\n                </Box>\n\n                <Box>\n                  <FormLabel>Risk Management ({localSettings.weights.riskManagement.toFixed(0)}%)</FormLabel>\n                  <Box sx={{ px: 2 }}>\n                    <Slider\n                      value={localSettings.weights.riskManagement}\n                      onChange={handleWeightChange('riskManagement')}\n                      min={0}\n                      max={100}\n                      step={5}\n                      marks={[\n                        { value: 0, label: '0%' },\n                        { value: 50, label: '50%' },\n                        { value: 100, label: '100%' }\n                      ]}\n                      sx={{\n                        '& .MuiSlider-markLabel': {\n                          fontSize: '0.75rem'\n                        },\n                        '& .MuiSlider-markLabel[data-index=\"0\"]': {\n                          transform: 'translateX(0%)'\n                        },\n                        '& .MuiSlider-markLabel[data-index=\"2\"]': {\n                          transform: 'translateX(-100%)'\n                        }\n                      }}\n                    />\n                  </Box>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    Risk management and position sizing discipline\n                  </Typography>\n                </Box>\n\n                <Box>\n                  <FormLabel>Performance ({localSettings.weights.performance.toFixed(0)}%)</FormLabel>\n                  <Box sx={{ px: 2 }}>\n                    <Slider\n                      value={localSettings.weights.performance}\n                      onChange={handleWeightChange('performance')}\n                      min={0}\n                      max={100}\n                      step={5}\n                      marks={[\n                        { value: 0, label: '0%' },\n                        { value: 50, label: '50%' },\n                        { value: 100, label: '100%' }\n                      ]}\n                      sx={{\n                        '& .MuiSlider-markLabel': {\n                          fontSize: '0.75rem'\n                        },\n                        '& .MuiSlider-markLabel[data-index=\"0\"]': {\n                          transform: 'translateX(0%)'\n                        },\n                        '& .MuiSlider-markLabel[data-index=\"2\"]': {\n                          transform: 'translateX(-100%)'\n                        }\n                      }}\n                    />\n                  </Box>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    Performance consistency vs historical patterns\n                  </Typography>\n                </Box>\n\n                <Box>\n                  <FormLabel>Discipline ({localSettings.weights.discipline.toFixed(0)}%)</FormLabel>\n                  <Box sx={{ px: 2 }}>\n                    <Slider\n                      value={localSettings.weights.discipline}\n                      onChange={handleWeightChange('discipline')}\n                      min={0}\n                      max={100}\n                      step={5}\n                      marks={[\n                        { value: 0, label: '0%' },\n                        { value: 50, label: '50%' },\n                        { value: 100, label: '100%' }\n                      ]}\n                      sx={{\n                        '& .MuiSlider-markLabel': {\n                          fontSize: '0.75rem'\n                        },\n                        '& .MuiSlider-markLabel[data-index=\"0\"]': {\n                          transform: 'translateX(0%)'\n                        },\n                        '& .MuiSlider-markLabel[data-index=\"2\"]': {\n                          transform: 'translateX(-100%)'\n                        }\n                      }}\n                    />\n                  </Box>\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    Trading discipline and emotional control\n                  </Typography>\n                </Box>\n\n                <Typography \n                  variant=\"body2\" \n                  sx={{ \n                    color: weightTotal === 100 ? 'success.main' : 'error.main',\n                    fontWeight: 'medium'\n                  }}\n                >\n                  Total: {weightTotal.toFixed(0)}% {weightTotal !== 100 && '(Must equal 100%)'}\n                </Typography>\n              </Stack>\n            </AccordionDetails>\n          </Accordion>\n\n          {/* Calculation Thresholds */}\n          <Accordion>\n            <AccordionSummary expandIcon={<ExpandMore />}>\n              <Typography variant=\"subtitle1\" fontWeight=\"medium\">\n                Calculation Thresholds\n              </Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', sm: 'repeat(3, 1fr)' }, gap: 2 }}>\n                <TextField\n                  label=\"Min Trades for Score\"\n                  type=\"number\"\n                  value={localSettings.thresholds.minTradesForScore}\n                  onChange={handleThresholdChange('minTradesForScore')}\n                  fullWidth\n                  size=\"small\"\n                  helperText=\"Minimum trades needed to calculate score\"\n                />\n                <TextField\n                  label=\"Lookback Period (days)\"\n                  type=\"number\"\n                  value={localSettings.thresholds.lookbackPeriod}\n                  onChange={handleThresholdChange('lookbackPeriod')}\n                  fullWidth\n                  size=\"small\"\n                  helperText=\"Days to look back for pattern analysis\"\n                />\n                <TextField\n                  label=\"Consistency Tolerance (%)\"\n                  type=\"number\"\n                  value={localSettings.thresholds.consistencyTolerance}\n                  onChange={handleThresholdChange('consistencyTolerance')}\n                  fullWidth\n                  size=\"small\"\n                  helperText=\"Acceptable deviation from patterns\"\n                />\n              </Box>\n            </AccordionDetails>\n          </Accordion>\n\n          {/* Performance Targets */}\n          <Accordion>\n            <AccordionSummary expandIcon={<ExpandMore />}>\n              <Typography variant=\"subtitle1\" fontWeight=\"medium\">\n                Performance Targets\n              </Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', sm: 'repeat(2, 1fr)' }, gap: 2 }}>\n                <TextField\n                  label=\"Target Win Rate (%)\"\n                  type=\"number\"\n                  value={localSettings.targets.winRate}\n                  onChange={handleTargetChange('winRate')}\n                  fullWidth\n                  size=\"small\"\n                  helperText=\"Your target win rate percentage\"\n                />\n                <TextField\n                  label=\"Target Profit Factor\"\n                  type=\"number\"\n                  inputProps={{ step: 0.1 }}\n                  value={localSettings.targets.profitFactor}\n                  onChange={handleTargetChange('profitFactor')}\n                  fullWidth\n                  size=\"small\"\n                  helperText=\"Your target profit factor\"\n                />\n                <TextField\n                  label=\"Max Drawdown (%)\"\n                  type=\"number\"\n                  value={localSettings.targets.maxDrawdown}\n                  onChange={handleTargetChange('maxDrawdown')}\n                  fullWidth\n                  size=\"small\"\n                  helperText=\"Maximum acceptable drawdown\"\n                />\n                <TextField\n                  label=\"Avg Risk/Reward Ratio\"\n                  type=\"number\"\n                  inputProps={{ step: 0.1 }}\n                  value={localSettings.targets.avgRiskReward}\n                  onChange={handleTargetChange('avgRiskReward')}\n                  fullWidth\n                  size=\"small\"\n                  helperText=\"Your target risk/reward ratio\"\n                />\n              </Box>\n            </AccordionDetails>\n          </Accordion>\n\n          {/* Common Strategies Tracking */}\n          <Accordion>\n            <AccordionSummary expandIcon={<ExpandMore />}>\n              <Typography variant=\"subtitle1\" fontWeight=\"medium\">\n                Common Strategies Tracking\n              </Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <TagSelector\n                trades={trades}\n                selectedTags={selectedTags}\n                onTagsChange={handleTagsChangeWithSaveState}\n                allTags={allTags}\n              />\n            </AccordionDetails>\n          </Accordion>\n\n          {/* Pattern Analysis Settings */}\n          <Accordion>\n            <AccordionSummary expandIcon={<ExpandMore />}>\n              <Typography variant=\"subtitle1\" fontWeight=\"medium\">\n                Pattern Analysis Settings\n              </Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <ExcludedTagsSelector\n                trades={trades}\n                excludedTags={localSettings.excludedTagsFromPatterns || []}\n                onExcludedTagsChange={handleExcludedTagsChange}\n                allTags={allTags}\n              />\n            </AccordionDetails>\n          </Accordion>\n        </Stack>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ScoreSettingsComponent;\n","import React, { useMemo } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Alert,\n  Chip,\n  Stack,\n  LinearProgress,\n  useTheme,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  Tooltip,\n  IconButton\n} from '@mui/material';\nimport { alpha } from '@mui/material/styles';\nimport {\n  ExpandMore,\n  TrendingUp,\n  TrendingDown,\n  Warning,\n  Info,\n  HelpOutline\n} from '@mui/icons-material';\nimport { Trade } from '../types/trade';\nimport { TagPatternInsight, ScoreSettings } from '../types/score';\nimport { tagPatternService } from '../services/tagPatternService';\nimport { getTagChipStyles, formatTagForDisplay } from '../utils/tagColors';\n\ninterface TagPatternAnalysisProps {\n  trades: Trade[];\n  selectedDate?: Date;\n  settings?: ScoreSettings;\n}\n\nconst TagPatternAnalysis: React.FC<TagPatternAnalysisProps> = ({\n  trades,\n  selectedDate = new Date(),\n  settings\n}) => {\n  const theme = useTheme();\n\n  // Calculate tag pattern analysis\n  const analysis = useMemo(() => {\n    if (trades.length < 10) return null;\n    return tagPatternService.analyzeTagPatterns(trades, selectedDate, settings);\n  }, [trades, selectedDate, settings]);\n\n  const getInsightIcon = (type: TagPatternInsight['type']) => {\n    switch (type) {\n      case 'high_performance':\n        return <TrendingUp sx={{ color: theme.palette.success.main }} />;\n      case 'declining_pattern':\n        return <TrendingDown sx={{ color: theme.palette.error.main }} />;\n      case 'market_condition':\n        return <Warning sx={{ color: theme.palette.warning.main }} />;\n      default:\n        return <Info sx={{ color: theme.palette.info.main }} />;\n    }\n  };\n\n  const getSeverityColor = (severity: TagPatternInsight['severity']) => {\n    switch (severity) {\n      case 'high':\n        return theme.palette.error.main;\n      case 'medium':\n        return theme.palette.warning.main;\n      case 'low':\n        return theme.palette.info.main;\n      default:\n        return theme.palette.text.secondary;\n    }\n  };\n\n  const getWinRateColor = (winRate: number) => {\n    if (winRate >= 70) return theme.palette.success.main;\n    if (winRate >= 50) return theme.palette.warning.main;\n    return theme.palette.error.main;\n  };\n\n  const formatWinRate = (winRate: number) => {\n    return `${winRate.toFixed(1)}%`;\n  };\n\n  if (!analysis || trades.length < 10) {\n    return (\n      <Card\n        sx={{\n          backgroundColor: theme.palette.mode === 'dark'\n            ? alpha(theme.palette.background.paper, 0.8)\n            : theme.palette.background.paper,\n          borderRadius: 2,\n          boxShadow: theme.shadows[2],\n          border: `1px solid ${theme.palette.mode === 'dark'\n            ? alpha(theme.palette.common.white, 0.1)\n            : alpha(theme.palette.common.black, 0.1)}`\n        }}\n      >\n        <CardContent sx={{ p: 3 }}>\n          <Typography variant=\"h6\" gutterBottom>\n            🏷️ Tag Pattern Analysis\n          </Typography>\n          <Alert severity=\"info\">\n            Add more trades to see tag pattern analysis. We need at least 10 trades to identify meaningful patterns and trends.\n          </Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card\n      sx={{\n        backgroundColor: theme.palette.mode === 'dark'\n          ? alpha(theme.palette.background.paper, 0.8)\n          : theme.palette.background.paper,\n        borderRadius: 2,\n        boxShadow: theme.shadows[2],\n        border: `1px solid ${theme.palette.mode === 'dark'\n          ? alpha(theme.palette.common.white, 0.1)\n          : alpha(theme.palette.common.black, 0.1)}`\n      }}\n    >\n      <CardContent sx={{ p: 3 }}>\n        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" mb={3}>\n          <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n            🏷️ Tag Pattern Analysis\n          </Typography>\n          <Tooltip title=\"Analysis of tag combinations to identify high-performing patterns and declining trends\">\n            <IconButton size=\"small\">\n              <HelpOutline fontSize=\"small\" />\n            </IconButton>\n          </Tooltip>\n        </Stack>\n\n        {/* Key Insights */}\n        {analysis.insights.length > 0 && (\n          <Box mb={3}>\n            <Typography variant=\"subtitle1\" gutterBottom sx={{ fontWeight: 600 }}>\n              💡 Key Insights\n            </Typography>\n            <Stack spacing={2}>\n              {analysis.insights.slice(0, 3).map((insight, index) => (\n                <Alert\n                  key={index}\n                  severity={\n                    insight.type === 'high_performance' ? 'success' :\n                    insight.type === 'declining_pattern' ? 'error' : 'warning'\n                  }\n                  icon={getInsightIcon(insight.type)}\n                  sx={{\n                    backgroundColor: alpha(getSeverityColor(insight.severity), 0.1),\n                    border: `1px solid ${alpha(getSeverityColor(insight.severity), 0.2)}`,\n                    '& .MuiAlert-icon': {\n                      color: getSeverityColor(insight.severity)\n                    }\n                  }}\n                >\n                  <Typography variant=\"subtitle2\" gutterBottom sx={{ fontWeight: 600 }}>\n                    {insight.title}\n                  </Typography>\n                  <Typography variant=\"body2\" gutterBottom>\n                    {insight.description}\n                  </Typography>\n                  <Box sx={{ mt: 1, mb: 1 }}>\n                    <Stack direction=\"row\" spacing={1} flexWrap=\"wrap\">\n                      {insight.tagCombination.map(tag => (\n                        <Chip\n                          key={tag}\n                          label={formatTagForDisplay(tag)}\n                          size=\"small\"\n                          sx={getTagChipStyles(tag, theme)}\n                        />\n                      ))}\n                    </Stack>\n                  </Box>\n                  <Typography variant=\"body2\" sx={{ fontStyle: 'italic' }}>\n                    💡 {insight.recommendation}\n                  </Typography>\n                </Alert>\n              ))}\n            </Stack>\n          </Box>\n        )}\n\n        {/* Top Performing Combinations */}\n        {analysis.topCombinations.length > 0 && (\n          <Accordion defaultExpanded>\n            <AccordionSummary expandIcon={<ExpandMore />}>\n              <Typography variant=\"subtitle1\" sx={{ fontWeight: 600 }}>\n                🏆 Top Performing Tag Combinations\n              </Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <Stack spacing={2}>\n                {analysis.topCombinations.slice(0, 5).map((combo, index) => (\n                  <Box\n                    key={index}\n                    sx={{\n                      p: 2,\n                      borderRadius: 2,\n                      backgroundColor: theme.palette.mode === 'dark'\n                        ? alpha(theme.palette.background.paper, 0.4)\n                        : alpha(theme.palette.background.paper, 0.8),\n                      border: `1px solid ${alpha(theme.palette.divider, 0.2)}`\n                    }}\n                  >\n                    <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" mb={1}>\n                      <Stack direction=\"row\" spacing={1} flexWrap=\"wrap\">\n                        {combo.tags.map(tag => (\n                          <Chip\n                            key={tag}\n                            label={formatTagForDisplay(tag)}\n                            size=\"small\"\n                            sx={getTagChipStyles(tag, theme)}\n                          />\n                        ))}\n                      </Stack>\n                      <Typography\n                        variant=\"h6\"\n                        sx={{\n                          color: getWinRateColor(combo.winRate),\n                          fontWeight: 'bold'\n                        }}\n                      >\n                        {formatWinRate(combo.winRate)}\n                      </Typography>\n                    </Stack>\n                    \n                    <LinearProgress\n                      variant=\"determinate\"\n                      value={combo.winRate}\n                      sx={{\n                        height: 6,\n                        borderRadius: 3,\n                        backgroundColor: theme.palette.mode === 'dark'\n                          ? alpha(theme.palette.common.white, 0.1)\n                          : theme.palette.grey[200],\n                        '& .MuiLinearProgress-bar': {\n                          backgroundColor: getWinRateColor(combo.winRate),\n                          borderRadius: 3\n                        }\n                      }}\n                    />\n                    \n                    <Stack direction=\"row\" spacing={3} mt={1}>\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        <strong>Trades:</strong> {combo.totalTrades}\n                      </Typography>\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        <strong>W/L:</strong> {combo.wins}/{combo.losses}\n                      </Typography>\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        <strong>Avg P&L:</strong> {combo.avgPnL > 0 ? '+' : ''}{combo.avgPnL.toFixed(2)}\n                      </Typography>\n                      {combo.trend !== 'stable' && (\n                        <Typography\n                          variant=\"caption\"\n                          sx={{\n                            color: combo.trend === 'improving' \n                              ? theme.palette.success.main \n                              : theme.palette.error.main,\n                            fontWeight: 600\n                          }}\n                        >\n                          {combo.trend === 'improving' ? '📈 Improving' : '📉 Declining'}\n                        </Typography>\n                      )}\n                    </Stack>\n                  </Box>\n                ))}\n              </Stack>\n            </AccordionDetails>\n          </Accordion>\n        )}\n\n        {/* Declining Patterns */}\n        {analysis.decliningCombinations.length > 0 && (\n          <Accordion sx={{ mt: 2 }}>\n            <AccordionSummary expandIcon={<ExpandMore />}>\n              <Typography variant=\"subtitle1\" sx={{ fontWeight: 600, color: theme.palette.error.main }}>\n                📉 Declining Patterns\n              </Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <Stack spacing={2}>\n                {analysis.decliningCombinations.map((combo, index) => (\n                  <Box\n                    key={index}\n                    sx={{\n                      p: 2,\n                      borderRadius: 2,\n                      backgroundColor: alpha(theme.palette.error.main, 0.05),\n                      border: `1px solid ${alpha(theme.palette.error.main, 0.2)}`\n                    }}\n                  >\n                    <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" mb={1}>\n                      <Stack direction=\"row\" spacing={1} flexWrap=\"wrap\">\n                        {combo.tags.map(tag => (\n                          <Chip\n                            key={tag}\n                            label={formatTagForDisplay(tag)}\n                            size=\"small\"\n                            sx={getTagChipStyles(tag, theme)}\n                          />\n                        ))}\n                      </Stack>\n                      <Stack alignItems=\"flex-end\">\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          {formatWinRate(combo.historicalWinRate)} → {formatWinRate(combo.recentWinRate)}\n                        </Typography>\n                        <Typography\n                          variant=\"body2\"\n                          sx={{ color: theme.palette.error.main, fontWeight: 600 }}\n                        >\n                          -{(combo.historicalWinRate - combo.recentWinRate).toFixed(1)}%\n                        </Typography>\n                      </Stack>\n                    </Stack>\n                    \n                    <Typography variant=\"body2\" color=\"text.secondary\">\n                      This combination has declined from {formatWinRate(combo.historicalWinRate)} to {formatWinRate(combo.recentWinRate)} win rate recently.\n                      Consider reviewing your approach or market conditions.\n                    </Typography>\n                  </Box>\n                ))}\n              </Stack>\n            </AccordionDetails>\n          </Accordion>\n        )}\n\n        {/* No significant patterns found */}\n        {analysis.insights.length === 0 && analysis.topCombinations.length === 0 && (\n          <Alert severity=\"info\" sx={{ mt: 2 }}>\n            <Typography variant=\"subtitle2\" gutterBottom sx={{ fontWeight: 600 }}>\n              📊 Building Pattern Database\n            </Typography>\n            <Typography variant=\"body2\">\n              Continue trading to build a larger dataset. More trades will help identify stronger patterns and trends in your tag combinations.\n            </Typography>\n          </Alert>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default TagPatternAnalysis;\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  Tabs,\r\n  Tab,\r\n  Stack,\r\n  Alert,\r\n  useTheme,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  IconButton,\r\n  CircularProgress\r\n} from '@mui/material';\r\nimport { alpha } from '@mui/material/styles';\r\nimport { Close } from '@mui/icons-material';\r\nimport { Trade } from '../types/trade';\r\nimport { ScoreSettings, ScoreAnalysis } from '../types/score';\r\nimport { Calendar } from '../types/calendar';\r\nimport { DynamicRiskSettings } from '../utils/dynamicRiskUtils';\r\nimport { scoreService } from '../services/scoreService';\r\nimport { calculateRecommendedScore } from '../utils/scoreUtils';\r\nimport { scrollbarStyles } from '../styles/scrollbarStyles';\r\nimport ScoreCard from './scoring/ScoreCard';\r\nimport ScoreBreakdown from './scoring/ScoreBreakdown';\r\nimport ScoreHistory from './scoring/ScoreHistory';\r\nimport ScoreSettingsComponent from './scoring/ScoreSettings';\r\nimport TagPatternAnalysis from './TagPatternAnalysis';\r\n\r\ninterface ScoreSectionProps {\r\n  trades: Trade[];\r\n  selectedDate: Date;\r\n  calendarId: string;\r\n  scoreSettings?: ScoreSettings;\r\n  onUpdateCalendarProperty?: (calendarId: string, updateCallback: (calendar: Calendar) => Calendar) => Promise<void>;\r\n  // Dynamic risk settings\r\n  accountBalance?: number;\r\n  dynamicRiskSettings?: DynamicRiskSettings;\r\n  allTags?: string[]; // Add allTags prop to receive calendar.tags\r\n}\r\n\r\ninterface TabPanelProps {\r\n  children?: React.ReactNode;\r\n  index: number;\r\n  value: number;\r\n}\r\n\r\nconst TabPanel: React.FC<TabPanelProps> = ({ children, value, index, ...other }) => {\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`score-tabpanel-${index}`}\r\n      aria-labelledby={`score-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box>{children}</Box>}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ScoreSection: React.FC<ScoreSectionProps> = ({\r\n  trades,\r\n  selectedDate,\r\n  calendarId,\r\n  scoreSettings,\r\n  onUpdateCalendarProperty,\r\n  accountBalance,\r\n  dynamicRiskSettings,\r\n  allTags\r\n}) => {\r\n  const theme = useTheme();\r\n  const [activeTab, setActiveTab] = useState(0);\r\n  const scorePeriod = 'monthly';\r\n  const [historyPeriod, setHistoryPeriod] = useState<'daily' | 'weekly' | 'monthly' | 'yearly'>('monthly');\r\n  const [settings, setSettings] = useState<ScoreSettings>(scoreSettings || scoreService.getSettings());\r\n  const [selectedTags, setSelectedTags] = useState<string[]>(scoreSettings?.selectedTags || []);\r\n  const [isSaving, setIsSaving] = useState(false);\r\n  const [isCalculating, setIsCalculating] = useState(false);\r\n\r\n  // Calculate recommended score based on user's targets\r\n  const recommendedScore = calculateRecommendedScore(settings);\r\n  const [scoreAnalysis, setScoreAnalysis] = useState<ScoreAnalysis | null>(null);\r\n  const [scoreHistory, setScoreHistory] = useState<any[]>([]);\r\n  const [multiPeriodScores, setMultiPeriodScores] = useState<any>(null);\r\n\r\n  // State for breakdown modal\r\n  const [breakdownModalOpen, setBreakdownModalOpen] = useState(false);\r\n  const [selectedBreakdownData, setSelectedBreakdownData] = useState<{\r\n    analysis: ScoreAnalysis;\r\n    period: 'daily' | 'weekly' | 'monthly' | 'yearly';\r\n  } | null>(null);\r\n\r\n  // Initialize settings from calendar props when they change\r\n  useEffect(() => {\r\n    if (scoreSettings) {\r\n      setSettings(scoreSettings);\r\n      setSelectedTags(scoreSettings.selectedTags || []);\r\n    }\r\n  }, [scoreSettings]);\r\n\r\n  // Update score service settings when local settings change\r\n  useEffect(() => {\r\n    scoreService.updateSettings(settings);\r\n  }, [settings]);\r\n\r\n  // Update score service settings when selected tags change\r\n  useEffect(() => {\r\n    const updatedSettings = { ...settings, selectedTags };\r\n    scoreService.updateSettings(updatedSettings);\r\n  }, [selectedTags, settings]);\r\n\r\n  // Update dynamic risk settings in score service\r\n  useEffect(() => {\r\n    if (accountBalance !== undefined) {\r\n      scoreService.updateDynamicRiskSettings({\r\n        accountBalance,\r\n        riskPerTrade: dynamicRiskSettings?.riskPerTrade,\r\n        dynamicRiskEnabled: dynamicRiskSettings?.dynamicRiskEnabled,\r\n        increasedRiskPercentage: dynamicRiskSettings?.increasedRiskPercentage,\r\n        profitThresholdPercentage: dynamicRiskSettings?.profitThresholdPercentage\r\n      });\r\n    }\r\n  }, [accountBalance, dynamicRiskSettings]);\r\n\r\n  // Calculate current score analysis\r\n  useEffect(() => {\r\n    if (trades.length === 0) {\r\n      setScoreAnalysis(null);\r\n      return;\r\n    }\r\n\r\n    const calculateScoreAnalysis = async () => {\r\n      setIsCalculating(true);\r\n      try {\r\n        // Ensure score service has the latest settings before calculation\r\n        const updatedSettings = { ...settings, selectedTags };\r\n        scoreService.updateSettings(updatedSettings);\r\n        const analysis = await scoreService.calculateScore(trades, scorePeriod, selectedDate, updatedSettings);\r\n        setScoreAnalysis(analysis);\r\n      } catch (error) {\r\n        console.error('Error calculating score:', error);\r\n        setScoreAnalysis(null);\r\n      } finally {\r\n        setIsCalculating(false);\r\n      }\r\n    };\r\n\r\n    calculateScoreAnalysis();\r\n  }, [trades, scorePeriod, selectedDate, selectedTags, settings]);\r\n\r\n  // Calculate score history\r\n  useEffect(() => {\r\n    if (trades.length === 0) {\r\n      setScoreHistory([]);\r\n      return;\r\n    }\r\n\r\n    const calculateScoreHistory = async () => {\r\n      try {\r\n        // Ensure score service has the latest settings before calculation\r\n        const updatedSettings = { ...settings, selectedTags };\r\n        scoreService.updateSettings(updatedSettings);\r\n        const history = await scoreService.getScoreHistory(trades, historyPeriod, 12, updatedSettings);\r\n        setScoreHistory(history);\r\n      } catch (error) {\r\n        console.error('Error calculating score history:', error);\r\n        setScoreHistory([]);\r\n      }\r\n    };\r\n\r\n    calculateScoreHistory();\r\n  }, [trades, historyPeriod, selectedTags, settings]);\r\n\r\n  // Calculate multi-period scores for overview\r\n  useEffect(() => {\r\n    if (trades.length === 0) {\r\n      setMultiPeriodScores(null);\r\n      return;\r\n    }\r\n\r\n    const calculateMultiPeriodScores = async () => {\r\n      try {\r\n        // Ensure score service has the latest settings before calculation\r\n        const updatedSettings = { ...settings, selectedTags };\r\n        scoreService.updateSettings(updatedSettings);\r\n        const scores = await scoreService.calculateMultiPeriodScore(trades, selectedDate, updatedSettings);\r\n        setMultiPeriodScores(scores);\r\n      } catch (error) {\r\n        console.error('Error calculating multi-period scores:', error);\r\n        setMultiPeriodScores(null);\r\n      }\r\n    };\r\n\r\n    calculateMultiPeriodScores();\r\n  }, [trades, selectedDate, selectedTags, settings]);\r\n \r\n\r\n\r\n\r\n  const handleTabChange = (_: React.SyntheticEvent, newValue: number) => {\r\n    setActiveTab(newValue);\r\n  };\r\n\r\n  const handleHistoryPeriodChange = (newPeriod: 'daily' | 'weekly' | 'monthly' | 'yearly') => {\r\n    setHistoryPeriod(newPeriod);\r\n  };\r\n\r\n  // Handler for opening breakdown modal\r\n  const handleScoreCardClick = (period: 'daily' | 'weekly' | 'monthly' | 'yearly') => {\r\n    if (!multiPeriodScores) return;\r\n\r\n    const analysis = multiPeriodScores[period];\r\n    if (analysis) {\r\n      setSelectedBreakdownData({ analysis, period });\r\n      setBreakdownModalOpen(true);\r\n    }\r\n  };\r\n\r\n  // Handler for closing breakdown modal\r\n  const handleCloseBreakdownModal = () => {\r\n    setBreakdownModalOpen(false);\r\n    setSelectedBreakdownData(null);\r\n  };\r\n\r\n  const handleSettingsChange = (newSettings: ScoreSettings) => {\r\n    setSettings(newSettings);\r\n  };\r\n\r\n  const handleSettingsSave = async (tagsOverride?: string[]) => {\r\n    if (!onUpdateCalendarProperty) return;\r\n\r\n    setIsSaving(true);\r\n    try { \r\n      const updatedSettings = { ...settings, selectedTags: tagsOverride ?? selectedTags };\r\n      await onUpdateCalendarProperty(calendarId, (calendar) => ({\r\n        ...calendar,\r\n        scoreSettings: updatedSettings\r\n      }));\r\n    } catch (error) {\r\n      console.error('Error saving score settings:', error);\r\n    } finally {\r\n      setIsSaving(false);\r\n    }\r\n  };\r\n\r\n  const handleTagsChange = async (tags: string[]) => {\r\n    setSelectedTags(tags);\r\n\r\n    // Auto-save tags to calendar when they change\r\n    if (onUpdateCalendarProperty) {\r\n      // Pass the new tags directly to ensure they're saved\r\n      await handleSettingsSave(tags);\r\n    }\r\n  };\r\n\r\n  // Fallback to localStorage if no calendar settings are provided\r\n  useEffect(() => {\r\n    if (!scoreSettings && !onUpdateCalendarProperty) {\r\n      const savedSettings = localStorage.getItem('scoreSettings');\r\n      if (savedSettings) {\r\n        try {\r\n          const parsedSettings = JSON.parse(savedSettings);\r\n          setSettings(parsedSettings);\r\n          setSelectedTags(parsedSettings.selectedTags || []);\r\n        } catch (error) {\r\n          console.error('Error loading saved settings from localStorage:', error);\r\n        }\r\n      }\r\n    }\r\n  }, [scoreSettings, onUpdateCalendarProperty]);\r\n\r\n  if (trades.length === 0) {\r\n    return (\r\n      <Paper sx={{ p: 3 }}>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          📊 Trading Score\r\n        </Typography>\r\n        <Alert severity=\"info\">\r\n          Start adding trades to see your trading score and performance analysis.\r\n          The scoring system will evaluate your consistency, risk management, performance, and discipline.\r\n        </Alert>\r\n      </Paper>\r\n    );\r\n  }\r\n\r\n  if (trades.length < settings.thresholds.minTradesForScore) {\r\n    return (\r\n      <Paper sx={{ p: 3 }}>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          📊 Trading Score\r\n        </Typography>\r\n        <Alert severity=\"warning\">\r\n          You need at least {settings.thresholds.minTradesForScore} trades to calculate your score.\r\n          Current trades: {trades.length}\r\n        </Alert>\r\n      </Paper>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Paper\r\n      data-testid=\"score-section\"\r\n      sx={{\r\n        p: 0,\r\n        backgroundColor: theme.palette.mode === 'dark'\r\n          ? alpha(theme.palette.background.paper, 0.8)\r\n          : theme.palette.background.paper,\r\n        borderRadius: 2,\r\n        boxShadow: theme.shadows[2],\r\n        border: `1px solid ${theme.palette.mode === 'dark'\r\n          ? 'rgba(204, 204, 204, 0.1)'\r\n          : alpha(theme.palette.common.black, 0.1)}`\r\n      }}\r\n    >\r\n      <Box sx={{ px: 3, pt: 3}}>\r\n        <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" mb={3}>\r\n          <Typography\r\n            variant=\"h6\"\r\n            sx={{\r\n              color: theme.palette.text.primary,\r\n              fontWeight: 600\r\n            }}\r\n          >\r\n            📊 Trading Score Analysis\r\n          </Typography>\r\n\r\n          <Tabs\r\n            value={activeTab}\r\n            onChange={handleTabChange}\r\n            sx={{\r\n              minHeight: 40,\r\n              backgroundColor: theme.palette.mode === 'light'\r\n                ? '#f0f0f0'\r\n                : alpha(theme.palette.background.paper, 0.4),\r\n              borderRadius: '20px',\r\n              padding: '4px',\r\n              '& .MuiTabs-flexContainer': {\r\n                gap: '4px'\r\n              },\r\n              '& .MuiTabs-indicator': {\r\n                display: 'none'\r\n              }\r\n            }}\r\n          >\r\n          <Tab\r\n            label=\"Overview\"\r\n            sx={{\r\n              minHeight: 32,\r\n              my: 0.2,\r\n              textTransform: 'none',\r\n              fontSize: '0.875rem',\r\n              fontWeight: 500,\r\n              color: 'text.secondary',\r\n              borderRadius: '16px',\r\n              padding: '6px 18px',\r\n              '&.Mui-selected': {\r\n                color: theme.palette.mode === 'dark' ? 'white' : 'background.paper',\r\n                backgroundColor: 'primary.main',\r\n                boxShadow: theme.shadows[1]\r\n              },\r\n              '&:hover:not(.Mui-selected)': {\r\n                backgroundColor: alpha(theme.palette.primary.main, 0.05),\r\n                color: 'primary.main'\r\n              }\r\n            }}\r\n          />\r\n          <Tab\r\n            label=\"History\"\r\n            sx={{\r\n              minHeight: 32,\r\n              my: 0.2,\r\n              textTransform: 'none',\r\n              fontSize: '0.875rem',\r\n              fontWeight: 500,\r\n              color: 'text.secondary',\r\n              borderRadius: '16px',\r\n              padding: '6px 18px',\r\n              '&.Mui-selected': {\r\n                color: theme.palette.mode === 'dark' ? 'white' : 'background.paper',\r\n                backgroundColor: 'primary.main',\r\n                boxShadow: theme.shadows[1]\r\n              },\r\n              '&:hover:not(.Mui-selected)': {\r\n                backgroundColor: alpha(theme.palette.primary.main, 0.05),\r\n                color: 'primary.main'\r\n              }\r\n            }}\r\n          />\r\n          <Tab\r\n            label=\"Patterns\"\r\n            sx={{\r\n              minHeight: 32,\r\n              my: 0.2,\r\n              textTransform: 'none',\r\n              fontSize: '0.875rem',\r\n              fontWeight: 500,\r\n              color: 'text.secondary',\r\n              borderRadius: '16px',\r\n              padding: '6px 18px',\r\n              '&.Mui-selected': {\r\n                color: theme.palette.mode === 'dark' ? 'white' : 'background.paper',\r\n                backgroundColor: 'primary.main',\r\n                boxShadow: theme.shadows[1]\r\n              },\r\n              '&:hover:not(.Mui-selected)': {\r\n                backgroundColor: alpha(theme.palette.primary.main, 0.05),\r\n                color: 'primary.main'\r\n              }\r\n            }}\r\n          />\r\n          <Tab\r\n            label=\"Settings\"\r\n            sx={{\r\n              minHeight: 32,\r\n              my: 0.2,\r\n              textTransform: 'none',\r\n              fontSize: '0.875rem',\r\n              fontWeight: 500,\r\n              color: 'text.secondary',\r\n              borderRadius: '16px',\r\n              padding: '6px 18px',\r\n              '&.Mui-selected': {\r\n                color: theme.palette.mode === 'dark' ? 'white' : 'background.paper',\r\n                backgroundColor: 'primary.main',\r\n                boxShadow: theme.shadows[1]\r\n              },\r\n              '&:hover:not(.Mui-selected)': {\r\n                backgroundColor: alpha(theme.palette.primary.main, 0.05),\r\n                color: 'primary.main'\r\n              }\r\n            }}\r\n          />\r\n        </Tabs>\r\n        </Stack>\r\n      </Box>\r\n\r\n      <Box sx={{ px: 3, pb: 3 }}>\r\n        {/* Overview Tab */}\r\n        <TabPanel value={activeTab} index={0}>\r\n          <Stack spacing={4}>\r\n            {/* Multi-period score cards */}\r\n            {isCalculating ? (\r\n              <Box\r\n                sx={{\r\n                  display: 'flex',\r\n                  flexDirection: 'column',\r\n                  alignItems: 'center',\r\n                  justifyContent: 'center',\r\n                  py: 4\r\n                }}\r\n              >\r\n                <CircularProgress size={40} sx={{ mb: 2 }} />\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  Calculating trading scores...\r\n                </Typography>\r\n              </Box>\r\n            ) : multiPeriodScores ? (\r\n              <Box>\r\n\r\n                <Typography\r\n                  variant=\"body2\"\r\n                  sx={{\r\n                    color: theme.palette.text.secondary,\r\n                    mb: 1,\r\n                    fontStyle: 'italic'\r\n                  }}\r\n                >\r\n                  Click on any score card to see detailed breakdown\r\n                </Typography>\r\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2} sx={{ flexWrap: 'wrap' }}>\r\n                  <Box\r\n                    onClick={() => handleScoreCardClick('daily')}\r\n                    sx={{\r\n                      cursor: 'pointer',\r\n                      transition: 'transform 0.2s',\r\n                      '&:hover': { transform: 'translateY(-2px)' },\r\n                      flex: { xs: '1', sm: '1 1 calc(50% - 8px)', md: '1 1 calc(25% - 12px)' }\r\n                    }}\r\n                  >\r\n                    <ScoreCard\r\n                      score={multiPeriodScores.daily.currentScore}\r\n                      trend={multiPeriodScores.daily.trend}\r\n                      period=\"daily\"\r\n                      compact\r\n                      recommendedScore={recommendedScore}\r\n                    />\r\n                  </Box>\r\n                  <Box\r\n                    onClick={() => handleScoreCardClick('weekly')}\r\n                    sx={{\r\n                      cursor: 'pointer',\r\n                      transition: 'transform 0.2s',\r\n                      '&:hover': { transform: 'translateY(-2px)' },\r\n                      flex: { xs: '1', sm: '1 1 calc(50% - 8px)', md: '1 1 calc(25% - 12px)' }\r\n                    }}\r\n                  >\r\n                    <ScoreCard\r\n                      score={multiPeriodScores.weekly.currentScore}\r\n                      trend={multiPeriodScores.weekly.trend}\r\n                      period=\"weekly\"\r\n                      compact\r\n                      recommendedScore={recommendedScore}\r\n                    />\r\n                  </Box>\r\n                  <Box\r\n                    onClick={() => handleScoreCardClick('monthly')}\r\n                    sx={{\r\n                      cursor: 'pointer',\r\n                      transition: 'transform 0.2s',\r\n                      '&:hover': { transform: 'translateY(-2px)' },\r\n                      flex: { xs: '1', sm: '1 1 calc(50% - 8px)', md: '1 1 calc(25% - 12px)' }\r\n                    }}\r\n                  >\r\n                    <ScoreCard\r\n                      score={multiPeriodScores.monthly.currentScore}\r\n                      trend={multiPeriodScores.monthly.trend}\r\n                      period=\"monthly\"\r\n                      compact\r\n                      recommendedScore={recommendedScore}\r\n                    />\r\n                  </Box>\r\n                  <Box\r\n                    onClick={() => handleScoreCardClick('yearly')}\r\n                    sx={{\r\n                      cursor: 'pointer',\r\n                      transition: 'transform 0.2s',\r\n                      '&:hover': { transform: 'translateY(-2px)' },\r\n                      flex: { xs: '1', sm: '1 1 calc(50% - 8px)', md: '1 1 calc(25% - 12px)' }\r\n                    }}\r\n                  >\r\n                    <ScoreCard\r\n                      score={multiPeriodScores.yearly.currentScore}\r\n                      trend={multiPeriodScores.yearly.trend}\r\n                      period=\"yearly\"\r\n                      compact\r\n                      recommendedScore={recommendedScore}\r\n                    />\r\n                  </Box>\r\n                </Stack>\r\n              </Box>\r\n            ) : (\r\n              <Alert severity=\"warning\">\r\n                <Typography variant=\"subtitle2\" gutterBottom sx={{ fontWeight: 600 }}>\r\n                  📊 No Score Data Available\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  Unable to calculate multi-period scores. This could be because:\r\n                  <br />• No trades found for the current periods\r\n                  <br />• Insufficient trade data for analysis\r\n                  <br />• All trades are outside the selected date range\r\n                </Typography>\r\n              </Alert>\r\n            )}\r\n\r\n\r\n\r\n            {/* Quick recommendations */}\r\n            {scoreAnalysis && scoreAnalysis.recommendations.length > 0 && (\r\n              <Alert\r\n                severity=\"info\"\r\n                sx={{\r\n                  backgroundColor: theme.palette.mode === 'dark'\r\n                    ? alpha(theme.palette.info.main, 0.1)\r\n                    : alpha(theme.palette.info.main, 0.05),\r\n                  border: `1px solid ${alpha(theme.palette.info.main, 0.2)}`,\r\n                  borderRadius: 2,\r\n                  '& .MuiAlert-icon': {\r\n                    color: theme.palette.info.main\r\n                  }\r\n                }}\r\n              >\r\n                <Typography variant=\"subtitle2\" gutterBottom sx={{ fontWeight: 600 }}>\r\n                  💡 Quick Tip\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  {scoreAnalysis.recommendations[0]}\r\n                </Typography>\r\n              </Alert>\r\n            )}\r\n\r\n            {/* No content fallback */}\r\n            {!multiPeriodScores && !scoreAnalysis && (\r\n              <Alert severity=\"info\">\r\n                <Typography variant=\"subtitle2\" gutterBottom sx={{ fontWeight: 600 }}>\r\n                  🎯 Get Started with Scoring\r\n                </Typography>\r\n                <Typography variant=\"body2\">\r\n                  To see your trading score analysis:\r\n                  <br />• Add at least {settings.thresholds.minTradesForScore} trades\r\n                  <br />• Ensure trades have dates within the current periods\r\n                  <br />• Include session, tags, and risk/reward data for better analysis\r\n                </Typography>\r\n              </Alert>\r\n            )}\r\n          </Stack>\r\n        </TabPanel>\r\n\r\n        {/* Score History Tab */}\r\n        <TabPanel value={activeTab} index={1}>\r\n          <ScoreHistory\r\n            history={scoreHistory}\r\n            period={historyPeriod}\r\n            onPeriodChange={handleHistoryPeriodChange}\r\n          />\r\n        </TabPanel>\r\n\r\n        {/* Pattern Analysis Tab */}\r\n        <TabPanel value={activeTab} index={2}>\r\n          <TagPatternAnalysis\r\n            trades={trades}\r\n            selectedDate={selectedDate}\r\n            settings={settings}\r\n          />\r\n        </TabPanel>\r\n\r\n        {/* Settings Tab */}\r\n        <TabPanel value={activeTab} index={3}>\r\n          <Stack spacing={3}>\r\n            <ScoreSettingsComponent\r\n              settings={settings}\r\n              onSettingsChange={handleSettingsChange}\r\n              onSave={handleSettingsSave}\r\n              isSaving={isSaving}\r\n              trades={trades}\r\n              selectedTags={selectedTags}\r\n              onTagsChange={handleTagsChange}\r\n              allTags={allTags}\r\n            />\r\n          </Stack>\r\n        </TabPanel>\r\n      </Box>\r\n\r\n      {/* Score Breakdown Modal */}\r\n      <Dialog\r\n        open={breakdownModalOpen}\r\n        onClose={handleCloseBreakdownModal}\r\n        maxWidth=\"lg\"\r\n        fullWidth\r\n        sx={{\r\n          '& .MuiDialog-paper': {\r\n            backgroundColor: theme.palette.mode === 'dark'\r\n              ? alpha(theme.palette.background.paper, 0.95)\r\n              : theme.palette.background.paper,\r\n            borderRadius: 2,\r\n            maxHeight: '90vh'\r\n          },\r\n          '& .MuiDialogContent-root': {\r\n            ...scrollbarStyles(theme)\r\n          }\r\n        }}\r\n      >\r\n        <DialogTitle sx={{\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n          alignItems: 'center',\r\n          pb: 1\r\n        }}>\r\n          <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\r\n            {selectedBreakdownData ?\r\n              `📊 ${selectedBreakdownData.period.charAt(0).toUpperCase() + selectedBreakdownData.period.slice(1)} Score Analysis`\r\n              : 'Score Analysis'\r\n            }\r\n          </Typography>\r\n          <IconButton\r\n            onClick={handleCloseBreakdownModal}\r\n            sx={{\r\n              color: theme.palette.text.secondary,\r\n              '&:hover': {\r\n                backgroundColor: alpha(theme.palette.text.secondary, 0.1)\r\n              }\r\n            }}\r\n          >\r\n            <Close />\r\n          </IconButton>\r\n        </DialogTitle>\r\n        <DialogContent sx={{ pt: 1 }}>\r\n          {selectedBreakdownData && (\r\n            <ScoreBreakdown\r\n              breakdown={selectedBreakdownData.analysis.breakdown}\r\n              pattern={selectedBreakdownData.analysis.pattern}\r\n              recommendations={selectedBreakdownData.analysis.recommendations}\r\n              strengths={selectedBreakdownData.analysis.strengths}\r\n              weaknesses={selectedBreakdownData.analysis.weaknesses}\r\n            />\r\n          )}\r\n        </DialogContent>\r\n      </Dialog>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default ScoreSection;\r\n","import { Trade } from '../types/trade';\r\nimport { isAfter, isBefore, isSameDay, isSameMonth, isSameWeek, isSameYear, startOfDay } from 'date-fns';\r\nimport { calculateEffectiveMaxDailyDrawdown, calculatePercentageOfValueAtDate, DynamicRiskSettings } from './dynamicRiskUtils';\r\nimport { \r\n  DayStatus\r\n} from '../components/StyledComponents'; \r\n\r\n/**\r\n * Calculate total PnL for a set of trades\r\n * @param trades Array of trades\r\n * @returns Total PnL\r\n */\r\nexport const calculateTotalPnL = (trades: Trade[]): number => {\r\n  return trades.reduce((sum, trade) => sum + trade.amount, 0);\r\n};\r\n\r\n/**\r\n * Calculate win rate for a set of trades\r\n * @param trades Array of trades\r\n * @returns Win rate percentage\r\n */\r\nexport const calculateWinRate = (trades: Trade[]): number => {\r\n  if (trades.length === 0) return 0;\r\n\r\n  const winCount = trades.filter(trade => trade.type === 'win').length;\r\n  return (winCount / trades.length) * 100;\r\n};\r\n\r\n/**\r\n * Calculate profit factor for a set of trades\r\n * @param trades Array of trades\r\n * @returns Profit factor (gross profit / gross loss)\r\n */\r\nexport const calculateProfitFactor = (trades: Trade[]): number => {\r\n  const grossProfit = trades\r\n    .filter(trade => trade.amount > 0)\r\n    .reduce((sum, trade) => sum + trade.amount, 0);\r\n\r\n  const grossLoss = Math.abs(trades\r\n    .filter(trade => trade.amount < 0 || trade.type === 'loss')\r\n    .reduce((sum, trade) => sum + trade.amount, 0));\r\n     \r\n  // If no losses, return a high but reasonable number instead of 999\r\n  // This represents an excellent profit factor without looking like an error\r\n  if (grossLoss === 0) return grossProfit > 0 ? 50.0 : 0;\r\n  return grossProfit / grossLoss;\r\n};\r\n\r\n/**\r\n * Calculate maximum drawdown for a set of trades\r\n * @param trades Array of trades\r\n * @returns Maximum drawdown percentage\r\n */\r\nexport const calculateMaxDrawdown = (trades: Trade[]): {\r\n  maxDrawdown: number;\r\n  drawdownStartDate?: Date;\r\n  drawdownEndDate?: Date;\r\n  drawdownRecoveryNeeded: number;\r\n  drawdownDuration: number;\r\n} => {\r\n  if (trades.length === 0) {\r\n    return {\r\n      maxDrawdown: 0,\r\n      drawdownRecoveryNeeded: 0,\r\n      drawdownDuration: 0\r\n    };\r\n  }\r\n\r\n  // Sort trades by date\r\n  const sortedTrades = [...trades].sort((a, b) =>\r\n    new Date(a.date).getTime() - new Date(b.date).getTime()\r\n  );\r\n\r\n  let balance = 0;\r\n  let peak = 0;\r\n  let maxDrawdown = 0;\r\n  let drawdownStartDate: Date | undefined;\r\n  let drawdownEndDate: Date | undefined;\r\n  let currentDrawdownStartDate: Date | undefined;\r\n  let drawdownDuration = 0;\r\n\r\n  sortedTrades.forEach(trade => {\r\n    balance += trade.amount;\r\n\r\n    if (balance > peak) {\r\n      peak = balance;\r\n      currentDrawdownStartDate = undefined;\r\n    } else if (peak > 0) {\r\n      const drawdown = (peak - balance) / peak * 100;\r\n\r\n      if (drawdown > maxDrawdown) {\r\n        maxDrawdown = drawdown;\r\n        drawdownStartDate = currentDrawdownStartDate || trade.date;\r\n        drawdownEndDate = trade.date;\r\n\r\n        // Calculate drawdown duration (number of trades)\r\n        if (drawdownStartDate && drawdownEndDate) {\r\n          const startIndex = sortedTrades.findIndex(t => t.date === drawdownStartDate);\r\n          const endIndex = sortedTrades.findIndex(t => t.date === drawdownEndDate);\r\n          if (startIndex !== -1 && endIndex !== -1) {\r\n            drawdownDuration = endIndex - startIndex + 1;\r\n          } else {\r\n            // Fallback if dates can't be found\r\n            drawdownDuration = 1;\r\n          }\r\n        } else {\r\n          drawdownDuration = 1;\r\n        }\r\n      }\r\n\r\n      if (!currentDrawdownStartDate) {\r\n        currentDrawdownStartDate = trade.date;\r\n      }\r\n    }\r\n  });\r\n\r\n  // Calculate recovery needed\r\n  const drawdownRecoveryNeeded = maxDrawdown > 0\r\n    ? (maxDrawdown / (100 - maxDrawdown)) * 100\r\n    : 0;\r\n\r\n  return {\r\n    maxDrawdown,\r\n    drawdownStartDate,\r\n    drawdownEndDate,\r\n    drawdownRecoveryNeeded,\r\n    drawdownDuration\r\n  };\r\n};\r\n\r\n\r\n/**\r\n * Calculate target progress for a set of trades\r\n * @param trades Array of trades\r\n * @param accountBalance Initial account balance\r\n * @param target Target percentage\r\n * @param startDate Optional start date to calculate account value at start of period\r\n * @param allTrades Optional all trades array for calculating account value at start date\r\n * @returns Target progress percentage (capped at 100%)\r\n */\r\nexport const calculateTargetProgress = (\r\n  trades: Trade[],\r\n  accountBalance: number,\r\n  target: number,\r\n  startDate?: Date,\r\n  allTrades?: Trade[]\r\n): number => {\r\n  if (!target || target <= 0 || !accountBalance) return 0;\r\n\r\n  const totalPnL = calculateTotalPnL(trades);\r\n\r\n  // Calculate account value at start of period if startDate and allTrades are provided\r\n  let baselineAccountValue = accountBalance;\r\n  if (startDate && allTrades) {\r\n    const tradesBeforePeriod = allTrades.filter(trade => new Date(trade.date) < startDate);\r\n    baselineAccountValue = accountBalance + tradesBeforePeriod.reduce((sum, trade) => sum + trade.amount, 0);\r\n  }\r\n\r\n  if (baselineAccountValue <= 0) return 0;\r\n\r\n  const targetAmount = (target / 100) * baselineAccountValue;\r\n\r\n  // Cap progress at 100% to prevent overflow in UI components\r\n  return Math.min(Math.max((totalPnL / targetAmount) * 100, 0), 100);\r\n};\r\n\r\n/**\r\n * Filter trades by date range\r\n * @param trades Array of trades\r\n * @param startDate Start date\r\n * @param endDate End date\r\n * @returns Filtered trades\r\n */\r\nexport const filterTradesByDateRange = (\r\n  trades: Trade[],\r\n  startDate: Date,\r\n  endDate: Date\r\n): Trade[] => {\r\n  return trades.filter(trade => {\r\n    const tradeDate = new Date(trade.date);\r\n    return (\r\n      !isBefore(tradeDate, startOfDay(startDate)) &&\r\n      !isAfter(tradeDate, startOfDay(endDate))\r\n    );\r\n  });\r\n};\r\n\r\n/**\r\n * Filter trades by week\r\n * @param trades Array of trades\r\n * @param date Date within the week\r\n * @returns Filtered trades\r\n */\r\nexport const filterTradesByWeek = (\r\n  trades: Trade[],\r\n  date: Date\r\n): Trade[] => {\r\n  return trades.filter(trade => {\r\n    const tradeDate = new Date(trade.date);\r\n    return isSameWeek(tradeDate, date, { weekStartsOn: 1 });\r\n  });\r\n};\r\n\r\n/**\r\n * Filter trades by month\r\n * @param trades Array of trades\r\n * @param date Date within the month\r\n * @returns Filtered trades\r\n */\r\nexport const filterTradesByMonth = (\r\n  trades: Trade[],\r\n  date: Date\r\n): Trade[] => {\r\n  return trades.filter(trade => {\r\n    const tradeDate = new Date(trade.date);\r\n    return isSameMonth(tradeDate, date) && isSameYear(tradeDate, date);\r\n  });\r\n};\r\n\r\n/**\r\n * Filter trades by year\r\n * @param trades Array of trades\r\n * @param date Date within the year\r\n * @returns Filtered trades\r\n */\r\nexport const filterTradesByYear = (\r\n  trades: Trade[],\r\n  date: Date\r\n): Trade[] => {\r\n  return trades.filter(trade => {\r\n    const tradeDate = new Date(trade.date);\r\n    return isSameYear(tradeDate, date);\r\n  });\r\n};\r\n\r\n/**\r\n * Filter trades by day\r\n * @param trades Array of trades\r\n * @param date Date\r\n * @returns Filtered trades\r\n */\r\nexport const filterTradesByDay = (\r\n  trades: Trade[],\r\n  date: Date\r\n): Trade[] => {\r\n  return trades.filter(trade => {\r\n    const tradeDate = new Date(trade.date);\r\n    return isSameDay(tradeDate, date);\r\n  });\r\n};\r\n\r\n/**\r\n * Filter trades by tags\r\n * @param trades Array of trades\r\n * @param tags Array of tags to filter by\r\n * @returns Filtered trades\r\n */\r\nexport const filterTradesByTags = (\r\n  trades: Trade[],\r\n  tags: string[]\r\n): Trade[] => {\r\n  if (!tags.length) return trades;\r\n\r\n  return trades.filter(trade => {\r\n    if (!trade.tags || !trade.tags.length) return false;\r\n    return tags.some(tag => trade.tags?.includes(tag));\r\n  });\r\n};\r\n\r\n/**\r\n * Calculate average win and loss amounts\r\n * @param trades Array of trades\r\n * @returns Object with average win and loss\r\n */\r\nexport const calculateAverages = (trades: Trade[]): {\r\n  avgWin: number;\r\n  avgLoss: number;\r\n} => {\r\n  const winTrades = trades.filter(trade => trade.type === 'win');\r\n  const lossTrades = trades.filter(trade => trade.type === 'loss');\r\n\r\n  const avgWin = winTrades.length\r\n    ? winTrades.reduce((sum, trade) => sum + trade.amount, 0) / winTrades.length\r\n    : 0;\r\n\r\n  const avgLoss = lossTrades.length\r\n    ? Math.abs(lossTrades.reduce((sum, trade) => sum + trade.amount, 0)) / lossTrades.length\r\n    : 0;\r\n\r\n  return { avgWin, avgLoss };\r\n};\r\n\r\n\r\ninterface DayStats {\r\n  netAmount: number;\r\n  status: DayStatus;\r\n  percentage: string;\r\n  isDrawdownViolation: boolean;\r\n}\r\n\r\nexport const calculateDayStats = (\r\n  dayTrades: Trade[],\r\n  accountBalance: number,\r\n  maxDailyDrawdown: number,\r\n  dynamicRiskSettings?: DynamicRiskSettings,\r\n  allTrades?: Trade[],\r\n  dayDate?: Date\r\n): DayStats => {\r\n  // Calculate net amount for the day\r\n  const netAmount = dayTrades.reduce((sum, trade) => sum + trade.amount, 0);\r\n\r\n  // Calculate percentage loss/gain relative to account value at start of day (excluding current day trades)\r\n  const percentage = allTrades && dayDate\r\n    ? calculatePercentageOfValueAtDate(netAmount, accountBalance, allTrades, startOfDay(dayDate)).toFixed(1)\r\n    : accountBalance > 0 ? ((netAmount / accountBalance) * 100).toFixed(1) : '0';\r\n\r\n  let status: DayStatus = 'neutral';\r\n  if (dayTrades.length > 0) {\r\n    status = netAmount > 0 ? 'win' : netAmount < 0 ? 'loss' : dayTrades.find(trade => trade.type === 'breakeven') ? 'breakeven' : 'neutral';\r\n  }\r\n\r\n  // Calculate effective max daily drawdown based on dynamic risk settings\r\n  let effectiveMaxDailyDrawdown = maxDailyDrawdown;\r\n \r\n  if (dynamicRiskSettings && allTrades) {\r\n    effectiveMaxDailyDrawdown = calculateEffectiveMaxDailyDrawdown(\r\n      maxDailyDrawdown,\r\n      allTrades,\r\n      dynamicRiskSettings\r\n    );\r\n  }\r\n\r\n  // Check for drawdown violation - if the loss percentage exceeds effectiveMaxDailyDrawdown\r\n  const percentageValue = parseFloat(percentage);\r\n  const isDrawdownViolation = status === 'loss' && Math.abs(percentageValue) > effectiveMaxDailyDrawdown;\r\n\r\n  return { netAmount, status, percentage, isDrawdownViolation };\r\n};\r\n\r\n ","import React from 'react';\r\nimport {\r\n  Button,\r\n  Typography,\r\n  IconButton,\r\n  Box,\r\n  Paper,\r\n  useTheme\r\n} from '@mui/material';\r\nimport { alpha } from '@mui/material/styles';\r\nimport {\r\n  ChevronLeft,\r\n  ChevronRight,\r\n  TrendingUp,\r\n  EmojiEvents,\r\n  CalendarMonth,\r\n  CalendarToday,\r\n  ViewCarousel as GalleryIcon\r\n} from '@mui/icons-material';\r\nimport { addYears, subYears } from 'date-fns';\r\nimport { Trade } from '../types/trade';\r\nimport TargetBadge from '../components/TargetBadge';\r\nimport { BaseDialog } from './common';\r\nimport { scrollbarStyles } from '../styles/scrollbarStyles';\r\nimport { calculateTargetProgress } from '../utils/statsUtils';\r\n\r\ninterface SelectDateDialogProps {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  onDateSelect: (date: Date) => void;\r\n  initialDate?: Date;\r\n  trades: Trade[];\r\n  accountBalance: number;\r\n  monthlyTarget?: number;\r\n  yearlyTarget?: number;\r\n  onOpenGalleryMode?: (trades: Trade[], initialTradeId?: string, title?: string) => void;\r\n}\r\n\r\nconst SelectDateDialog: React.FC<SelectDateDialogProps> = ({\r\n  open,\r\n  onClose,\r\n  onDateSelect,\r\n  initialDate,\r\n  trades,\r\n  accountBalance,\r\n  monthlyTarget,\r\n  yearlyTarget,\r\n  onOpenGalleryMode\r\n}) => {\r\n  const theme = useTheme();\r\n  const [currentDate, setCurrentDate] = React.useState(initialDate || new Date());\r\n  const currentYear = currentDate.getFullYear();\r\n  const months = [\r\n    'January', 'February', 'March', 'April', 'May', 'June',\r\n    'July', 'August', 'September', 'October', 'November', 'December'\r\n  ];\r\n\r\n  React.useEffect(() => {\r\n    if (initialDate) {\r\n      setCurrentDate(initialDate);\r\n    }\r\n  }, [initialDate]);\r\n\r\n  const handlePrevYear = () => setCurrentDate(prev => subYears(prev, 1));\r\n  const handleNextYear = () => setCurrentDate(prev => addYears(prev, 1));\r\n  const handleToday = () => setCurrentDate(new Date());\r\n\r\n  const handleMonthSelect = (monthIndex: number) => {\r\n    const newDate = new Date(currentYear, monthIndex, 1);\r\n    onDateSelect(newDate);\r\n    onClose();\r\n  };\r\n\r\n  const handleYearlyGalleryMode = () => {\r\n    if (onOpenGalleryMode && yearTrades.length > 0) {\r\n      const title = `${currentYear} - All Trades (${yearTrades.length} trades)`;\r\n      onOpenGalleryMode(yearTrades, yearTrades[0].id, title);\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  const currentMonth = currentDate.getMonth();\r\n\r\n  // Calculate yearly statistics\r\n  const yearTrades = trades.filter(trade => new Date(trade.date).getFullYear() === currentYear);\r\n  const yearlyPnL = yearTrades.reduce((sum, trade) => sum + trade.amount, 0);\r\n  const yearlyWinCount = yearTrades.filter(trade => trade.type === 'win').length;\r\n  const yearlyLossCount = yearTrades.filter(trade => trade.type === 'loss').length;\r\n  const yearlyWinRate = yearTrades.length > 0 ? (yearlyWinCount / yearTrades.length * 100).toFixed(1) : '0';\r\n  // Calculate yearly growth percentage using account value at start of year\r\n  const startOfYear = new Date(currentYear, 0, 1);\r\n  const tradesBeforeYear = trades.filter(trade => new Date(trade.date) < startOfYear);\r\n  const accountValueAtStartOfYear = accountBalance + tradesBeforeYear.reduce((sum, trade) => sum + trade.amount, 0);\r\n  const yearlyGrowthPercentage = accountValueAtStartOfYear > 0 ? (yearlyPnL / accountValueAtStartOfYear * 100).toFixed(2) : '0';\r\n\r\n  // Calculate monthly PnL for each month\r\n  const getMonthPnL = (monthIndex: number) => {\r\n    const monthTrades = trades.filter(trade =>\r\n      new Date(trade.date).getFullYear() === currentYear &&\r\n      new Date(trade.date).getMonth() === monthIndex\r\n    );\r\n    return monthTrades.reduce((sum, trade) => sum + trade.amount, 0);\r\n  };\r\n\r\n  // Find the best month\r\n  const getBestMonth = () => {\r\n    let bestMonthIndex = -1;\r\n    let bestMonthPnL = 0;\r\n\r\n    for (let i = 0; i < 12; i++) {\r\n      const monthPnL = getMonthPnL(i);\r\n      if (monthPnL > bestMonthPnL) {\r\n        bestMonthPnL = monthPnL;\r\n        bestMonthIndex = i;\r\n      }\r\n    }\r\n\r\n    return {\r\n      name: bestMonthIndex >= 0 ? months[bestMonthIndex] : 'None',\r\n      pnl: bestMonthPnL\r\n    };\r\n  };\r\n\r\n  const bestMonth = getBestMonth();\r\n\r\n  // Calculate monthly target progress using centralized function\r\n  const getMonthTargetProgress = (monthIndex: number) => {\r\n    if (!monthlyTarget || monthlyTarget <= 0) return null;\r\n\r\n    const monthTrades = trades.filter(trade =>\r\n      new Date(trade.date).getFullYear() === currentYear &&\r\n      new Date(trade.date).getMonth() === monthIndex\r\n    );\r\n\r\n    const startOfMonth = new Date(currentYear, monthIndex, 1);\r\n    const progress = calculateTargetProgress(monthTrades, accountBalance, monthlyTarget, startOfMonth, trades);\r\n    const monthPnL = getMonthPnL(monthIndex);\r\n\r\n    // Calculate account value at start of month for target amount comparison\r\n    const tradesBeforeMonth = trades.filter(trade => new Date(trade.date) < startOfMonth);\r\n    const accountValueAtStartOfMonth = accountBalance + tradesBeforeMonth.reduce((sum, trade) => sum + trade.amount, 0);\r\n    const targetAmount = (monthlyTarget / 100) * accountValueAtStartOfMonth;\r\n\r\n    return {\r\n      progress,\r\n      isMet: monthPnL >= targetAmount,\r\n      rawProgress: (monthPnL / targetAmount) * 100\r\n    };\r\n  };\r\n\r\n  // Calculate monthly growth percentage\r\n  const getMonthGrowthPercentage = (monthIndex: number) => {\r\n    const monthPnL = getMonthPnL(monthIndex);\r\n\r\n    // Calculate account value at start of month (excluding that month's trades)\r\n    const startOfMonth = new Date(currentYear, monthIndex, 1);\r\n    const tradesBeforeMonth = trades.filter(trade => new Date(trade.date) < startOfMonth);\r\n    const accountValueAtStartOfMonth = accountBalance + tradesBeforeMonth.reduce((sum, trade) => sum + trade.amount, 0);\r\n\r\n    if (accountValueAtStartOfMonth <= 0) return '0';\r\n    return (monthPnL / accountValueAtStartOfMonth * 100).toFixed(2);\r\n  };\r\n\r\n  // Calculate yearly target progress using centralized function\r\n  const getYearlyTargetProgress = () => {\r\n    if (!yearlyTarget || yearlyTarget <= 0) return null;\r\n\r\n    const startOfYear = new Date(currentYear, 0, 1);\r\n    const progress = calculateTargetProgress(yearTrades, accountBalance, yearlyTarget, startOfYear, trades);\r\n\r\n    // Calculate account value at start of year for target amount comparison\r\n    const tradesBeforeYear = trades.filter(trade => new Date(trade.date) < startOfYear);\r\n    const accountValueAtStartOfYear = accountBalance + tradesBeforeYear.reduce((sum, trade) => sum + trade.amount, 0);\r\n    const targetAmount = (yearlyTarget / 100) * accountValueAtStartOfYear;\r\n\r\n    return {\r\n      progress,\r\n      isMet: yearlyPnL >= targetAmount,\r\n      rawProgress: (yearlyPnL / targetAmount) * 100\r\n    };\r\n  };\r\n\r\n  const yearlyTargetProgress = getYearlyTargetProgress();\r\n\r\n  const dialogTitle = (\r\n    <Box sx={{ display: 'flex', alignItems: 'center', width: '100%' }}>\r\n      <CalendarToday sx={{\r\n        fontSize: '1.75rem',\r\n        color: theme.palette.primary.main\r\n      }} />\r\n      <Typography variant=\"h5\" sx={{ fontWeight: 700, flex: 1, color: 'text.primary', fontSize: '1.5rem', ml: 1.5 }}>\r\n        Select Month\r\n      </Typography>\r\n      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n        {currentYear !== new Date().getFullYear() && (\r\n          <Button\r\n            onClick={handleToday}\r\n            size=\"medium\"\r\n            variant=\"outlined\"\r\n            startIcon={<CalendarToday sx={{ fontSize: '1.1rem' }} />}\r\n            sx={{\r\n              ml: 1,\r\n              textTransform: 'none',\r\n              fontWeight: 600,\r\n              borderRadius: 1.5,\r\n              px: 2\r\n            }}\r\n          >\r\n            Today\r\n          </Button>\r\n        )}\r\n        <IconButton onClick={handlePrevYear} sx={{ color: 'text.primary', bgcolor: alpha(theme.palette.primary.main, 0.05) }}>\r\n          <ChevronLeft />\r\n        </IconButton>\r\n        <Typography variant=\"h5\" sx={{ fontWeight: 800, color: 'text.primary', minWidth: '80px', textAlign: 'center', letterSpacing: '-0.5px' }}>\r\n          {currentYear}\r\n        </Typography>\r\n        <IconButton onClick={handleNextYear} sx={{ color: 'text.primary', bgcolor: alpha(theme.palette.primary.main, 0.05) }}>\r\n          <ChevronRight />\r\n        </IconButton>\r\n      </Box>\r\n    </Box>\r\n  );\r\n\r\n  const dialogActions = (\r\n    <Box sx={{ display: 'flex', gap: 2 }}>\r\n      \r\n      <Button\r\n        onClick={onClose}\r\n        variant=\"outlined\"\r\n        size=\"large\"\r\n        sx={{\r\n          textTransform: 'none',\r\n          fontWeight: 600,\r\n          borderRadius: 1.5,\r\n          px: 3\r\n        }}\r\n      >\r\n        Cancel\r\n      </Button>{onOpenGalleryMode && yearTrades.length > 0 && (\r\n        <Button\r\n          onClick={handleYearlyGalleryMode}\r\n          variant=\"contained\"\r\n          size=\"large\"\r\n          startIcon={<GalleryIcon />}\r\n          sx={{\r\n            textTransform: 'none',\r\n            fontWeight: 600,\r\n            borderRadius: 1.5,\r\n            px: 3\r\n          }}\r\n        >\r\n          Gallery View\r\n        </Button>\r\n      )}\r\n\r\n    </Box>\r\n  );\r\n\r\n  return (\r\n    <BaseDialog\r\n      open={open}\r\n      onClose={onClose}\r\n      title={dialogTitle}\r\n      actions={dialogActions}\r\n      maxWidth=\"sm\"\r\n      fullWidth\r\n      hideFooterCancelButton\r\n    >\r\n      <Box sx={{\r\n        pt: '24px',\r\n        pb: '24px',\r\n        ...scrollbarStyles(theme)\r\n      }}>\r\n         <Paper elevation={0} sx={{\r\n        px: 3,\r\n        py: 2,\r\n        mb: 2,\r\n        borderRadius: 2,\r\n        bgcolor: theme => alpha(theme.palette.background.default, 0.5),\r\n        border: '1px solid',\r\n        borderColor: theme => theme.palette.divider,\r\n        position: 'relative',\r\n        overflow: 'hidden',\r\n      }}>\r\n        <Box sx={{\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          justifyContent: 'space-between',\r\n          mb: 2.5,\r\n          pl: 1\r\n        }}>\r\n          <Box sx={{ display: 'flex', flexDirection: 'row', gap: 0.5 }}>\r\n          <Typography\r\n            variant=\"h6\"\r\n            sx={{\r\n              color: 'text.primary',\r\n              fontSize: '1.1rem',\r\n              fontWeight: 600\r\n            }}\r\n          >\r\n            Yearly Statistics\r\n          </Typography>\r\n          {yearlyTargetProgress && (\r\n              <TargetBadge\r\n              progress={yearlyTargetProgress.rawProgress}\r\n              isMet={yearlyTargetProgress.isMet}\r\n              tooltipText={`${yearlyTargetProgress.isMet ? 'Yearly target achieved' : 'Progress towards yearly target'}: ${yearlyTargetProgress.rawProgress.toFixed(0)}%`}\r\n            />\r\n            )}\r\n          </Box>\r\n\r\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\r\n            <Box sx={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              gap: 1,\r\n              bgcolor: theme => alpha(theme.palette.success.light, 0.1),\r\n              py: 0.75,\r\n              px: 1.5,\r\n              borderRadius: 1,\r\n              border: '1px solid',\r\n              borderColor: 'success.light'\r\n            }}>\r\n              <Typography variant=\"body2\" sx={{\r\n                fontSize: '0.85rem',\r\n                fontWeight: 500,\r\n                color: 'text.secondary'\r\n              }}>\r\n                Best Month:\r\n              </Typography>\r\n              <Typography variant=\"body2\" sx={{\r\n                fontSize: '0.85rem',\r\n                fontWeight: 700,\r\n                color: 'success.main'\r\n              }}>\r\n                {bestMonth.name} (${bestMonth.pnl.toLocaleString()})\r\n              </Typography>\r\n            </Box>\r\n\r\n\r\n          </Box>\r\n\r\n        </Box>\r\n\r\n        <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', sm: '1fr 1fr 1fr' }, gap: 4, width: '100%' }}>\r\n          <Box>\r\n            <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', mb: 1 }}>\r\n              <Box sx={{\r\n                p: 0.8,\r\n                borderRadius: 1,\r\n                bgcolor: theme => alpha(theme.palette.primary.main, 0.1),\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                mb: 1\r\n              }}>\r\n                <TrendingUp sx={{\r\n                  fontSize: '1.2rem',\r\n                  color: 'primary.main'\r\n                }} />\r\n              </Box>\r\n              <Typography variant=\"body1\" sx={{\r\n                fontSize: '1rem',\r\n                fontWeight: 600,\r\n                color: 'text.primary',\r\n                textAlign: 'center'\r\n              }}>\r\n                Yearly P&L\r\n              </Typography>\r\n            </Box>\r\n            <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 0.5 }}>\r\n              <Typography\r\n                variant=\"h5\"\r\n                sx={{\r\n                  fontWeight: 700,\r\n                  fontSize: '1.5rem',\r\n                  color: theme => {\r\n                    if (yearlyPnL > 0) return theme.palette.success.main;\r\n                    if (yearlyPnL < 0) return theme.palette.error.main;\r\n                    return theme.palette.mode === 'dark' ? 'grey.300' : 'text.primary';\r\n                  },\r\n                  textAlign: 'center'\r\n                }}\r\n              >\r\n                ${Math.abs(yearlyPnL).toLocaleString()}\r\n              </Typography>\r\n              <Box sx={{\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                gap: 0.5,\r\n              }}>\r\n                <Typography variant=\"body2\" sx={{\r\n                  fontWeight: 500,\r\n                  color: 'text.secondary',\r\n                  fontSize: '0.9rem',\r\n                  textAlign: 'center'\r\n                }}>\r\n                  Growth\r\n                </Typography>\r\n                <Typography variant=\"body2\" sx={{\r\n                  fontWeight: 700,\r\n                  color: theme => {\r\n                    if (yearlyPnL > 0) return theme.palette.success.main;\r\n                    if (yearlyPnL < 0) return theme.palette.error.main;\r\n                    return theme.palette.mode === 'dark' ? 'grey.300' : 'text.primary';\r\n                  },\r\n                  fontSize: '1rem',\r\n                  textAlign: 'center'\r\n                }}>\r\n                  {yearlyGrowthPercentage}%\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          </Box>\r\n          <Box>\r\n            <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', mb: 1 }}>\r\n              <Box sx={{\r\n                p: 0.8,\r\n                borderRadius: 1,\r\n                bgcolor: theme => alpha(theme.palette.success.main, 0.1),\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                mb: 1\r\n              }}>\r\n                <EmojiEvents sx={{\r\n                  fontSize: '1.2rem',\r\n                  color: 'success.main'\r\n                }} />\r\n              </Box>\r\n              <Typography variant=\"body1\" sx={{\r\n                fontSize: '1rem',\r\n                fontWeight: 600,\r\n                color: 'text.primary',\r\n                textAlign: 'center'\r\n              }}>\r\n                Win Rate\r\n              </Typography>\r\n            </Box>\r\n            <Typography variant=\"h5\" sx={{\r\n              fontWeight: 700,\r\n              fontSize: '1.5rem',\r\n              color: parseFloat(yearlyWinRate) > 50 ? 'success.main' : 'text.primary',\r\n              textAlign: 'center'\r\n            }}>\r\n              {yearlyWinRate}%\r\n            </Typography>\r\n            <Typography variant=\"body1\" sx={{\r\n              fontWeight: 500,\r\n              fontSize: '1rem',\r\n              color: 'text.secondary',\r\n              mt: 0.5,\r\n              textAlign: 'center'\r\n            }}>\r\n              {yearlyWinCount} Ws / {yearlyLossCount} Ls\r\n            </Typography>\r\n          </Box>\r\n          <Box>\r\n            <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', mb: 1 }}>\r\n              <Box sx={{\r\n                p: 0.8,\r\n                borderRadius: 1,\r\n                bgcolor: theme => alpha(theme.palette.info.main, 0.1),\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                mb: 1\r\n              }}>\r\n                <CalendarMonth sx={{\r\n                  fontSize: '1.2rem',\r\n                  color: 'info.main'\r\n                }} />\r\n              </Box>\r\n              <Typography variant=\"body1\" sx={{\r\n                fontSize: '1rem',\r\n                fontWeight: 600,\r\n                color: 'text.primary',\r\n                textAlign: 'center'\r\n              }}>\r\n                Total Trades\r\n              </Typography>\r\n            </Box>\r\n            <Typography variant=\"h5\" sx={{\r\n              fontWeight: 700,\r\n              fontSize: '1.5rem',\r\n              color: 'text.primary',\r\n              textAlign: 'center'\r\n            }}>\r\n              {yearTrades.length}\r\n            </Typography>\r\n            <Typography variant=\"body1\" sx={{\r\n              fontWeight: 500,\r\n              fontSize: '1rem',\r\n              color: 'text.secondary',\r\n              mt: 0.5,\r\n              textAlign: 'center'\r\n            }}>\r\n              Trades this year\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n      </Paper>\r\n        <Typography\r\n          variant=\"h6\"\r\n          sx={{\r\n            color: 'text.primary',\r\n            mb: 2,\r\n            fontSize: '1.1rem',\r\n            fontWeight: 600,\r\n            pl: 1\r\n          }}\r\n        >\r\n          Select a Month\r\n        </Typography>\r\n        <Box sx={{\r\n          display: 'grid',\r\n          gridTemplateColumns: 'repeat(3, 1fr)',\r\n          gap: 1.5\r\n        }}>\r\n          {months.map((month, index) => {\r\n            const monthPnL = getMonthPnL(index);\r\n            const hasEntries = monthPnL !== 0;\r\n            const targetProgress = getMonthTargetProgress(index);\r\n            const growthPercentage = getMonthGrowthPercentage(index);\r\n\r\n            return (\r\n              <Paper\r\n                key={month}\r\n                onClick={() => handleMonthSelect(index)}\r\n                elevation={0}\r\n                sx={{\r\n                  p: 2.5,\r\n                  cursor: 'pointer',\r\n                  display: 'flex',\r\n                  flexDirection: 'column',\r\n                  gap: 1,\r\n                  height: '100%',\r\n                  bgcolor: theme => {\r\n                    if (hasEntries) {\r\n                      return theme.palette.mode === 'dark'\r\n                        ? alpha('#fff', 0.08)\r\n                        : alpha(theme.palette.primary.main, 0.04);\r\n                    }\r\n                    return theme.palette.mode === 'dark' ? 'transparent' : '#f5f5f5';\r\n                  },\r\n                  border: '1px solid',\r\n                  borderColor: theme =>\r\n                    currentMonth === index && currentYear === initialDate?.getFullYear()\r\n                      ? theme.palette.primary.main\r\n                      : theme.palette.mode === 'dark' ? alpha('#fff', 0.12) : theme.palette.grey[200],\r\n                  borderRadius: 2,\r\n                  transition: 'all 0.2s',\r\n                  position: 'relative',\r\n                  overflow: 'hidden',\r\n                  ...(currentMonth === index && currentYear === initialDate?.getFullYear() && {\r\n                    '&::before': {\r\n                      content: '\"\"',\r\n                      position: 'absolute',\r\n                      top: 0,\r\n                      left: 0,\r\n                      width: '100%',\r\n                      height: '4px',\r\n                      backgroundColor: 'primary.main',\r\n                    }\r\n                  }),\r\n                  '&:hover': {\r\n                    bgcolor: theme => theme.palette.mode === 'dark'\r\n                      ? alpha('#fff', 0.12)\r\n                      : alpha(theme.palette.primary.main, 0.08),\r\n                    borderColor: 'primary.main',\r\n                    transform: 'translateY(-2px)',\r\n                    boxShadow: theme => `0 4px 12px ${alpha(theme.palette.primary.main, 0.2)}`\r\n                  }\r\n                }}\r\n              >\r\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 0.5 }}>\r\n                  <Typography\r\n                    variant=\"h6\"\r\n                    sx={{\r\n                      color: theme =>\r\n                        currentMonth === index && currentYear === initialDate?.getFullYear()\r\n                          ? theme.palette.primary.main\r\n                          : theme.palette.text.primary,\r\n                      fontWeight: 700,\r\n                      fontSize: '1.1rem'\r\n                    }}\r\n                  >\r\n                    {month}\r\n                  </Typography>\r\n\r\n                  {targetProgress && hasEntries && (\r\n                    <Box sx={{ ml: 1 }}>\r\n                      <TargetBadge\r\n                        progress={targetProgress.rawProgress}\r\n                        isMet={targetProgress.isMet}\r\n                        tooltipText={`${targetProgress.isMet ? 'Monthly target achieved' : 'Progress towards monthly target'}: ${targetProgress.rawProgress.toFixed(0)}%`}\r\n                      />\r\n                    </Box>\r\n                  )}\r\n                </Box>\r\n                {hasEntries && (\r\n                  <>\r\n                    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 0.5 }}>\r\n                      <Typography\r\n                        variant=\"h6\"\r\n                        sx={{\r\n                          color: monthPnL > 0 ? 'success.main' : 'error.main',\r\n                          fontSize: '1.2rem',\r\n                          fontWeight: 700,\r\n                          display: 'flex',\r\n                          alignItems: 'center',\r\n                          gap: 0.5\r\n                        }}\r\n                      >\r\n                        ${Math.abs(monthPnL).toLocaleString()}\r\n                        <Box component=\"span\" sx={{ fontSize: '0.9rem', fontWeight: 600 }}>\r\n                          {monthPnL > 0 ? '↑' : '↓'}\r\n                        </Box>\r\n                      </Typography>\r\n\r\n                      <Box sx={{\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        gap: 0.5,\r\n                      }}>\r\n                        <Typography variant=\"caption\" sx={{ fontWeight: 500, color: 'text.secondary', fontSize: '0.75rem' }}>\r\n                          Growth\r\n                        </Typography>\r\n                        <Typography variant=\"caption\" sx={{\r\n                          fontWeight: 600,\r\n                          color: monthPnL > 0 ? 'success.main' : 'error.main',\r\n                          fontSize: '0.75rem'\r\n                        }}>\r\n                          {growthPercentage}%\r\n                        </Typography>\r\n                      </Box>\r\n                    </Box>\r\n\r\n                  </>\r\n                )}\r\n              </Paper>\r\n            );\r\n          })}\r\n        </Box>\r\n      </Box>\r\n    </BaseDialog>\r\n  );\r\n};\r\n\r\nexport default SelectDateDialog;","import React, { useMemo, useState, useEffect } from 'react';\r\nimport { format, parseISO } from 'date-fns';\r\nimport { Box, Typography, useTheme, Tabs, Tab, Paper } from '@mui/material';\r\nimport { alpha } from '@mui/material/styles';\r\nimport { Trade } from '../types/trade';\r\nimport { Calendar } from '../types/calendar';\r\nimport ImageZoomDialog, { ImageZoomProp } from './ImageZoomDialog';\r\nimport { DynamicRiskSettings } from '../utils/dynamicRiskUtils';\r\nimport ScoreSection from './ScoreSection';\r\nimport {\r\n  PnLChartsWrapper,\r\n  WinLossDistribution,\r\n  WinLossStats,\r\n  TagPerformanceAnalysis,\r\n  TagDayOfWeekAnalysis,\r\n  DailySummaryTable,\r\n  SessionPerformanceAnalysis,\r\n  TradesListDialog,\r\n  RiskRewardChart\r\n} from './charts';\r\nimport {\r\n  calculateChartData,\r\n  calculateSessionStats,\r\n  calculateTargetValue,\r\n  calculateDrawdownViolationValue,\r\n  getFilteredTrades as utilGetFilteredTrades\r\n} from '../utils/chartDataUtils';\r\n\r\ninterface PerformanceChartsProps {\r\n  trades: Trade[];\r\n  selectedDate: Date;\r\n  monthlyTarget?: number;\r\n  accountBalance: number;\r\n  maxDailyDrawdown: number;\r\n  calendarId: string;\r\n  scoreSettings?: import('../types/score').ScoreSettings;\r\n  onTimePeriodChange?: (period: TimePeriod) => void;\r\n  onPrimaryTagsChange?: (tags: string[]) => void;\r\n  onSecondaryTagsChange?: (tags: string[]) => void;\r\n  onEditTrade?: (trade: Trade) => void;\r\n  onDeleteTrade?: (tradeId: string) => void;\r\n onUpdateTradeProperty?: (tradeId: string, updateCallback: (trade: Trade) => Trade) => Promise<Trade | undefined>;\r\n  onUpdateCalendarProperty?: (calendarId: string, updateCallback: (calendar: Calendar) => Calendar) => Promise<void>;\r\n  // Dynamic risk settings\r\n  dynamicRiskSettings?: DynamicRiskSettings;\r\n  onOpenGalleryMode?: (trades: Trade[], initialTradeId?: string, title?: string) => void;\r\n}\r\n\r\ntype TimePeriod = 'month' | 'year' | 'all';\r\n\r\nconst PerformanceCharts: React.FC<PerformanceChartsProps> = ({\r\n  trades,\r\n  selectedDate,\r\n  monthlyTarget,\r\n  accountBalance,\r\n  maxDailyDrawdown,\r\n  calendarId,\r\n  scoreSettings,\r\n  onTimePeriodChange,\r\n  onPrimaryTagsChange = () => { },\r\n  onSecondaryTagsChange = () => { },\r\n  onEditTrade,\r\n  onDeleteTrade,\r\n  onUpdateTradeProperty,\r\n  onUpdateCalendarProperty,\r\n  dynamicRiskSettings,\r\n  onOpenGalleryMode\r\n}) => {\r\n  const theme = useTheme();\r\n  const [timePeriod, setTimePeriod] = useState<TimePeriod>('month');\r\n  const [tagAnalysisTab, setTagAnalysisTab] = useState<number>(0);\r\n  const [primaryTags, setPrimaryTags] = useState<string[]>([]);\r\n  const [secondaryTags, setSecondaryTags] = useState<string[]>([]);\r\n  const [comparisonTags, setComparisonTags] = useState<string[]>([]);\r\n  const [multipleTradesDialog, setMultipleTradesDialog] = useState<{\r\n    open: boolean;\r\n    trades: Trade[];\r\n    date: string;\r\n    expandedTradeId: string | null;\r\n  }>({\r\n    open: false,\r\n    trades: [],\r\n    date: '',\r\n    expandedTradeId: null\r\n  });\r\n\r\n  // Keep multipleTradesDialog.trades in sync with the main trades array\r\n  useEffect(() => {\r\n    if (multipleTradesDialog.open && multipleTradesDialog.trades.length > 0) {\r\n      // Filter out deleted trades and update remaining ones\r\n      const updatedDialogTrades = multipleTradesDialog.trades\r\n        .filter(dialogTrade => {\r\n          // Keep the trade only if it still exists in the main trades array\r\n          // or if it doesn't have isDeleted flag set to true\r\n          const stillExists = trades.some(t => t.id === dialogTrade.id);\r\n          return stillExists && !dialogTrade.isDeleted;\r\n        })\r\n        .map(dialogTrade => {\r\n          // Find the corresponding trade in the main trades array\r\n          const updatedTrade = trades.find(t => t.id === dialogTrade.id);\r\n          // Return the updated trade if found, otherwise return the original dialog trade\r\n          return updatedTrade || dialogTrade;\r\n        });\r\n\r\n      // If all trades were deleted, close the dialog\r\n      if (updatedDialogTrades.length === 0) {\r\n        setMultipleTradesDialog(prev => ({\r\n          ...prev,\r\n          open: false\r\n        }));\r\n        return;\r\n      }\r\n\r\n      // Only update if there are actual changes\r\n      if (JSON.stringify(updatedDialogTrades) !== JSON.stringify(multipleTradesDialog.trades)) {\r\n        setMultipleTradesDialog(prev => ({\r\n          ...prev,\r\n          trades: updatedDialogTrades\r\n        }));\r\n      }\r\n    }\r\n  }, [trades, multipleTradesDialog.open, multipleTradesDialog.trades]);\r\n\r\n\r\n\r\n  const [zoomedImages, setZoomedImages] = useState<ImageZoomProp | null>(null);\r\n  const [chartData, setChartData] = useState<any[]>([]);\r\n  const [isCalculatingChartData, setIsCalculatingChartData] = useState(false);\r\n\r\n\r\n  // Calculate chart data using the async utility function\r\n  useEffect(() => {\r\n    const calculateChartDataAsync = async () => {\r\n      setIsCalculatingChartData(true);\r\n      try {\r\n        const data = await calculateChartData(trades, selectedDate, timePeriod);\r\n        setChartData(data);\r\n      } catch (error) {\r\n        console.error('Error calculating chart data:', error);\r\n        setChartData([]);\r\n      } finally {\r\n        setIsCalculatingChartData(false);\r\n      }\r\n    };\r\n\r\n    calculateChartDataAsync();\r\n  }, [trades, selectedDate, timePeriod]);\r\n\r\n  const handleTimePeriodChange = (newValue: TimePeriod) => {\r\n    setTimePeriod(newValue);\r\n    onTimePeriodChange?.(newValue);\r\n  };\r\n\r\n  // Use the utility function for filtering trades\r\n  const getFilteredTrades = utilGetFilteredTrades;\r\n\r\n  // Calculate Risk to Reward statistics\r\n  const riskRewardStats = useMemo(() => {\r\n    const filteredTrades = getFilteredTrades(trades, selectedDate, timePeriod)\r\n      .filter(trade => trade.riskToReward !== undefined)\r\n      .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\r\n\r\n    if (filteredTrades.length === 0) return { average: 0, max: 0, data: [] };\r\n\r\n    const riskRewardValues = filteredTrades.map(trade => trade.riskToReward!);\r\n    const average = riskRewardValues.reduce((sum, value) => sum + value, 0) / riskRewardValues.length;\r\n    const max = Math.max(...riskRewardValues);\r\n\r\n    // Create data points for the line graph\r\n    const data = filteredTrades.map(trade => ({\r\n      date: format(new Date(trade.date), timePeriod === 'month' ? 'MM/dd' : 'MM/dd/yyyy'),\r\n      rr: trade.riskToReward || 0\r\n    }));\r\n\r\n    return { average, max, data };\r\n  }, [trades, selectedDate, timePeriod, getFilteredTrades]);\r\n\r\n  // Chart data is now calculated asynchronously in useEffect above\r\n\r\n  // Calculate win/loss statistics\r\n  const winLossStats = useMemo(() => {\r\n    const filteredTrades = getFilteredTrades(trades, selectedDate, timePeriod);\r\n\r\n    const wins = filteredTrades.filter(trade => trade.type === 'win');\r\n    const losses = filteredTrades.filter(trade => trade.type === 'loss');\r\n    const breakevens = filteredTrades.filter(trade => trade.type === 'breakeven');\r\n\r\n    const totalWins = wins.length;\r\n    const totalLosses = losses.length;\r\n    const totalBreakevens = breakevens.length;\r\n    const totalTrades = totalWins + totalLosses + totalBreakevens;\r\n\r\n    // Calculate win rate excluding breakevens from the denominator\r\n    const winRateDenominator = totalWins + totalLosses;\r\n    const winRate = winRateDenominator > 0 ? (totalWins / winRateDenominator) * 100 : 0;\r\n\r\n    const totalWinAmount = wins.reduce((sum, trade) => sum + trade.amount, 0);\r\n    const totalLossAmount = losses.reduce((sum, trade) => sum + trade.amount, 0);\r\n    const totalBreakevenAmount = breakevens.reduce((sum, trade) => sum + trade.amount, 0);\r\n\r\n    const avgWin = totalWins > 0 ? totalWinAmount / totalWins : 0;\r\n    const avgLoss = totalLosses > 0 ? totalLossAmount / totalLosses : 0;\r\n    const avgBreakeven = totalBreakevens > 0 ? totalBreakevenAmount / totalBreakevens : 0;\r\n\r\n    // Calculate consecutive wins and losses\r\n    let currentWinStreak = 0;\r\n    let maxWinStreak = 0;\r\n    let totalWinStreaks = 0;\r\n    let winStreakCount = 0;\r\n\r\n    let currentLossStreak = 0;\r\n    let maxLossStreak = 0;\r\n    let totalLossStreaks = 0;\r\n    let lossStreakCount = 0;\r\n\r\n    // Sort trades by date\r\n    const sortedTrades = [...filteredTrades].sort((a, b) =>\r\n      new Date(a.date).getTime() - new Date(b.date).getTime()\r\n    );\r\n\r\n    sortedTrades.forEach(trade => {\r\n      if (trade.type === 'win') {\r\n        currentWinStreak++;\r\n        currentLossStreak = 0;\r\n\r\n        if (currentWinStreak > maxWinStreak) {\r\n          maxWinStreak = currentWinStreak;\r\n        }\r\n      } else if (trade.type === 'loss') {\r\n        if (currentWinStreak > 0) {\r\n          totalWinStreaks += currentWinStreak;\r\n          winStreakCount++;\r\n        }\r\n        currentWinStreak = 0;\r\n        currentLossStreak++;\r\n\r\n        if (currentLossStreak > maxLossStreak) {\r\n          maxLossStreak = currentLossStreak;\r\n        }\r\n      } else if (trade.type === 'breakeven') {\r\n        // For breakeven trades, we don't reset the streaks\r\n        // This allows a breakeven trade to maintain an existing streak\r\n      }\r\n    });\r\n\r\n    // Handle the last streak\r\n    if (currentWinStreak > 0) {\r\n      totalWinStreaks += currentWinStreak;\r\n      winStreakCount++;\r\n    } else if (currentLossStreak > 0) {\r\n      totalLossStreaks += currentLossStreak;\r\n      lossStreakCount++;\r\n    }\r\n\r\n    const avgWinStreak = winStreakCount > 0 ? totalWinStreaks / winStreakCount : 0;\r\n    const avgLossStreak = lossStreakCount > 0 ? totalLossStreaks / lossStreakCount : 0;\r\n\r\n    return {\r\n      totalTrades,\r\n      winRate,\r\n      winners: {\r\n        total: totalWins,\r\n        avgAmount: avgWin,\r\n        maxConsecutive: maxWinStreak,\r\n        avgConsecutive: avgWinStreak\r\n      },\r\n      losers: {\r\n        total: totalLosses,\r\n        avgAmount: avgLoss,\r\n        maxConsecutive: maxLossStreak,\r\n        avgConsecutive: avgLossStreak\r\n      },\r\n      breakevens: {\r\n        total: totalBreakevens,\r\n        avgAmount: avgBreakeven\r\n      }\r\n    };\r\n  }, [trades, selectedDate, timePeriod, getFilteredTrades]);\r\n\r\n  // Calculate win/loss distribution data for pie chart\r\n  const winLossData = useMemo(() => {\r\n    const { winners, losers, breakevens } = winLossStats;\r\n\r\n    return [\r\n      { name: 'Wins', value: winners.total },\r\n      { name: 'Losses', value: losers.total },\r\n      { name: 'Breakeven', value: breakevens?.total || 0 }\r\n    ].filter(item => item.value > 0); // Only include categories with values > 0\r\n  }, [winLossStats]);\r\n\r\n  // Calculate comparison win/loss data for selected tags\r\n  const comparisonWinLossData = useMemo(() => {\r\n    if (comparisonTags.length === 0) return null;\r\n\r\n    const filteredTrades = getFilteredTrades(trades, selectedDate, timePeriod)\r\n      .filter(trade => {\r\n        if (!trade.tags) return false;\r\n        return comparisonTags.some(tag => trade.tags!.includes(tag));\r\n      });\r\n\r\n    const wins = filteredTrades.filter(trade => trade.type === 'win');\r\n    const losses = filteredTrades.filter(trade => trade.type === 'loss');\r\n    const breakevens = filteredTrades.filter(trade => trade.type === 'breakeven');\r\n\r\n    return [\r\n      { name: 'Wins', value: wins.length },\r\n      { name: 'Losses', value: losses.length },\r\n      { name: 'Breakeven', value: breakevens.length }\r\n    ].filter(item => item.value > 0); // Only include categories with values > 0\r\n  }, [trades, selectedDate, timePeriod, comparisonTags, getFilteredTrades]);\r\n\r\n  // Calculate daily summary data\r\n  const dailySummaryData = useMemo(() => {\r\n    // Get trades filtered by the selected time period\r\n    const filteredTrades = getFilteredTrades(trades, selectedDate, timePeriod);\r\n\r\n    // Group trades by date\r\n    const tradesByDate = filteredTrades.reduce((acc, trade) => {\r\n      const dateKey = format(new Date(trade.date), 'yyyy-MM-dd');\r\n      if (!acc[dateKey]) {\r\n        acc[dateKey] = [];\r\n      }\r\n      acc[dateKey].push(trade);\r\n      return acc;\r\n    }, {} as { [key: string]: Trade[] });\r\n\r\n    // Calculate daily statistics\r\n    return Object.entries(tradesByDate)\r\n      .map(([date, dayTrades]) => {\r\n        const totalPnL = dayTrades.reduce((sum, trade) => sum + trade.amount, 0);\r\n\r\n        // Get the most common session for the day\r\n        const sessionCounts = dayTrades.reduce((acc, trade) => {\r\n          if (trade.session) {\r\n            acc[trade.session] = (acc[trade.session] || 0) + 1;\r\n          }\r\n          return acc;\r\n        }, {} as { [key: string]: number });\r\n\r\n        // Find the session with the highest count\r\n        let mostCommonSession = '';\r\n        let highestCount = 0;\r\n\r\n        Object.entries(sessionCounts).forEach(([session, count]) => {\r\n          if (count > highestCount) {\r\n            mostCommonSession = session;\r\n            highestCount = count;\r\n          }\r\n        });\r\n\r\n        return {\r\n          date: parseISO(date),\r\n          trades: dayTrades.length,\r\n          session: mostCommonSession,\r\n          pnl: totalPnL\r\n        };\r\n      })\r\n      .sort((a, b) => b.date.getTime() - a.date.getTime()); // Sort by date descending\r\n  }, [trades, selectedDate, timePeriod, getFilteredTrades]);\r\n\r\n  // Add new useMemo for tag statistics\r\n  const tagStats = useMemo(() => {\r\n    const filteredTrades = getFilteredTrades(trades, selectedDate, timePeriod);\r\n\r\n    // Create a map to store stats for each tag\r\n    const tagMap = new Map<string, { wins: number; losses: number; breakevens: number; totalPnL: number }>();\r\n\r\n    filteredTrades.forEach(trade => {\r\n      if (trade.tags) {\r\n        trade.tags.forEach(tag => {\r\n          const stats = tagMap.get(tag) || { wins: 0, losses: 0, breakevens: 0, totalPnL: 0 };\r\n          if (trade.type === 'win') {\r\n            stats.wins++;\r\n          } else if (trade.type === 'loss') {\r\n            stats.losses++;\r\n          } else if (trade.type === 'breakeven') {\r\n            stats.breakevens++;\r\n          }\r\n          stats.totalPnL += trade.amount;\r\n          tagMap.set(tag, stats);\r\n        });\r\n      }\r\n    });\r\n\r\n    // Convert map to array and calculate win rates\r\n    return Array.from(tagMap.entries()).map(([tag, stats]) => {\r\n      // Calculate win rate excluding breakevens from the denominator\r\n      const totalTradesForWinRate = stats.wins + stats.losses;\r\n      const winRate = totalTradesForWinRate > 0 ? Math.round((stats.wins / totalTradesForWinRate) * 100) : 0;\r\n      const totalTrades = stats.wins + stats.losses + stats.breakevens;\r\n\r\n      return {\r\n        tag,\r\n        wins: stats.wins,\r\n        losses: stats.losses,\r\n        breakevens: stats.breakevens,\r\n        totalTrades,\r\n        winRate,\r\n        totalPnL: stats.totalPnL\r\n      };\r\n    }).sort((a, b) => b.totalTrades - a.totalTrades); // Sort by total trades descending\r\n  }, [trades, selectedDate, timePeriod, getFilteredTrades]);\r\n\r\n  // Calculate session performance statistics\r\n  const sessionStats = useMemo(() => {\r\n    const filteredTrades = getFilteredTrades(trades, selectedDate, timePeriod).filter(trade => trade.session !== undefined);\r\n\r\n    const sessions = ['Asia', 'London', 'NY AM', 'NY PM'];\r\n\r\n\r\n    return sessions.map(sessionName => {\r\n      const sessionTrades = filteredTrades.filter(trade => trade.session === sessionName);\r\n      const totalTrades = sessionTrades.length;\r\n      const winners = sessionTrades.filter(trade => trade.type === 'win').length;\r\n      const losers = sessionTrades.filter(trade => trade.type === 'loss').length;\r\n      const breakevens = sessionTrades.filter(trade => trade.type === 'breakeven').length;\r\n\r\n      // Calculate win rate excluding breakevens from the denominator\r\n      const totalTradesForWinRate = winners + losers;\r\n      const winRate = totalTradesForWinRate > 0 ? (winners / totalTradesForWinRate) * 100 : 0;\r\n\r\n      const totalPnL = sessionTrades.reduce((sum, trade) => sum + trade.amount, 0);\r\n      const averagePnL = totalTrades > 0 ? totalPnL / totalTrades : 0;\r\n      const pnlPercentage = accountBalance > 0 ? (totalPnL / accountBalance) * 100 : 0;\r\n\r\n      return {\r\n        session: sessionName,\r\n        totalTrades,\r\n        winners,\r\n        losers,\r\n        breakevens,\r\n        winRate,\r\n        totalPnL,\r\n        averagePnL,\r\n        pnlPercentage\r\n      };\r\n    });\r\n  }, [trades, selectedDate, timePeriod, accountBalance, getFilteredTrades]);\r\n\r\n  // Get all unique tags\r\n  const allTags = useMemo(() => {\r\n    const tags = new Set<string>();\r\n    trades.forEach(trade => {\r\n      if (trade.tags) {\r\n        trade.tags.forEach(tag => tags.add(tag));\r\n      }\r\n    });\r\n    return Array.from(tags).sort();\r\n  }, [trades]);\r\n\r\n  // Filter tagStats based on both tag selections\r\n  const filteredTagStats = useMemo(() => {\r\n    // If no tags are selected for either primary or secondary, return an empty array to show empty chart\r\n    if (primaryTags.length === 0 && secondaryTags.length === 0) return [];\r\n\r\n    return tagStats.filter(stat => {\r\n      // If primary tags are selected, the tag must be in primaryTags\r\n      if (primaryTags.length > 0 && !primaryTags.includes(stat.tag)) {\r\n        return false;\r\n      }\r\n\r\n      // If secondary tags are selected, check if trades with this tag also have the required secondary tags\r\n      if (secondaryTags.length > 0) {\r\n        // Get all trades for this tag that have tags\r\n        const tradesWithTag = trades.filter(trade => trade.tags?.includes(stat.tag) ?? false);\r\n\r\n        // Check if any of these trades also have all the secondary tags\r\n        const hasSecondaryTags = tradesWithTag.some(trade =>\r\n          secondaryTags.every(secondaryTag => trade.tags?.includes(secondaryTag) ?? false)\r\n        );\r\n\r\n        if (!hasSecondaryTags) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }, [tagStats, primaryTags, secondaryTags, trades]);\r\n\r\n  // Calculate target value for monthly target\r\n  const targetValue = useMemo(() => {\r\n    if (monthlyTarget === undefined || accountBalance <= 0) return null;\r\n    return (monthlyTarget / 100) * accountBalance;\r\n  }, [monthlyTarget, accountBalance]);\r\n\r\n  // Calculate drawdown violation value\r\n  const drawdownViolationValue = useMemo(() => {\r\n    return -(maxDailyDrawdown / 100) * accountBalance;\r\n  }, [maxDailyDrawdown, accountBalance]);\r\n\r\n  // These handlers are now used directly in the chart overlays\r\n\r\n  const handleTradeExpand = (tradeId: string) => {\r\n    setMultipleTradesDialog(prev => ({\r\n      ...prev,\r\n      expandedTradeId: prev.expandedTradeId === tradeId ? null : tradeId\r\n    }));\r\n  };\r\n\r\n  const handleZoomImage = (imageUrl: string, allImages?: string[], initialIndex?: number) => {\r\n    setZoomedImages({ selectetdImageIndex: initialIndex || 0, allImages: allImages || [imageUrl] });\r\n  };\r\n\r\n  const handleTagAnalysisTabChange = (_: React.SyntheticEvent, newValue: number) => {\r\n    setTagAnalysisTab(newValue);\r\n  };\r\n\r\n  // Handle pie chart click to show trades\r\n  const handlePieClick = (category: string) => {\r\n    const filteredTrades = getFilteredTrades(trades, selectedDate, timePeriod);\r\n    let categoryTrades: Trade[] = [];\r\n    let dialogTitle = '';\r\n\r\n    // Check if we're clicking on a win/loss category or a tag\r\n    if (category === 'Wins' || category === 'Losses') {\r\n      // Filter trades based on the clicked category (Wins or Losses)\r\n      categoryTrades = filteredTrades.filter(trade =>\r\n        (category === 'Wins' && trade.type === 'win') ||\r\n        (category === 'Losses' && trade.type === 'loss')\r\n      );\r\n\r\n      // Format the date range for the dialog title\r\n      let dateText;\r\n      if (timePeriod === 'month') {\r\n        dateText = format(selectedDate, 'MMMM yyyy');\r\n      } else if (timePeriod === 'year') {\r\n        dateText = format(selectedDate, 'yyyy');\r\n      } else {\r\n        dateText = 'All Time';\r\n      }\r\n\r\n      dialogTitle = `${category} for ${dateText}`;\r\n    } else {\r\n      // We're clicking on a tag in the tag distribution chart\r\n      // Filter trades that have this tag\r\n      categoryTrades = filteredTrades.filter(trade =>\r\n        trade.tags?.includes(category)\r\n      );\r\n\r\n      dialogTitle = `Trades with tag: ${category}`;\r\n    }\r\n\r\n    if (categoryTrades.length > 0) {\r\n      // Open the dialog with the filtered trades\r\n      setMultipleTradesDialog({\r\n        open: true,\r\n        trades: categoryTrades,\r\n        date: dialogTitle,\r\n        expandedTradeId: categoryTrades.length === 1 ? categoryTrades[0].id : null\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ p: 2 }}>\r\n      {/* Image Zoom Dialog */}\r\n      {zoomedImages && (\r\n        <ImageZoomDialog\r\n          open={!!zoomedImages}\r\n          onClose={() => setZoomedImages(null)}\r\n          imageProp={zoomedImages}\r\n        />\r\n      )}\r\n\r\n      {/* Trades Dialog */}\r\n      <TradesListDialog\r\n        open={multipleTradesDialog.open}\r\n        trades={multipleTradesDialog.trades}\r\n        date={multipleTradesDialog.date}\r\n        expandedTradeId={multipleTradesDialog.expandedTradeId}\r\n        onUpdateTradeProperty={onUpdateTradeProperty}\r\n        onClose={() => setMultipleTradesDialog(prev => ({ ...prev, open: false }))}\r\n        onTradeExpand={handleTradeExpand}\r\n        onZoomImage={handleZoomImage}\r\n        accountBalance={accountBalance}\r\n        allTrades={trades}\r\n        onEditClick={onEditTrade}\r\n        onDeleteClick={onDeleteTrade}\r\n        onOpenGalleryMode={onOpenGalleryMode}\r\n        calendarId={calendarId}\r\n      />\r\n\r\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n        <Typography variant=\"h6\">\r\n          Performance Charts for {timePeriod === 'month'\r\n            ? format(selectedDate, 'MMMM yyyy')\r\n            : timePeriod === 'year'\r\n              ? format(selectedDate, 'yyyy')\r\n              : 'All Time'\r\n          }\r\n        </Typography>\r\n        <Tabs\r\n          value={timePeriod}\r\n          onChange={(_, newValue: TimePeriod) => handleTimePeriodChange(newValue)}\r\n          sx={{\r\n            minHeight: 40,\r\n            backgroundColor: theme.palette.mode === 'light' ? '#f0f0f0' : alpha(theme.palette.background.paper, 0.4),\r\n            borderRadius: '20px',\r\n            padding: '4px',\r\n            '& .MuiTabs-flexContainer': {\r\n              gap: '4px'\r\n            },\r\n            '& .MuiTabs-indicator': {\r\n              display: 'none'\r\n            }\r\n          }}\r\n        >\r\n          <Tab\r\n            label=\"Month\"\r\n            value=\"month\"\r\n            sx={{\r\n              minHeight: 32,\r\n              my: 0.2,\r\n              textTransform: 'none',\r\n              fontSize: '0.875rem',\r\n              fontWeight: 500,\r\n              color: 'text.secondary',\r\n              borderRadius: '16px',\r\n              padding: '6px 18px',\r\n              '&.Mui-selected': {\r\n                color: theme.palette.mode === 'dark' ? 'white' : 'background.paper',\r\n                backgroundColor: 'primary.main',\r\n                boxShadow: theme.shadows[1]\r\n              },\r\n              '&:hover:not(.Mui-selected)': {\r\n                backgroundColor: alpha(theme.palette.primary.main, 0.05),\r\n                color: 'primary.main'\r\n              }\r\n            }}\r\n          />\r\n          <Tab\r\n            label=\"Year\"\r\n            value=\"year\"\r\n            sx={{\r\n              minHeight: 32,\r\n              my: 0.2,\r\n              textTransform: 'none',\r\n              fontSize: '0.875rem',\r\n              fontWeight: 500,\r\n              color: 'text.secondary',\r\n              borderRadius: '16px',\r\n              padding: '6px 18px',\r\n              '&.Mui-selected': {\r\n                color: theme.palette.mode === 'dark' ? 'white' : 'background.paper',\r\n                backgroundColor: 'primary.main',\r\n                boxShadow: theme.shadows[1]\r\n              },\r\n              '&:hover:not(.Mui-selected)': {\r\n                backgroundColor: alpha(theme.palette.primary.main, 0.05),\r\n                color: 'primary.main'\r\n              }\r\n            }}\r\n          />\r\n          <Tab\r\n            label=\"All Time\"\r\n            value=\"all\"\r\n            sx={{\r\n              minHeight: 32,\r\n              my: 0.2,\r\n              textTransform: 'none',\r\n              fontSize: '0.875rem',\r\n              fontWeight: 500,\r\n              color: 'text.secondary',\r\n              borderRadius: '16px',\r\n              padding: '6px 18px',\r\n              '&.Mui-selected': {\r\n                color: theme.palette.mode === 'dark' ? 'white' : 'background.paper',\r\n                backgroundColor: 'primary.main',\r\n                boxShadow: theme.shadows[1]\r\n              },\r\n              '&:hover:not(.Mui-selected)': {\r\n                backgroundColor: alpha(theme.palette.primary.main, 0.05),\r\n                color: 'primary.main'\r\n              }\r\n            }}\r\n          />\r\n        </Tabs>\r\n      </Box>\r\n\r\n      {/* Main content */}\r\n      {chartData.some(data => data.pnl !== 0) || winLossData.some(data => data.value > 0) ? (\r\n        <>\r\n          {/* Risk to Reward Statistics Card */}\r\n          <RiskRewardChart riskRewardStats={riskRewardStats} />\r\n\r\n          {/* Winners and Losers Statistics */}\r\n          <WinLossStats\r\n            winLossStats={winLossStats}\r\n            trades={getFilteredTrades(trades, selectedDate, timePeriod)}\r\n            onTradeClick={handleTradeExpand}\r\n          />\r\n\r\n          {/* P&L Charts with Tabs */}\r\n          <PnLChartsWrapper\r\n            chartData={chartData}\r\n            targetValue={targetValue}\r\n            monthlyTarget={monthlyTarget}\r\n            drawdownViolationValue={drawdownViolationValue}\r\n            setMultipleTradesDialog={setMultipleTradesDialog}\r\n            timePeriod={timePeriod}\r\n          />\r\n\r\n          {/* Win/Loss Distribution and Daily Summary side by side */}\r\n          <Box sx={{ display: 'flex', flexDirection: { xs: 'column', md: 'row' }, gap: 3, mb: 3, height: '500px' }}>\r\n            <Box sx={{ flex: 1, width: { xs: '100%', md: '50%' } }}>\r\n              {/* Win/Loss Distribution */}\r\n              <WinLossDistribution\r\n                winLossData={winLossData}\r\n                comparisonWinLossData={comparisonWinLossData}\r\n                allTags={allTags}\r\n                comparisonTags={comparisonTags}\r\n                setComparisonTags={setComparisonTags}\r\n                onPieClick={handlePieClick}\r\n                tagStats={tagStats}\r\n              />\r\n            </Box>\r\n            <Box sx={{ flex: 1, width: { xs: '100%', md: '50%' } }}>\r\n              {/* Daily Summary Table */}\r\n              <DailySummaryTable\r\n                dailySummaryData={dailySummaryData}\r\n                trades={trades}\r\n                setMultipleTradesDialog={setMultipleTradesDialog}\r\n              />\r\n            </Box>\r\n          </Box>\r\n\r\n          {/* Tag Performance Analysis with Tabs */}\r\n          <Paper sx={{ p: 3, mb: 3, borderRadius: 2 }}>\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>\r\n\r\n              <Tabs\r\n                value={tagAnalysisTab}\r\n                onChange={handleTagAnalysisTabChange}\r\n                sx={{\r\n                  minHeight: 40,\r\n                  backgroundColor: theme.palette.mode === 'light' ? '#f0f0f0' : alpha(theme.palette.background.paper, 0.4),\r\n                  borderRadius: '20px',\r\n                  padding: '4px',\r\n                  '& .MuiTabs-flexContainer': {\r\n                    gap: '4px'\r\n                  },\r\n                  '& .MuiTabs-indicator': {\r\n                    display: 'none'\r\n                  }\r\n                }}\r\n              >\r\n                <Tab\r\n                  label=\"Tag Performance\"\r\n                  sx={{\r\n                    minHeight: 32,\r\n                    my: 0.2,\r\n                    textTransform: 'none',\r\n                    fontSize: '0.875rem',\r\n                    fontWeight: 500,\r\n                    color: 'text.secondary',\r\n                    borderRadius: '16px',\r\n                    padding: '6px 18px',\r\n                    '&.Mui-selected': {\r\n                      color: theme.palette.mode === 'dark' ? 'white' : 'background.paper',\r\n                      backgroundColor: 'primary.main',\r\n                      boxShadow: theme.shadows[1]\r\n                    },\r\n                    '&:hover:not(.Mui-selected)': {\r\n                      backgroundColor: alpha(theme.palette.primary.main, 0.05),\r\n                      color: 'primary.main'\r\n                    }\r\n                  }}\r\n                />\r\n                <Tab\r\n                  label=\"Performance by Day of Week\"\r\n                  sx={{\r\n                    minHeight: 32,\r\n                    my: 0.2,\r\n                    textTransform: 'none',\r\n                    fontSize: '0.875rem',\r\n                    fontWeight: 500,\r\n                    color: 'text.secondary',\r\n                    borderRadius: '16px',\r\n                    padding: '6px 18px',\r\n                    '&.Mui-selected': {\r\n                      color: theme.palette.mode === 'dark' ? 'white' : 'background.paper',\r\n                      backgroundColor: 'primary.main',\r\n                      boxShadow: theme.shadows[1]\r\n                    },\r\n                    '&:hover:not(.Mui-selected)': {\r\n                      backgroundColor: alpha(theme.palette.primary.main, 0.05),\r\n                      color: 'primary.main'\r\n                    }\r\n                  }}\r\n                />\r\n              </Tabs>\r\n            </Box>\r\n\r\n            {/* Tab Panel 1: Tag Performance Analysis */}\r\n            <Box sx={{ display: tagAnalysisTab === 0 ? 'block' : 'none' }}>\r\n              <TagPerformanceAnalysis\r\n                trades={trades}\r\n                selectedDate={selectedDate}\r\n                timePeriod={timePeriod}\r\n                allTags={allTags}\r\n                primaryTags={primaryTags}\r\n                secondaryTags={secondaryTags}\r\n                setPrimaryTags={(tags) => {\r\n                  setPrimaryTags(tags);\r\n                  onPrimaryTagsChange(tags);\r\n                }}\r\n                setSecondaryTags={(tags) => {\r\n                  setSecondaryTags(tags);\r\n                  onSecondaryTagsChange(tags);\r\n                }}\r\n                filteredTagStats={filteredTagStats}\r\n                setMultipleTradesDialog={setMultipleTradesDialog}\r\n              />\r\n            </Box>\r\n\r\n            {/* Tab Panel 2: Tag Performance by Day of Week Analysis */}\r\n            <Box sx={{ display: tagAnalysisTab === 1 ? 'block' : 'none' }}>\r\n              <TagDayOfWeekAnalysis\r\n                trades={trades}\r\n                selectedDate={selectedDate}\r\n                timePeriod={timePeriod}\r\n                allTags={allTags}\r\n                primaryTags={primaryTags}\r\n                secondaryTags={secondaryTags}\r\n                setPrimaryTags={(tags) => {\r\n                  setPrimaryTags(tags);\r\n                  onPrimaryTagsChange(tags);\r\n                }}\r\n                setSecondaryTags={(tags) => {\r\n                  setSecondaryTags(tags);\r\n                  onSecondaryTagsChange(tags);\r\n                }}\r\n                setMultipleTradesDialog={setMultipleTradesDialog}\r\n              />\r\n            </Box>\r\n          </Paper>\r\n\r\n          {/* Session Performance Analysis */}\r\n          <SessionPerformanceAnalysis\r\n            sessionStats={sessionStats}\r\n            trades={trades}\r\n            selectedDate={selectedDate}\r\n            timePeriod={timePeriod}\r\n            setMultipleTradesDialog={setMultipleTradesDialog}\r\n          />\r\n\r\n          {/* Trading Score Section */}\r\n          <ScoreSection\r\n            trades={trades}\r\n            selectedDate={selectedDate}\r\n            calendarId={calendarId}\r\n            scoreSettings={scoreSettings}\r\n            onUpdateCalendarProperty={onUpdateCalendarProperty}\r\n            accountBalance={accountBalance}\r\n            dynamicRiskSettings={dynamicRiskSettings}\r\n          />\r\n        </>\r\n      ) : (\r\n        <Box\r\n          sx={{\r\n            height: 300,\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            bgcolor: theme.palette.mode === 'dark' ? 'rgba(0, 0, 0, 0.2)' : 'rgba(0, 0, 0, 0.02)',\r\n            borderRadius: 2,\r\n            border: `1px solid ${theme.palette.divider}`\r\n          }}\r\n        >\r\n          <Typography color=\"text.secondary\">\r\n            No trading data available for {timePeriod === 'month'\r\n              ? format(selectedDate, 'MMMM yyyy')\r\n              : timePeriod === 'year'\r\n                ? format(selectedDate, 'yyyy')\r\n                : 'All Time'\r\n            }\r\n          </Typography>\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PerformanceCharts;\r\n","import React, { useState, useMemo, useEffect, useRef, useCallback } from 'react';\r\nimport {\r\n  Box,\r\n  Snackbar,\r\n  Alert\r\n} from '@mui/material';\r\nimport { endOfDay, format } from 'date-fns';\r\nimport { Trade } from '../../types/trade';\r\nimport { BaseDialog } from '../common';\r\nimport * as calendarService from '../../services/calendarService';\r\nimport { DayHeader, TradeForm, NewTradeForm } from './';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { PendingImage } from './TradeForm';\r\nimport { GridImage, GridPendingImage } from './ImageGrid';\r\nimport { createNewTradeData } from '../TradeCalendar';\r\nimport {\r\n  calculateEffectiveRiskPercentage,\r\n  calculateCumulativePnLToDate,\r\n  calculateRiskAmount,\r\n  DynamicRiskSettings\r\n} from '../../utils/dynamicRiskUtils';\r\n\r\ninterface FormDialogProps {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  newMainTrade?: NewTradeForm | null\r\n  date: Date;\r\n  showForm: FormProps;\r\n  trades: Trade[];\r\n  accountBalance: number;\r\n\r\n  onAddTrade?: (trade: Trade & { id?: string }) => Promise<void>;\r\n  onTagUpdated?: (oldTag: string, newTag: string) => void;\r\n  onUpdateTradeProperty?: (tradeId: string, updateCallback: (trade: Trade) => Trade, createIfNotExists?: (tradeId: string) => Trade) => Promise<Trade | undefined>;\r\n  onAccountBalanceChange?: (balance: number) => void;\r\n  setZoomedImage: (url: string, allImages?: string[], initialIndex?: number) => void;\r\n  setNewMainTrade: (prev: (trade: NewTradeForm) => NewTradeForm | null) => void\r\n  onCancel: () => void;\r\n  allTrades?: Trade[];\r\n  dynamicRiskSettings: DynamicRiskSettings;\r\n  calendarId: string;\r\n  tags: string[];\r\n  requiredTagGroups?: string[];\r\n  // Optional props for trade link navigation in notes\r\n  onOpenGalleryMode?: (trades: any[], initialTradeId?: string, title?: string) => void;\r\n}\r\n\r\ninterface FormProps {\r\n  open: boolean;\r\n  editTrade?: Trade | null;\r\n  createTempTrade: boolean;\r\n}\r\n\r\n\r\n\r\n\r\n// Helper function to process tags\r\nconst processTagsForSubmission = (tags: string[]): string[] => {\r\n  // Get any pending tag from the tags input field specifically (not the trade name input)\r\n  const tagInput = document.getElementById('trade-tags-input') as HTMLInputElement;\r\n  let pendingTag = '';\r\n  if (tagInput && tagInput.value.trim()) {\r\n    pendingTag = tagInput.value.trim();\r\n  }\r\n\r\n  if (pendingTag) {\r\n    return [...tags, pendingTag];\r\n  }\r\n  return tags;\r\n};\r\n\r\n// Calculate cumulative PnL up to a given date (using centralized utility)\r\nexport const calculateCumulativePnL = (date: Date, allTrades: Trade[]) => {\r\n  return calculateCumulativePnLToDate(date, allTrades);\r\n};\r\n\r\nexport const startOfNextDay = (date: Date | string): Date => {\r\n  const nextDay = new Date(date);\r\n  nextDay.setDate(nextDay.getDate() + 1);\r\n  return nextDay;\r\n}\r\n\r\nexport const createEditTradeData = (trade: Trade): NewTradeForm => {\r\n  return {\r\n    id: trade.id,\r\n    name: trade.name ? trade.name.replace(/^📈 /, '') : '',\r\n    amount: Math.abs(trade.amount).toString(),\r\n    type: trade.type,\r\n    entry: trade.entry || '',\r\n    date: trade.date,\r\n    exit: trade.exit || '',\r\n    tags: trade.tags || [],\r\n    riskToReward: trade.riskToReward?.toString() || '',\r\n    partialsTaken: trade.partialsTaken || false,\r\n    session: trade.session || '',\r\n    notes: trade.notes || '',\r\n    pendingImages: [],\r\n    isTemporary: trade.isTemporary,\r\n    uploadedImages: trade.images ? trade.images.map((img, index) => ({\r\n      ...img,\r\n      // Ensure layout properties are explicitly preserved\r\n      row: img.row !== undefined ? img.row : index, // Each image gets its own row by default\r\n      column: img.column !== undefined ? img.column : 0, // Always in first column by default\r\n      columnWidth: img.columnWidth !== undefined ? img.columnWidth : 100 // Default to 100% for vertical layout\r\n    })) : [],\r\n\r\n  }\r\n}\r\n\r\nconst TradeFormDialog: React.FC<FormDialogProps> = ({\r\n  open,\r\n  onClose,\r\n  newMainTrade,\r\n  setNewMainTrade,\r\n  date,\r\n  trades,\r\n  accountBalance,\r\n  showForm,\r\n  onCancel,\r\n  onAddTrade,\r\n  onTagUpdated,\r\n  onUpdateTradeProperty,\r\n  allTrades = [],\r\n  dynamicRiskSettings,\r\n  calendarId,\r\n  tags = [],\r\n  requiredTagGroups = [],\r\n  onOpenGalleryMode\r\n}) => {\r\n\r\n  // State\r\n\r\n  const [editingTrade, setEditingTrade] = useState<Trade | null>(null);\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [isCreatingEmptyTrade, setIsCreatingEmptyTrade] = useState(false);\r\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n  const [snackbarMessage, setSnackbarMessage] = useState('');\r\n  const [newTrade, setNewTrade] = useState<NewTradeForm | null>(null);\r\n\r\n\r\n\r\n  // Track previous showForm state to avoid unnecessary handleAddClick calls\r\n  const prevShowFormRef = useRef<FormProps | null>(null);\r\n\r\n  // Function to create empty trade - defined before useEffect that uses it\r\n  const createEmptyTrade = useCallback(async () => {\r\n    setEditingTrade(null);\r\n    // Set creating empty trade state to true to disable cancel/close buttons\r\n    setIsCreatingEmptyTrade(true);\r\n    // Create a temporary trade object to display in the UI\r\n\r\n    // Create an empty trade in Firebase\r\n    try {\r\n      if (calendarId && onAddTrade) {\r\n\r\n        // Update the form with the temporary trade ID and isTemporary flag\r\n        const data = createNewTradeData();\r\n        setNewTrade(() => ({\r\n          ...data,\r\n          isTemporary: true,\r\n          name: 'New Trade'\r\n        }));\r\n\r\n        await onAddTrade({ ...createFinalTradeData(data, date), name: 'New Trade', isTemporary: true });\r\n      } else {\r\n        // Handle case where calendarId or onAddTrade is missing\r\n        throw new Error('Unable to create trade: Missing calendar ID or add trade function');\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Error creating empty trade:', error);\r\n      showErrorSnackbar(error instanceof Error ?\r\n        `Failed to create temporary trade: ${error.message}` :\r\n        'Failed to create temporary trade. Please try again.');\r\n\r\n      // Still show the form, but without the temporary trade\r\n      setNewTrade(prev => ({\r\n        ...prev!,\r\n        isTemporary: false\r\n      }));\r\n    } finally {\r\n      // Re-enable cancel/close buttons regardless of success or failure\r\n      setIsCreatingEmptyTrade(false);\r\n    }\r\n  }, [calendarId, onAddTrade, date]);\r\n\r\n  useEffect(() => {\r\n    // Only call handleAddClick when showForm changes from not meeting conditions to meeting them\r\n    const shouldCreateTempTrade = showForm.open && showForm.createTempTrade;\r\n    const prevShouldCreateTempTrade = prevShowFormRef.current?.open && prevShowFormRef.current?.createTempTrade;\r\n\r\n    if (shouldCreateTempTrade && (!prevShowFormRef.current || !prevShouldCreateTempTrade)) {\r\n      createEmptyTrade();\r\n    }\r\n    else if (showForm.editTrade) {\r\n      setEditingTrade(showForm.editTrade);\r\n    }\r\n\r\n    // Update previous showForm ref\r\n    prevShowFormRef.current = showForm;\r\n  }, [showForm, createEmptyTrade]);\r\n\r\n  useEffect(() => {\r\n    if (newMainTrade) {\r\n      setNewTrade(newMainTrade!);\r\n    }\r\n  }, [newMainTrade]);\r\n\r\n\r\n  // Derived state \r\n  const allTags = useMemo(() => {\r\n    return tags.filter((tag) => !tag.startsWith('Partials:'))\r\n  }, [tags]);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // Function to show error messages in a Snackbar\r\n  const showErrorSnackbar = (message: string) => {\r\n    setSnackbarMessage(message);\r\n    setSnackbarOpen(true);\r\n  };\r\n\r\n  // Function to handle Snackbar close\r\n  const handleSnackbarClose = () => {\r\n    setSnackbarOpen(false);\r\n  };\r\n\r\n  const resetForm = () => {\r\n    // Release object URLs to avoid memory leaks\r\n    if (newTrade) {\r\n      newTrade.pendingImages.forEach(image => {\r\n        URL.revokeObjectURL(image.preview);\r\n      });\r\n    }\r\n\r\n    setEditingTrade(null);\r\n    setNewMainTrade(() => null);\r\n\r\n\r\n  };\r\n\r\n\r\n\r\n  // Function to update a specific property of a trade\r\n  const handleUpdateTradeProperty = async (tradeId: string, updateCallback: (trade: Trade) => Trade, createIfNotExists?: (tradeId: string) => Trade) => {\r\n    if (!onUpdateTradeProperty) return;\r\n    try {\r\n      return onUpdateTradeProperty(tradeId, updateCallback, createIfNotExists);\r\n    } catch (error) {\r\n      console.error('Error updating trade property:', error);\r\n      showErrorSnackbar(error instanceof Error ? error.message : 'Failed to update trade property. Please try again.');\r\n    }\r\n  };\r\n\r\n  // Form handlers\r\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setNewTrade(prev => ({ ...prev!, name: e.target.value }));\r\n  };\r\n\r\n  const handleAmountChange = (amount: string) => {\r\n    setNewTrade(prev => ({ ...prev!, amount: amount }));\r\n  };\r\n\r\n  const handleTypeChange = (e: any) => {\r\n    setNewTrade(prev => ({ ...prev!, type: e.target.value as 'win' | 'loss' | 'breakeven' }));\r\n  };\r\n\r\n  const handleEntryChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setNewTrade(prev => ({ ...prev!, entry: e.target.value }));\r\n  };\r\n\r\n  const handleExitChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setNewTrade(prev => ({ ...prev!, exit: e.target.value }));\r\n  };\r\n\r\n  const handleDateChange = (newDate: Date | null) => {\r\n    if (newDate) {\r\n      setNewTrade(prev => ({ ...prev!, date: newDate }));\r\n    }\r\n  };\r\n\r\n  const handleRiskToRewardChange = (riskToReward: string) => {\r\n    setNewTrade(prev => ({ ...prev!, riskToReward: riskToReward }));\r\n  };\r\n\r\n\r\n  const calculateFinalAmount = (trade: NewTradeForm): number => {\r\n    // If using risk-based calculation and not taking partials, recalculate the amount\r\n    if (trade.riskToReward && !trade.partialsTaken) {\r\n      const rr = parseFloat(trade.riskToReward);\r\n      if (!isNaN(rr)) {\r\n        const calculatedAmount = calculateAmountFromRiskToReward(rr, calculateCumulativePnL(trade.date || endOfDay(date), allTrades));\r\n        // Apply sign based on trade type\r\n        return trade.type === 'loss' ? -Math.abs(calculatedAmount) : Math.abs(calculatedAmount);\r\n      }\r\n    }\r\n\r\n    // Otherwise use the amount from the form\r\n    const amount = parseFloat(trade.amount || \"0\");\r\n    return trade.type === 'loss' ? -Math.abs(amount) : Math.abs(amount);\r\n  };\r\n\r\n  const createFinalTradeData = (newTrade: NewTradeForm, date: Date) => {\r\n    let finalAmount = calculateFinalAmount(newTrade);\r\n    console.log(`trade final amount ${finalAmount}`)\r\n\r\n    // Process tags to ensure proper formatting\r\n    let finalTags = processTagsForSubmission([...newTrade.tags]);\r\n\r\n    // Add Partials tag if partialsTaken is true\r\n    if (newTrade.partialsTaken) {\r\n      // Remove any existing Partials tags\r\n      finalTags = finalTags.filter((tag: string) => !tag.startsWith('Partials:'));\r\n      finalTags.push('Partials:Yes');\r\n    }\r\n\r\n    const currentDate = new Date();\r\n\r\n    // Use the trade's date if it exists (when editing), otherwise use the provided date\r\n    const tradeDate = newTrade.date || date;\r\n\r\n    return {\r\n      id: newTrade.id || uuidv4(),\r\n      isTemporary: newTrade.isTemporary,\r\n      date: new Date(tradeDate.getFullYear(), tradeDate.getMonth(), tradeDate.getDate(),\r\n        currentDate.getHours(), currentDate.getMinutes(), currentDate.getSeconds()),\r\n      type: newTrade.type,\r\n      amount: finalAmount,\r\n      isDeleting: false,\r\n      ...(newTrade.name && { name: newTrade.name }),\r\n      ...(newTrade.entry && { entry: newTrade.entry }),\r\n      ...(newTrade.exit && { exit: newTrade.exit }),\r\n      ...(finalTags.length > 0 && { tags: finalTags }),\r\n      ...(newTrade.riskToReward && { riskToReward: parseFloat(newTrade.riskToReward) }),\r\n      partialsTaken: newTrade.partialsTaken,\r\n      ...(newTrade.session && { session: newTrade.session }),\r\n      ...(newTrade.notes && { notes: newTrade.notes }),\r\n      images: newTrade.uploadedImages || [],\r\n    }\r\n  }\r\n\r\n  // Calculate amount based on risk per trade (as percentage of account balance) and risk-to-reward ratio\r\n  const calculateAmountFromRiskToReward = (riskToReward: number, cumulativePnL: number): number => {\r\n    if (!newTrade || !riskToReward || !accountBalance || newTrade.type === 'breakeven') return 0;\r\n\r\n\r\n    const tradeDate = newTrade.date || date;\r\n    const effectiveRiskPercentage = calculateEffectiveRiskPercentage(tradeDate, allTrades, dynamicRiskSettings);\r\n    const riskAmount = calculateRiskAmount(effectiveRiskPercentage, accountBalance, cumulativePnL);\r\n    // For win trades: risk amount * R:R\r\n    // For loss trades: risk amount\r\n    return newTrade.type === 'win'\r\n      ? Math.round(riskAmount * riskToReward)\r\n      : Math.round(riskAmount);\r\n  };\r\n\r\n\r\n\r\n\r\n  const handlePartialsTakenChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const partialsTaken = e.target.checked;\r\n    setNewTrade(prev => ({ ...prev!, partialsTaken }));\r\n\r\n\r\n  };\r\n\r\n  const handleSessionChange = (e: any) => {\r\n    setNewTrade(prev => ({ ...prev!, session: e.target.value }));\r\n  };\r\n\r\n  const handleNotesChange = (value: string) => {\r\n    setNewTrade(prev => ({ ...prev!, notes: value }));\r\n  };\r\n\r\n  const handleTagsChange = (_event: React.SyntheticEvent, newValue: string[]) => {\r\n    setNewTrade(prev => ({ ...prev!, tags: newValue }));\r\n  };\r\n\r\n\r\n\r\n\r\n  const handleImageUpload = async (files: FileList) => {\r\n    const getDimensions = (url: string): Promise<{ width: number; height: number }> => {\r\n      return new Promise((resolve) => {\r\n        const img = new Image();\r\n        img.onload = () => {\r\n          resolve({\r\n            width: img.width,\r\n            height: img.height,\r\n          });\r\n        };\r\n        img.src = url;\r\n      });\r\n    };\r\n\r\n    const newPendingImages = await Promise.all(\r\n      Array.from(files).map(async (file) => {\r\n        const preview = URL.createObjectURL(file);\r\n        const dimensions = await getDimensions(preview);\r\n\r\n        return {\r\n          id: calendarService.generateImageId(file),\r\n          file,\r\n          preview,\r\n          caption: '',\r\n          width: dimensions.width,\r\n          height: dimensions.height,\r\n          uploadProgress: 0\r\n        };\r\n      })\r\n    );\r\n\r\n    // Add the new images to the state with grid layout information\r\n    setNewTrade((prev) => {\r\n      const existingPendingImages = prev!.pendingImages;\r\n      const existingUploadedImages = prev!.uploadedImages;\r\n\r\n      // Find the highest row value to place new images below existing ones\r\n      let maxRow = -1;\r\n\r\n      [...existingPendingImages, ...existingUploadedImages].forEach(img => {\r\n        if (img.row !== undefined && img.row > maxRow) maxRow = img.row;\r\n      });\r\n\r\n      // Assign row and column to new images - each in its own row\r\n      const newImagesWithLayout = newPendingImages.map((img, index) => {\r\n        // Place each new image in its own row below all existing images\r\n        const newRow = maxRow + 1 + index;\r\n\r\n        return {\r\n          ...img,\r\n          row: newRow,\r\n          column: 0, // Always place in first column\r\n          columnWidth: 100 // Full width for the row\r\n        };\r\n      });\r\n\r\n      return {\r\n        ...prev!,\r\n        pendingImages: [...existingPendingImages, ...newImagesWithLayout],\r\n      };\r\n    });\r\n\r\n    // Start uploading the images if we have a temporary trade ID\r\n    try {\r\n\r\n      // First, ensure the trade exists in the database and is in the cached trades\r\n      const trade = await handleUpdateTradeProperty(newTrade!.id!!, (trade) => {\r\n        // Calculate row and column for new images\r\n        const existingImages = trade.images || [];\r\n\r\n        // Find the highest row value to place new images below existing ones\r\n        let maxRow = -1;\r\n\r\n        existingImages.forEach(img => {\r\n          if (img.row !== undefined && img.row > maxRow) maxRow = img.row;\r\n        });\r\n\r\n        // Assign row and column to new images - each in its own row\r\n        const newImages = newPendingImages.map((img, index) => {\r\n          // Place each new image in its own row below all existing images\r\n          const newRow = maxRow + 1 + index;\r\n\r\n          return {\r\n            url: img.preview,\r\n            pending: true,\r\n            calendarId: calendarId,\r\n            id: img.id,\r\n            width: img.width,\r\n            height: img.height,\r\n            caption: img.caption,\r\n            row: newRow,\r\n            column: 0, // Always place in first column\r\n            columnWidth: 100 // Full width for the row\r\n          };\r\n        });\r\n\r\n        return {\r\n          ...trade,\r\n          images: [...existingImages, ...newImages]\r\n        };\r\n      },\r\n        (tradeid: string) => {\r\n          // setIsCreatingEmptyTrade(true);\r\n          // Create a temporary trade object if it doesnt exist\r\n          return {\r\n            ...createFinalTradeData(newTrade!, date), id: tradeid, name: newTrade!.name || 'New Trade', isTemporary: true\r\n          };\r\n        });\r\n\r\n      if (trade && trade.isTemporary) {\r\n        setNewTrade(prev => {\r\n          return {\r\n            ...prev!,\r\n            isTemporary: true\r\n          };\r\n        })\r\n      }\r\n      // if (isCreatingEmptyTrade){\r\n      //    setIsCreatingEmptyTrade(false);\r\n      // }\r\n\r\n\r\n\r\n      for (const image of newPendingImages) {\r\n        await startImageUpload(image, newTrade!.id!!);\r\n      }\r\n    }\r\n    catch (error) {\r\n      console.error('Error creating empty trade:', error);\r\n    }\r\n  };\r\n  // Function to start uploading an image\r\n  const startImageUpload = async (image: PendingImage, tradeId: string): Promise<void> => {\r\n    try {\r\n      // Update progress to show upload has started\r\n      setNewTrade(prev => ({\r\n        ...prev!,\r\n        pendingImages: prev!.pendingImages.map((img) =>\r\n          img.id === image.id ? { ...img, uploadProgress: 1 } : img\r\n        )\r\n      }));\r\n\r\n      // Upload the image with progress tracking\r\n      const uploadedImage = await calendarService.uploadImage(\r\n        calendarId,\r\n        image.id!!,\r\n        image.file,\r\n        image.width,\r\n        image.height,\r\n        image.caption,\r\n        (progress) => {\r\n          // Update progress in the UI\r\n          setNewTrade(prev => ({\r\n            ...prev!,\r\n            pendingImages: prev!.pendingImages.map((img) =>\r\n              img.id === image.id ? { ...img, uploadProgress: progress } : img\r\n            )\r\n          }));\r\n        }\r\n      );\r\n\r\n      // Once upload is complete, move from pendingImages to uploadedImages\r\n      // Find the original pending image to get its layout information\r\n      const originalPendingImage = newTrade!.pendingImages.find(img => img.id === image.id);\r\n\r\n      // Preserve layout information\r\n      const updatedImage = {\r\n        ...uploadedImage,\r\n        caption: image.caption,\r\n        row: originalPendingImage?.row || newTrade!.pendingImages.indexOf(originalPendingImage!!),\r\n        column: originalPendingImage?.column || 0,\r\n        columnWidth: originalPendingImage?.columnWidth || 100\r\n      };\r\n\r\n      // Update local state\r\n      setNewTrade(prev => {\r\n        const newPendingImages = [...prev!.pendingImages];\r\n        // Remove the uploaded image from pendingImages\r\n        let imageIndex = newPendingImages.findIndex(img => img.id === image.id);\r\n        if (imageIndex !== -1) {\r\n          newPendingImages.splice(imageIndex, 1);\r\n        }\r\n        // Find the image where pending is true in the uploadedImages list\r\n        // Setting pending to the image is useful for show shimmer in tradeDetail\r\n        const newUploadedImages = [...prev!.uploadedImages];\r\n        imageIndex = newUploadedImages.findIndex(img => img.id === image.id);\r\n        if (imageIndex !== -1 && newUploadedImages[imageIndex].pending) {\r\n          newUploadedImages.splice(imageIndex, 1);\r\n        }\r\n\r\n        return {\r\n          ...prev!,\r\n          pendingImages: newPendingImages,\r\n          uploadedImages: [...newUploadedImages, updatedImage]\r\n        };\r\n\r\n\r\n      });\r\n\r\n      // Update Firebase document if we have a temporary trade ID\r\n      if (calendarId && tradeId) {\r\n        try {\r\n          // Use transaction to add the image to the trade\r\n\r\n          await handleUpdateTradeProperty(tradeId, (trade) => {\r\n            // Find the existing image in the trade to preserve any layout information\r\n            const existingImage = trade.images?.find(img => img.id === updatedImage.id);\r\n\r\n            // Create the updated image with layout information\r\n            const finalUpdatedImage = {\r\n              ...updatedImage,\r\n              // Preserve existing layout information if available\r\n              row: existingImage?.row !== undefined ? existingImage.row : updatedImage.row,\r\n              column: existingImage?.column !== undefined ? existingImage.column : updatedImage.column,\r\n              columnWidth: existingImage?.columnWidth !== undefined ? existingImage.columnWidth : updatedImage.columnWidth\r\n            };\r\n\r\n            return {\r\n              ...trade,\r\n              images: (trade.images || [finalUpdatedImage]).map(img =>\r\n                img.id === finalUpdatedImage.id ? finalUpdatedImage : img)\r\n            };\r\n          });\r\n\r\n\r\n\r\n        } catch (updateError) {\r\n          console.error('Error updating trade with new image:', updateError);\r\n\r\n          // Show error message to the user\r\n          showErrorSnackbar(updateError instanceof Error ?\r\n            `Failed to save image to trade: ${updateError.message}` :\r\n            'Failed to save image to trade. The image is saved locally but may be lost if you refresh the page.');\r\n\r\n          // Continue execution - we'll still have the image in local state\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error uploading image:', error);\r\n\r\n      // Update UI to show upload failed\r\n      setNewTrade(prev => ({\r\n        ...prev!,\r\n        pendingImages: prev!.pendingImages.map((img) =>\r\n          img.id === image.id ? { ...img, uploadProgress: -1 } : img\r\n        )\r\n      }));\r\n    }\r\n  };\r\n\r\n\r\n  const handleImageCaptionChange = async (index: number, caption: string, isPending: boolean) => {\r\n    try {\r\n      if (isPending) {\r\n        // Check if the image is currently being uploaded\r\n        const image = newTrade!.pendingImages[index];\r\n        if (image.uploadProgress !== undefined && image.uploadProgress > 0 && image.uploadProgress < 100) {\r\n          // Image is currently uploading, we shouldn't allow caption changes\r\n          // This is a fallback in case the UI field wasn't disabled properly\r\n          console.warn('Attempted to change caption of an image that is currently uploading');\r\n          return;\r\n        }\r\n\r\n        // Update caption for pending image\r\n        setNewTrade(prev => ({\r\n          ...prev!,\r\n          pendingImages: prev!.pendingImages.map((img, i) =>\r\n            i === index ? { ...img, caption } : img\r\n          )\r\n        }));\r\n      } else {\r\n        // Update caption for uploaded image\r\n        setNewTrade(prev => ({\r\n          ...prev!,\r\n          uploadedImages: prev!.uploadedImages.map((img, i) =>\r\n            i === index ? { ...img, caption } : img\r\n          )\r\n        }));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error in handleImageCaptionChange:', error);\r\n      // Don't show error to user for caption changes as it's not critical\r\n    }\r\n  };\r\n\r\n\r\n  const handleImageRemove = async (index: number, isPending: boolean) => {\r\n    try {\r\n      if (isPending) {\r\n        // Check if the image is currently being uploaded\r\n        const image = newTrade!.pendingImages[index];\r\n        if (image.uploadProgress !== undefined && image.uploadProgress > 0 && image.uploadProgress < 100) {\r\n          // Image is currently uploading, we shouldn't allow deletion\r\n          // This is a fallback in case the UI button wasn't hidden properly\r\n          console.warn('Attempted to delete an image that is currently uploading');\r\n          showErrorSnackbar('Cannot delete an image while it\\'s uploading. Please wait for the upload to complete.');\r\n          return;\r\n        }\r\n\r\n        // Release object URL to avoid memory leaks\r\n        URL.revokeObjectURL(image.preview);\r\n\r\n        // Update local state\r\n        setNewTrade(prev => ({\r\n          ...prev!,\r\n          pendingImages: prev!.pendingImages.filter((_, i) => i !== index)\r\n        }));\r\n      } else {\r\n        const image = newTrade!.uploadedImages[index];\r\n\r\n        // Update local state first for immediate UI feedback\r\n        setNewTrade(prev => ({\r\n          ...prev!,\r\n          uploadedImages: prev!.uploadedImages.filter((_, i) => i !== index)\r\n        }));\r\n\r\n        //delete the image and update the trade in the background\r\n        try {\r\n          await handleUpdateTradeProperty(newTrade!.id, (trade) => ({\r\n            ...trade,\r\n            images: (trade.images || []).filter(img => img.id !== image.id)\r\n          }));\r\n\r\n          console.log(`Image ${image.id} deleted and trade updated successfully`);\r\n        } catch (deleteError) {\r\n          console.error('Error deleting image or updating trade:', deleteError);\r\n          // Don't show error to user since the image is already removed from UI\r\n          // and will be properly cleaned up when the form is submitted\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error in handleImageRemove:', error);\r\n      showErrorSnackbar('Failed to remove image. Please try again.');\r\n    }\r\n  };\r\n  // Handle image reordering\r\n  const handleImagesReordered = async (images: Array<GridImage | GridPendingImage>) => {\r\n    console.log(\"handleImagesReordered called with images:\",\r\n      images.map(img => ({ id: img.id, row: img.row, column: img.column, columnWidth: img.columnWidth })));\r\n\r\n    // Separate pending and uploaded images\r\n    const pendingImages = images.filter(img => 'file' in img) as GridPendingImage[];\r\n    const uploadedImages = images.filter(img => !('file' in img)) as GridImage[];\r\n\r\n    // Update local state\r\n    setNewTrade(prev => ({\r\n      ...prev!,\r\n      pendingImages: pendingImages as PendingImage[],\r\n      uploadedImages: uploadedImages\r\n    }));\r\n\r\n  };\r\n\r\n  // Handle tag updates from the edit dialog\r\n  const handleTagUpdated = (oldTag: string, newTag: string) => {\r\n    // Update the tags in the current form if needed\r\n    if (newTrade && newTrade.tags.includes(oldTag)) {\r\n      setNewTrade(prev => {\r\n        if (!prev) return prev;\r\n        return {\r\n          ...prev,\r\n          tags: prev.tags.map(tag => tag === oldTag ? newTag : tag).filter((tag: string) => tag !== '')\r\n        };\r\n      });\r\n    }\r\n\r\n    // Update the cached trades list\r\n    if (onTagUpdated) {\r\n      onTagUpdated(oldTag, newTag);\r\n    }\r\n  };\r\n\r\n  const hasPendingUploads = (): boolean => newTrade!.pendingImages.some(img =>\r\n    img.uploadProgress !== undefined && img.uploadProgress < 100 && img.uploadProgress >= 0\r\n  );\r\n\r\n  // Check if all required tag groups are present in the trade's tags\r\n  const validateRequiredTagGroups = (tags: string[]): { valid: boolean; missingGroups: string[] } => {\r\n    if (!requiredTagGroups || requiredTagGroups.length === 0) {\r\n      return { valid: true, missingGroups: [] };\r\n    }\r\n\r\n    // Get all groups present in the tags\r\n    const presentGroups = new Set<string>();\r\n    tags.forEach(tag => {\r\n      if (tag.includes(':')) {\r\n        const group = tag.split(':')[0];\r\n        presentGroups.add(group);\r\n      }\r\n    });\r\n\r\n    // Find missing required groups\r\n    const missingGroups = requiredTagGroups.filter(group => !presentGroups.has(group));\r\n\r\n    return {\r\n      valid: missingGroups.length === 0,\r\n      missingGroups\r\n    };\r\n  };\r\n\r\n  const handleSubmit = async (e?: React.FormEvent) => {\r\n    if (e) e.preventDefault();\r\n\r\n    if (!onAddTrade) return;\r\n\r\n\r\n    try {\r\n      // Validate form\r\n      if (!newTrade!.amount) {\r\n        showErrorSnackbar('Amount is required');\r\n        return;\r\n      }\r\n      if (!newTrade!.session) {\r\n        showErrorSnackbar('Session is required');\r\n        return;\r\n      }\r\n      if (!newTrade!.riskToReward) {\r\n        showErrorSnackbar('Risk to reward is required');\r\n        return;\r\n      }\r\n\r\n      // Validate required tag groups\r\n      const { valid, missingGroups } = validateRequiredTagGroups(newTrade!.tags);\r\n      if (!valid) {\r\n        showErrorSnackbar(`Missing required tag groups: ${missingGroups.join(', ')}. Each trade must include at least one tag from these groups.`);\r\n        return;\r\n      }\r\n\r\n      // Check if there are any pending image uploads\r\n      // If there are pending uploads, wait for them to complete\r\n      if (hasPendingUploads()) {\r\n        // Just show the loading indicator and let the uploads continue\r\n        // The trade will be updated automatically when all uploads are complete\r\n        showErrorSnackbar('Please wait for image uploads to complete...');\r\n        return;\r\n      }\r\n      setIsSubmitting(true);\r\n      // Prepare data\r\n      let tradeData = createFinalTradeData(newTrade!, date);\r\n\r\n      try {\r\n        // Update the temporary trade with the final data\r\n        if (newTrade!.isTemporary && newTrade!.id) {\r\n          await handleUpdateTradeProperty(newTrade!.id, () => ({ ...tradeData, isTemporary: false })); // Mark as a permanent trade\r\n        }\r\n        else {\r\n          await onAddTrade(tradeData);\r\n        }\r\n\r\n        // Only reset and close if the operation was successful\r\n        resetForm();\r\n        onCancel();\r\n\r\n      } catch (dbError) {\r\n        // If it's a temporary trade that failed to update, we should clean it up\r\n        if (newTrade!.isTemporary && newTrade!.id) {\r\n          try {\r\n            // Delete the temporary trade that failed to be made permanent\r\n            await handleUpdateTradeProperty(newTrade!.id, (trade) => ({\r\n              ...trade,\r\n              isDeleted: true\r\n            }));\r\n            console.log('Cleaned up temporary trade after failed update');\r\n          } catch (cleanupError) {\r\n            console.error('Failed to cleanup temporary trade:', cleanupError);\r\n          }\r\n        }\r\n\r\n        // Re-throw the original error\r\n        throw dbError;\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Error in trade submission:', error);\r\n      showErrorSnackbar(error instanceof Error ? error.message : 'Failed to add trade. Please try again.');\r\n\r\n      // Don't close the dialog on error - let the user try again or cancel manually\r\n\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const handleEditSubmit = async (e?: React.FormEvent) => {\r\n    if (e) e.preventDefault();\r\n    if (!editingTrade) return;\r\n\r\n    setIsSubmitting(true);\r\n    // Clear any previous errors\r\n\r\n    try {\r\n      // Validate form\r\n      if (!newTrade!.amount) {\r\n        throw new Error('Amount is required');\r\n      }\r\n\r\n      // Validate required tag groups\r\n      const { valid, missingGroups } = validateRequiredTagGroups(newTrade!.tags);\r\n      if (!valid) {\r\n        throw new Error(`Missing required tag groups: ${missingGroups.join(', ')}. Each trade must include at least one tag from these groups.`);\r\n      }\r\n\r\n      // Check if there are any pending image uploads\r\n\r\n      // If there are pending uploads, wait for them to complete\r\n      if (hasPendingUploads()) {\r\n        // Just show the loading indicator and let the uploads continue\r\n        // The trade will be updated automatically when all uploads are complete\r\n        showErrorSnackbar('Please wait for image uploads to complete...');\r\n        setIsSubmitting(false);\r\n        return;\r\n      }\r\n\r\n\r\n      // Prepare data\r\n      let finalAmount = calculateFinalAmount(newTrade!);\r\n\r\n      // Process tags to ensure proper formatting\r\n      let finalTags = processTagsForSubmission([...newTrade!.tags]);\r\n\r\n      // Add Partials tag if partialsTaken is true\r\n      if (newTrade!.partialsTaken) {\r\n        // Remove any existing Partials tags\r\n        finalTags = finalTags.filter((tag: string) => !tag.startsWith('Partials:'));\r\n        finalTags.push('Partials:Yes');\r\n      } else {\r\n        // Remove any existing Partials tags\r\n        finalTags = finalTags.filter((tag: string) => !tag.startsWith('Partials:'));\r\n      }\r\n\r\n\r\n      // Update trade\r\n      try {\r\n        // Verify the trade still exists\r\n        if (editingTrade.id) {\r\n          const existingTrade = await calendarService.getTrade(calendarId, editingTrade.id);\r\n\r\n          if (!existingTrade) {\r\n            throw new Error(`Trade with ID ${editingTrade.id} not found. It may have been deleted.`);\r\n          }\r\n          // Prepare the images array with layout information\r\n          const updatedImages = [\r\n            ...newTrade!.pendingImages.map(img => ({\r\n              url: img.preview || '',\r\n              id: img.id!,\r\n              calendarId: calendarId,\r\n              pending: true,\r\n              caption: img.caption || '',\r\n              width: img.width || 0,\r\n              height: img.height || 0,\r\n              row: img.row !== undefined ? img.row : 0,\r\n              column: img.column !== undefined ? img.column : 0,\r\n              columnWidth: img.columnWidth !== undefined ? img.columnWidth : 100 // Default to 100% for vertical layout\r\n            })),\r\n            ...newTrade!.uploadedImages.map(img => ({\r\n              url: img.url || '',\r\n              id: img.id,\r\n              calendarId: calendarId,\r\n              pending: img.pending,\r\n              caption: img.caption || '',\r\n              width: img.width || 0,\r\n              height: img.height || 0,\r\n              row: img.row !== undefined ? img.row : 0,\r\n              column: img.column !== undefined ? img.column : 0,\r\n              columnWidth: img.columnWidth !== undefined ? img.columnWidth : 100 // Default to 100% for vertical layout\r\n            }))\r\n          ];\r\n\r\n          // Debug what's being saved to Firebase\r\n          // console.log(\"Saving images to Firebase with layout info in handleEditSubmit:\",\r\n          //   updatedImages.map(img => ({ id: img.id, row: img.row, column: img.column, columnWidth: img.columnWidth })));\r\n\r\n          await handleUpdateTradeProperty(editingTrade.id, (trade) => {\r\n            // Use the new date if it was changed, otherwise keep the original date\r\n            const currentDate = new Date();\r\n            const tradeDate = newTrade!.date || trade.date;\r\n            const updatedDate = new Date(tradeDate.getFullYear(), tradeDate.getMonth(), tradeDate.getDate(),\r\n              currentDate.getHours(), currentDate.getMinutes(), currentDate.getSeconds());\r\n\r\n            return {\r\n              ...trade,\r\n              type: newTrade!.type,\r\n              amount: finalAmount,\r\n              name: newTrade!.name || \"\",\r\n              entry: newTrade!.entry || \"\",\r\n              exit: newTrade!.exit || \"\",\r\n              date: updatedDate,\r\n              isTemporary: newTrade?.isTemporary && !newTrade.name,\r\n              tags: finalTags || [],\r\n              riskToReward: parseFloat(newTrade!.riskToReward) || 1,\r\n              partialsTaken: newTrade!.partialsTaken,\r\n              session: newTrade!.session || \"London\",\r\n              notes: newTrade!.notes || \"\",\r\n              images: updatedImages\r\n            };\r\n          });\r\n          console.log('Trade updated successfully');\r\n        } else {\r\n          throw new Error('Cannot update trade: Missing trade ID');\r\n        }\r\n      } catch (editError) {\r\n        console.error('Error updating trade:', editError);\r\n        throw new Error(`Failed to update trade: ${editError instanceof Error ? editError.message : 'Unknown error'}`);\r\n      }\r\n\r\n      // Reset form\r\n      resetForm();\r\n      onCancel();\r\n\r\n      // No need to explicitly recalculate cumulative PnL\r\n      // It will be calculated directly in the DayHeader component\r\n    } catch (error) {\r\n      console.error('Error editing trade:', error);\r\n      showErrorSnackbar(error instanceof Error ? error.message : 'Failed to edit trade. Please try again.');\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <BaseDialog\r\n        open={open}\r\n        onClose={() => {\r\n          // Only allow closing if we're not in the process of creating an empty trade\r\n          if (!isCreatingEmptyTrade) {\r\n            if (editingTrade) {\r\n              resetForm();\r\n            }\r\n            onClose();\r\n          }\r\n        }}\r\n        title=\"Daily Trades\"\r\n        maxWidth=\"md\"\r\n        fullWidth\r\n        hideCloseButton={isCreatingEmptyTrade} // Disable close button when creating empty trade\r\n        primaryButtonText={(editingTrade ? 'Update Trade' : 'Add Trade')}\r\n        primaryButtonAction={(editingTrade ?\r\n          (e?: React.FormEvent) => handleEditSubmit(e) :\r\n          (e?: React.FormEvent) => handleSubmit(e)\r\n        )}\r\n        isSubmitting={isSubmitting || isCreatingEmptyTrade} // Show loading state when creating empty trade\r\n        cancelButtonAction={() => {\r\n          // Only allow canceling if we're not in the process of creating an empty trade\r\n          if (!isCreatingEmptyTrade) {\r\n            resetForm();\r\n            onCancel();\r\n          }\r\n        }}\r\n        hideFooterCancelButton={false}\r\n      >\r\n        <Box sx={{ p: 3 }}>\r\n\r\n          <DayHeader\r\n            title={format(date, 'EEEE, MMMM d, yyyy')}\r\n            accountBalance={accountBalance + calculateCumulativePnL(startOfNextDay(date), allTrades)}\r\n            formInputVisible={true}\r\n            totalPnL={trades.reduce((sum, trade) => sum + trade.amount, 0)}\r\n            onPrevDay={() => { }}\r\n            onNextDay={() => { }}\r\n          />\r\n\r\n          <Box>\r\n            <TradeForm\r\n              accountBalance={accountBalance}\r\n              calculateCumulativePnl={(newTrade) => calculateCumulativePnL(newTrade?.date || endOfDay(date), allTrades)}\r\n              dynamicRiskSettings={dynamicRiskSettings}\r\n              calendarId={calendarId}\r\n              requiredTagGroups={requiredTagGroups}\r\n              onTagUpdated={handleTagUpdated}\r\n              newTrade={newTrade!}\r\n              editingTrade={editingTrade}\r\n              allTags={allTags}\r\n               allTrades={allTrades}\r\n              isSubmitting={isSubmitting} \r\n              calculateAmountFromRiskToReward={calculateAmountFromRiskToReward}\r\n              onNameChange={handleNameChange}\r\n              onAmountChange={handleAmountChange}\r\n              onTypeChange={handleTypeChange}\r\n              onEntryChange={handleEntryChange}\r\n              onExitChange={handleExitChange}\r\n              onRiskToRewardChange={handleRiskToRewardChange}\r\n              onPartialsTakenChange={handlePartialsTakenChange}\r\n              onSessionChange={handleSessionChange}\r\n              onNotesChange={handleNotesChange}\r\n              onTagsChange={handleTagsChange}\r\n              onDateChange={handleDateChange}\r\n              onImageUpload={handleImageUpload}\r\n              onImageCaptionChange={handleImageCaptionChange}\r\n              onImageRemove={handleImageRemove}\r\n              onImagesReordered={handleImagesReordered}\r\n              onSubmit={editingTrade ? handleEditSubmit : handleSubmit}\r\n              trades={allTrades}\r\n              onOpenGalleryMode={onOpenGalleryMode}\r\n            />\r\n\r\n\r\n          </Box>\r\n        </Box>\r\n      </BaseDialog>\r\n\r\n\r\n\r\n      {/* Snackbar for error messages */}\r\n      <Snackbar\r\n        open={snackbarOpen}\r\n        autoHideDuration={6000}\r\n        onClose={handleSnackbarClose}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n      >\r\n        <Alert onClose={handleSnackbarClose} severity=\"error\" sx={{ width: '100%' }}>\r\n          {snackbarMessage}\r\n        </Alert>\r\n      </Snackbar>\r\n    </>\r\n\r\n  );\r\n};\r\n\r\nexport default TradeFormDialog;\r\n\r\n","import { format, eachDayOfInterval, startOfMonth, endOfMonth, isSameMonth } from 'date-fns';\nimport { Trade } from '../types/trade';\n\nexport type TimePeriod = 'month' | 'year' | 'all';\n\nexport interface ChartDataPoint {\n  date: string;\n  pnl: number;\n  cumulativePnL: number;\n  isIncreasing: boolean;\n  isDecreasing: boolean;\n  dailyChange: number;\n  isWin: boolean;\n  isLoss: boolean;\n  isBreakEven: boolean;\n  trades: Trade[];\n  fullDate: Date;\n}\n\nexport interface SessionStats {\n  session: string;\n  totalTrades: number;\n  winners: number;\n  losers: number;\n  breakevens: number;\n  winRate: number;\n  totalPnL: number;\n  averagePnL: number;\n  pnlPercentage: number;\n}\n\n// Function to filter trades based on selected time period\nexport const getFilteredTrades = (trades: Trade[], selectedDate: Date, period: TimePeriod): Trade[] => {\n  switch (period) {\n    case 'month':\n      return trades.filter(trade => isSameMonth(new Date(trade.date), selectedDate));\n    case 'year':\n      return trades.filter(trade => new Date(trade.date).getFullYear() === selectedDate.getFullYear());\n    case 'all':\n      return trades;\n    default:\n      return trades;\n  }\n};\n\n// Calculate chart data for cumulative P&L - async to prevent UI blocking\nexport const calculateChartData = async (\n  trades: Trade[],\n  selectedDate: Date,\n  timePeriod: TimePeriod\n): Promise<ChartDataPoint[]> => {\n  const filteredTrades = getFilteredTrades(trades, selectedDate, timePeriod);\n\n  // Yield control to prevent UI blocking\n  await new Promise(resolve => setTimeout(resolve, 0));\n\n  // Get the date range for the selected period\n  let startDate, endDate;\n  if (timePeriod === 'month') {\n    startDate = startOfMonth(selectedDate);\n    endDate = endOfMonth(selectedDate);\n  } else if (timePeriod === 'year') {\n    startDate = new Date(selectedDate.getFullYear(), 0, 1);\n    endDate = new Date(selectedDate.getFullYear(), 11, 31);\n  } else {\n    // For 'all', use the first and last trade dates\n    if (filteredTrades.length === 0) {\n      startDate = new Date();\n      endDate = new Date();\n    } else {\n      const sortedTrades = [...filteredTrades].sort((a, b) =>\n        new Date(a.date).getTime() - new Date(b.date).getTime()\n      );\n      startDate = new Date(sortedTrades[0].date);\n      endDate = new Date(sortedTrades[sortedTrades.length - 1].date);\n    }\n  }\n\n  // Generate an array of all days in the period\n  const days = eachDayOfInterval({ start: startDate, end: endDate });\n\n  // Calculate cumulative P&L for each day\n  let cumulative = 0;\n  let prevCumulative = 0;\n\n  // Process in chunks to prevent blocking for large datasets\n  const chunkSize = 100;\n  const result: ChartDataPoint[] = [];\n\n  for (let i = 0; i < days.length; i += chunkSize) {\n    const chunk = days.slice(i, i + chunkSize);\n\n    // Process each day in the chunk sequentially to avoid unsafe references\n    const chunkResult: ChartDataPoint[] = [];\n    for (const day of chunk) {\n      // Find trades for this day\n      const dayTrades = filteredTrades.filter(trade =>\n        format(new Date(trade.date), 'yyyy-MM-dd') === format(day, 'yyyy-MM-dd')\n      );\n\n      // Calculate daily P&L\n      const dailyPnL = dayTrades.reduce((sum, trade) => sum + trade.amount, 0);\n\n      // Update cumulative P&L\n      prevCumulative = cumulative;\n      cumulative += dailyPnL;\n\n      chunkResult.push({\n        date: format(day, timePeriod === 'month' ? 'MM/dd' : 'MM/dd/yyyy'),\n        pnl: dailyPnL,\n        cumulativePnL: cumulative,\n        isIncreasing: cumulative > prevCumulative,\n        isDecreasing: cumulative < prevCumulative,\n        dailyChange: cumulative - prevCumulative,\n        isWin: dailyPnL > 0,\n        isLoss: dailyPnL < 0,\n        isBreakEven: dailyPnL === 0,\n        trades: dayTrades,\n        fullDate: new Date(day)\n      });\n    }\n\n    result.push(...chunkResult);\n\n    // Yield control after each chunk\n    if (i + chunkSize < days.length) {\n      await new Promise(resolve => setTimeout(resolve, 0));\n    }\n  }\n\n  return result;\n};\n\n// Calculate session performance statistics\nexport const calculateSessionStats = (\n  trades: Trade[], \n  selectedDate: Date, \n  timePeriod: TimePeriod, \n  accountBalance: number\n): SessionStats[] => {\n  const filteredTrades = getFilteredTrades(trades, selectedDate, timePeriod).filter(trade => trade.session !== undefined);\n  const sessions = ['Asia', 'London', 'NY AM', 'NY PM'];\n\n  return sessions.map(sessionName => {\n    const sessionTrades = filteredTrades.filter(trade => trade.session === sessionName);\n    const totalTrades = sessionTrades.length;\n    const winners = sessionTrades.filter(trade => trade.type === 'win').length;\n    const losers = sessionTrades.filter(trade => trade.type === 'loss').length;\n    const breakevens = sessionTrades.filter(trade => trade.type === 'breakeven').length;\n\n    // Calculate win rate excluding breakevens from the denominator\n    const totalTradesForWinRate = winners + losers;\n    const winRate = totalTradesForWinRate > 0 ? (winners / totalTradesForWinRate) * 100 : 0;\n\n    const totalPnL = sessionTrades.reduce((sum, trade) => sum + trade.amount, 0);\n    const averagePnL = totalTrades > 0 ? totalPnL / totalTrades : 0;\n    const pnlPercentage = accountBalance > 0 ? (totalPnL / accountBalance) * 100 : 0;\n\n    return {\n      session: sessionName,\n      totalTrades,\n      winners,\n      losers,\n      breakevens,\n      winRate,\n      totalPnL,\n      averagePnL,\n      pnlPercentage\n    };\n  });\n};\n\n// Calculate target value for monthly target\nexport const calculateTargetValue = (monthlyTarget: number | undefined, accountBalance: number): number | null => {\n  if (monthlyTarget === undefined || accountBalance <= 0) return null;\n  return (monthlyTarget / 100) * accountBalance;\n};\n\n// Calculate drawdown violation value\nexport const calculateDrawdownViolationValue = (maxDailyDrawdown: number, accountBalance: number): number => {\n  return -(maxDailyDrawdown / 100) * accountBalance;\n};\n","import React, { useState, useEffect } from 'react';\nimport {\n  TextField,\n  Typography,\n  Box,\n  Chip,\n  alpha,\n  useTheme\n} from '@mui/material';\nimport * as calendarService from '../services/calendarService';\nimport { getTagChipStyles, formatTagForDisplay, isGroupedTag, getTagGroup } from '../utils/tagColors';\nimport { BaseDialog } from './common';\n\ninterface TagEditDialogProps {\n  open: boolean;\n  onClose: () => void;\n  tag: string;\n  calendarId: string;\n  onSuccess?: (oldTag: string, newTag: string, tradesUpdated: number) => void;\n}\n\nconst TagEditDialog: React.FC<TagEditDialogProps> = ({\n  open,\n  onClose,\n  tag,\n  calendarId,\n  onSuccess\n}) => {\n  const theme = useTheme();\n  const [newTag, setNewTag] = useState(tag);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!newTag.trim() || (isGrouped && !tagName.trim())) {\n      setError('Tag cannot be empty');\n      return;\n    }\n\n    // Validate that the tag doesn't contain multiple colons\n    const colonCount = (newTag.match(/:/g) || []).length;\n    if (colonCount > 1) {\n      setError('Tags can only contain one colon (:) for category formatting');\n      return;\n    }\n\n    if (newTag === tag) {\n      onClose();\n      return;\n    }\n\n    setIsSubmitting(true);\n    setError(null);\n\n    try {\n      tag = tag.trim();\n      const result = await calendarService.updateTag(calendarId, tag, newTag);\n\n      if (result.success) {\n        if (onSuccess) {\n          onSuccess(tag, newTag, result.tradesUpdated);\n        }\n        onClose();\n      } else {\n        setError('Failed to update tag');\n      }\n    } catch (error) {\n      console.error('Error updating tag:', error);\n      setError(error instanceof Error ? error.message : 'An unknown error occurred');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const isGrouped = isGroupedTag(tag); \n  // For grouped tags, extract the tag name part for the input field\n  const getTagNamePart = (fullTag: string) => isGroupedTag(fullTag) ? fullTag.split(':')[1] : fullTag;\n  const [tagName, setTagName] = useState(getTagNamePart(tag));\n  const [tagGroup, setTagGroup] = useState(isGrouped ? getTagGroup(tag) : '');  \n\n\n  // Update state when tag prop changes\n  useEffect(() => {\n    setNewTag(tag);\n    setTagName(getTagNamePart(tag));\n    setError(null);\n  }, [tag]);\n\n  const handleFormSubmit = (e?: React.FormEvent) => {\n    if (e) e.preventDefault();\n    handleSubmit(e as React.FormEvent);\n  };\n\n\n\n  // Create a safe onClose function that checks if submission is in progress\n  const safeOnClose = () => {\n    if (!isSubmitting) {\n      onClose();\n    }\n  };\n\n  return (\n    <BaseDialog\n      open={open}\n      onClose={safeOnClose}\n      maxWidth=\"sm\"\n      fullWidth\n      title=\"Edit Tag\"\n      primaryButtonText={isSubmitting ? 'Updating...' : 'Update Tag'}\n      primaryButtonAction={handleFormSubmit}\n      isSubmitting={isSubmitting}\n      cancelButtonText=\"Cancel\"\n      cancelButtonAction={safeOnClose}\n      hideCloseButton={isSubmitting}\n    >\n      <Box component=\"form\" onSubmit={handleSubmit} sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>\n        <Box sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          gap: 2,\n          p: 1,\n          mt: 1,\n          borderRadius: 1,\n          bgcolor: alpha(theme.palette.primary.main, 0.05),\n          border: `1px solid ${alpha(theme.palette.primary.main, 0.1)}`\n        }}>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            This will update all trades that use this tag across all years in the calendar.\n          </Typography>\n\n          <Box sx={{\n            display: 'flex',\n            alignItems: 'center',\n            gap: 1.5,\n            p: 1,\n            borderRadius: 1,\n            bgcolor: theme.palette.background.paper,\n            border: `1px solid ${theme.palette.divider}`\n          }}>\n            <Typography variant=\"body2\" fontWeight={500}>Current tag:</Typography>\n            <Chip\n              label={formatTagForDisplay(tag)}\n              size=\"small\"\n              sx={{\n                ...getTagChipStyles(tag, theme),\n                fontWeight: 600,\n                boxShadow: theme.shadows[1]\n              }}\n            />\n          </Box>\n        </Box>\n\n\n\n        {isGrouped ? (\n          <Box sx={{ display: 'flex', gap: 2, alignItems: 'flex-start' }}> \n              <TextField\n                label=\"Group\"\n             value={tagGroup}\n              onChange={(e) => {\n                const newGroupName = e.target.value;\n                // Prevent multiple colons in group name\n                if ((newGroupName.match(/:/g) || []).length > 0) {\n                  return;\n                }\n                setTagGroup(newGroupName);\n                setNewTag(`${newGroupName}:${tagName}`);\n              }}\n              fullWidth\n              autoFocus\n              error={!!error}\n              helperText={error}\n              disabled={isSubmitting}\n              size=\"medium\"\n              sx={{\n                '& .MuiFormHelperText-root': {\n                  color: theme.palette.error.main,\n                  fontWeight: 500,\n                  marginTop: 1\n                }\n              }}\n            />\n\n            <TextField\n              label=\"Tag Name\"\n              value={tagName}\n              onChange={(e) => {\n                const newTagName = e.target.value;\n                // Prevent multiple colons in tag name\n                if ((newTagName.match(/:/g) || []).length > 0) {\n                  return;\n                }\n                setTagName(newTagName);\n                setNewTag(`${tagGroup}:${newTagName}`);\n              }}\n              fullWidth\n              autoFocus\n              error={!!error}\n              helperText={error}\n              disabled={isSubmitting}\n              size=\"medium\"\n              sx={{\n                '& .MuiFormHelperText-root': {\n                  color: theme.palette.error.main,\n                  fontWeight: 500,\n                  marginTop: 1\n                }\n              }}\n            />\n          </Box>\n        ) : (\n          <TextField\n            label=\"Tag Name\"\n            value={newTag}\n            onChange={(e) => {\n              const value = e.target.value;\n              // Prevent multiple colons in tag\n              if ((value.match(/:/g) || []).length > 1) {\n                return;\n              }\n              setNewTag(value);\n              setTagName(value);\n            }}\n            fullWidth\n            autoFocus\n            error={!!error}\n            helperText={error}\n            disabled={isSubmitting}\n            size=\"medium\"\n            sx={{\n              '& .MuiFormHelperText-root': {\n                color: theme.palette.error.main,\n                fontWeight: 500,\n                marginTop: 1\n              }\n            }}\n          />\n        )}\n      </Box>\n    </BaseDialog>\n  );\n};\n\nexport default TagEditDialog;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Paper,\n  Typography,\n  IconButton,\n  Collapse,\n  Tooltip,\n  alpha,\n  useTheme,\n  CircularProgress\n} from '@mui/material';\nimport {\n  ExpandMore as ExpandMoreIcon,\n  ExpandLess as ExpandLessIcon,\n  Description as DescriptionIcon,\n  Edit as EditIcon,\n  CalendarMonth,\n  Check as CheckIcon,\n  Error as ErrorIcon,\n  Save as SaveIcon\n} from '@mui/icons-material';\nimport RichTextEditor from './common/RichTextEditor';\nimport { Calendar } from '../types/calendar';\n\ninterface CalendarNoteDataProps {\n  calendarNote: string;\n  calendarId: string;\n  onUpdateCalendarProperty?: (calendarId: string, updateCallback: (calendar: Calendar) => Calendar ) => Promise<void>;\n  isEditable?: boolean;\n  title?: string;\n  emptyStateText?: string;\n  // Optional props for trade link navigation\n  trades?: Array<{ id: string; [key: string]: any }>;\n  onOpenGalleryMode?: (trades: any[], initialTradeId?: string, title?: string) => void;\n}\n\nconst CalendarNote: React.FC<CalendarNoteDataProps> = ({\n  calendarNote,\n  onUpdateCalendarProperty,\n  calendarId,\n  isEditable = true,\n  title = \"Description\",\n  emptyStateText = \"No description available. Click the edit button to description to calendar.\",\n  trades,\n  onOpenGalleryMode\n}) => {\n  const [expanded, setExpanded] = useState(false);\n  const [editedData, setEditedData] = useState(calendarNote);\n  const [saveStatus, setSaveStatus] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');\n  const theme = useTheme();\n\n  // Update editedData when calendarNote prop changes\n  useEffect(() => {\n    setEditedData(calendarNote);\n  }, [calendarNote]);\n\n  // Auto-save when editedData changes\n  useEffect(() => {\n    if (editedData !== calendarNote) {\n      setSaveStatus('saving');\n      const saveTimeout = setTimeout(() => {\n        handleSave();\n      }, 1000); // Debounce save for 1 second\n\n      return () => clearTimeout(saveTimeout);\n    }\n  }, [editedData]);\n\n  const handleToggleExpand = () => {\n    setExpanded(!expanded);\n  };\n\n  // Handle keyboard shortcuts\n  const handleKeyDown = (event: React.KeyboardEvent) => {\n    if ((event.ctrlKey || event.metaKey) && event.key === 's') {\n      event.preventDefault();\n      handleSave();\n    }\n  };\n\n   \n\n  const handleSave = async () => {\n    try {\n      if (!onUpdateCalendarProperty) {\n        throw new Error('onUpdateCalendarProperty is undefined');\n      }\n\n      setSaveStatus('saving');\n\n      await onUpdateCalendarProperty(calendarId!!, (calendar) => {\n        return {\n          ...calendar,\n          note: editedData\n        };\n      });\n\n      setSaveStatus('saved');\n      // Reset to idle after showing saved status for 2 seconds\n      setTimeout(() => setSaveStatus('idle'), 2000);\n    }\n    catch (error) {\n      console.error('Error saving notes:', error);\n      setSaveStatus('error');\n      // Reset to idle after showing error status for 3 seconds\n      setTimeout(() => setSaveStatus('idle'), 3000);\n    }\n  };\n\n  return (\n    <Paper\n      elevation={3}\n      sx={{\n        mb: 2,\n        borderRadius: 2,\n        overflow: 'hidden',\n        border: '1px solid',\n        borderColor:  'divider',\n        backgroundColor: theme.palette.background.paper,\n        minHeight: !expanded ? '60px' : 'auto',\n        transition: 'all 0.3s ease',\n        boxShadow:  `0 2px 8px ${alpha(theme.palette.grey[500], 0.1)}`,\n        '&:hover': {\n          boxShadow: `0 4px 12px ${alpha(theme.palette.grey[500], 0.15)}`,\n          transform: 'translateY(-2px)'\n        }\n      }}\n    >\n      <Box\n        sx={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          p: 1.5,\n          pl: 2,\n          backgroundColor:  alpha(theme.palette.primary.main, 0.08),\n          borderBottom: expanded ? `1px solid ${theme.palette.divider}` : 'none',\n          transition: 'background-color 0.3s ease'\n        }}\n      >\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n          <Box\n            sx={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              width: 36,\n              height: 36,\n              borderRadius: '50%',\n              backgroundColor: alpha(theme.palette.warning.main, 0.15),\n              mr: 1.5\n            }}\n          >\n            <CalendarMonth\n              sx={{\n                color: theme.palette.warning.main,\n                fontSize: '1.5rem'\n              }}\n            />\n          </Box>\n          <Typography\n            variant=\"h6\"\n            sx={{\n              fontWeight: 700,\n              fontSize: '1.1rem',\n              letterSpacing: '-0.3px',\n              background: 'inherit',\n              WebkitBackgroundClip: 'unset',\n              WebkitTextFillColor: 'inherit',\n            }}\n          >\n            {title}\n          </Typography>\n\n          {/* Save Status Indicator */}\n          {saveStatus !== 'idle' && (\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n              {saveStatus === 'saving' && (\n                <>\n                  <CircularProgress size={12} sx={{ color: theme.palette.warning.main }} />\n                  <Typography variant=\"caption\" sx={{ color: theme.palette.text.secondary, fontSize: '0.7rem' }}>\n                    Saving...\n                  </Typography>\n                </>\n              )}\n              {saveStatus === 'saved' && (\n                <>\n                  <CheckIcon sx={{ color: theme.palette.success.main, fontSize: '1rem' }} />\n                  <Typography variant=\"caption\" sx={{ color: theme.palette.success.main, fontSize: '0.7rem' }}>\n                    Saved\n                  </Typography>\n                </>\n              )}\n              {saveStatus === 'error' && (\n                <>\n                  <ErrorIcon sx={{ color: theme.palette.error.main, fontSize: '1rem' }} />\n                  <Typography variant=\"caption\" sx={{ color: theme.palette.error.main, fontSize: '0.7rem' }}>\n                    Error saving\n                  </Typography>\n                </>\n              )}\n            </Box>\n          )}\n        </Box>\n        <Box>\n          \n          <Tooltip title={expanded ? \"Hide description\" : \"Show description\"}>\n            <IconButton\n              size=\"small\"\n              onClick={handleToggleExpand}\n              sx={{\n                color: 'text.secondary',\n                backgroundColor: alpha(theme.palette.grey[500], 0.08),\n                '&:hover': {\n                  backgroundColor: alpha(theme.palette.grey[500], 0.15),\n                }\n              }}\n            >\n              {expanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n            </IconButton>\n          </Tooltip>\n        </Box>\n      </Box>\n\n      <Collapse in={expanded}>\n        <Box sx={{ p: 2 }} onKeyDown={handleKeyDown}>\n          <RichTextEditor\n            value={editedData}\n            onChange={setEditedData}\n            placeholder=\"Enter a description about your calendar, trading strategy, plans, or mindset...\"\n            minHeight={300}\n            calendarId={calendarId}\n            trades={trades}\n            onOpenGalleryMode={onOpenGalleryMode}\n          />\n        </Box>\n      </Collapse>\n    </Paper>\n  );\n};\n\nexport default CalendarNote;\n","import React, { useState } from 'react';\nimport {\n  Box,\n  Button,\n  Tooltip\n} from '@mui/material';\nimport { ViewCarousel as GalleryIcon } from '@mui/icons-material';\nimport { format, isAfter, startOfDay } from 'date-fns';\nimport { Trade } from '../../types/trade';\nimport { BaseDialog } from '../common';\nimport { DayHeader, TradeList } from './';\nimport { calculateCumulativePnL, startOfNextDay } from './TradeFormDialog';\ninterface DayDialogProps {\n  open: boolean;\n  onClose: () => void;\n  date: Date;\n  trades: Trade[];\n  accountBalance: number;\n  onDateChange: (date: Date) => void;\n  showAddForm: (ediTrade?: Trade | null) => void;\n  onDeleteTrade: (tradeId: string) => void;\n  onDeleteMultipleTrades?: (tradeIds: string[]) => void;\n  onUpdateTradeProperty?: (tradeId: string, updateCallback: (trade: Trade) => Trade, createIfNotExists?: (tradeId: string) => Trade) => Promise<Trade | undefined>;\n  setZoomedImage: (url: string, allImages?: string[], initialIndex?: number) => void;\n  allTrades?: Trade[];\n  calendarId: string;\n  deletingTradeIds?: string[];\n  onOpenGalleryMode?: (trades: Trade[], initialTradeId?: string, title?: string) => void;\n}\n\n\n\n  \n\nconst DayDialog: React.FC<DayDialogProps> = ({\n  open,\n  onClose,\n  date,\n  trades,\n  accountBalance,\n  onDeleteTrade,\n  onDeleteMultipleTrades,\n  showAddForm,\n  onDateChange,\n  onUpdateTradeProperty,\n  setZoomedImage,\n  allTrades = [],\n  calendarId,\n  deletingTradeIds,\n  onOpenGalleryMode\n}) => {\n\n  // State\n\n  \n  const [expandedTradeId, setExpandedTradeId] = useState<string | null>(null);\n  \n \n\n  // Handlers\n  const handlePrevDay = () => {\n    const prevDay = new Date(date);\n    prevDay.setDate(prevDay.getDate() - 1);\n    onDateChange(prevDay);\n  };\n  \n  const handleNextDay = () => {\n    const nextDay = startOfNextDay(date);\n    // Don't allow navigating to future dates\n    if (!isAfter(nextDay, startOfDay(new Date()))) {\n      onDateChange(nextDay);\n    }\n  };\n\n  const handleTradeClick = (tradeId: string) => {\n    setExpandedTradeId(expandedTradeId === tradeId ? null : tradeId);\n  };\n\n  const handleAddClick = async () => {\n    showAddForm(null);\n  };\n \n\n\n  const handleEditClick = (trade: Trade) => {\n    showAddForm(trade);\n  };\n\n  const handleGalleryModeClick = () => {\n    if (onOpenGalleryMode && trades.length > 0) {\n      const title = `${format(date, 'EEEE, MMMM d, yyyy')} - ${trades.length} Trade${trades.length > 1 ? 's' : ''}`;\n      onOpenGalleryMode(trades, expandedTradeId || trades[0].id, title);\n      onClose(); // Close the day dialog when opening gallery mode\n    }\n  };\n\n\n   \n   \n\n  return (\n    <>\n      <BaseDialog\n        open={open}\n        onClose={() => {\n          // Only allow closing if we're not in the process of creating an empty trade\n          onClose();\n        }}\n        title=\"Daily Trades\"\n        maxWidth=\"md\"\n        fullWidth\n        hideCloseButton={false}\n        primaryButtonText={'Add Trade'}\n        primaryButtonAction={() => handleAddClick()\n        }\n        hideFooterCancelButton={false}\n        actions={\n          onOpenGalleryMode && trades.length > 0 ? (\n            <Tooltip title=\"View trades in gallery mode\">\n              <Button\n                variant=\"outlined\"\n                startIcon={<GalleryIcon />}\n                onClick={handleGalleryModeClick}\n                sx={{ mr: 1 }}\n              >\n                Gallery View\n              </Button>\n            </Tooltip>\n          ) : undefined\n        }\n      >\n        <Box sx={{ p: 3 }}>\n\n          <DayHeader\n            title={format(date, 'EEEE, MMMM d, yyyy')}\n            accountBalance={accountBalance + calculateCumulativePnL(startOfNextDay(date), allTrades)}\n            formInputVisible={false}\n            totalPnL={trades.reduce((sum, trade) => sum + trade.amount, 0)}\n            onPrevDay={handlePrevDay}\n            onNextDay={handleNextDay}\n          />\n\n          <TradeList\n            trades={trades}\n            expandedTradeId={expandedTradeId}\n            onTradeClick={handleTradeClick}\n            onEditClick={handleEditClick}\n            onDeleteClick={onDeleteTrade}\n            onDeleteMultiple={onDeleteMultipleTrades}\n            onZoomedImage={setZoomedImage}\n            onUpdateTradeProperty={onUpdateTradeProperty}\n            enableBulkSelection={trades.length > 1} // Enable bulk selection when there are multiple trades\n            deletingTradeIds={deletingTradeIds}\n            calendarId={calendarId}\n          />\n        </Box>\n      </BaseDialog>\n\n     \n    </>\n\n  );\n};\n\nexport default DayDialog;\n\n\n","import React, { useState, useEffect, useMemo } from 'react';\nimport {\n  Box,\n  Typography,\n  List,\n  ListItem,\n  ListItemText,\n  IconButton,\n  Divider,\n  TextField,\n  InputAdornment,\n  Chip,\n  useTheme,\n  alpha,\n  Tooltip,\n  Button,\n  FormControlLabel,\n  Switch\n} from '@mui/material';\nimport { scrollbarStyles } from '../styles/scrollbarStyles';\nimport {\n  Edit as EditIcon,\n  Search as SearchIcon,\n  FilterList as FilterListIcon,\n  Info as InfoIcon\n} from '@mui/icons-material';\nimport { BaseDialog } from './common';\nimport TagEditDialog from './TagEditDialog';\nimport {\n  getTagChipStyles,\n  formatTagForDisplay,\n  isGroupedTag,\n  getTagGroup,\n  getUniqueTagGroups\n} from '../utils/tagColors';\nimport { Calendar } from '../types/calendar';\n\ninterface TagManagementDialogProps {\n  open: boolean;\n  onClose: () => void;\n  allTags: string[];\n  calendarId: string;\n  onTagUpdated?: (oldTag: string, newTag: string) => void;\n  requiredTagGroups?: string[];\n  onUpdateCalendarProperty?: (calendarId: string, updateCallback: (calendar: Calendar) => Calendar) => Promise<void>;\n}\n\nconst TagManagementDialog: React.FC<TagManagementDialogProps> = ({\n  open,\n  onClose,\n  allTags,\n  calendarId,\n  onTagUpdated,\n  requiredTagGroups = [],\n  onUpdateCalendarProperty\n}) => {\n  const theme = useTheme();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedTagGroup, setSelectedTagGroup] = useState<string>('');\n  const [tagToEdit, setTagToEdit] = useState<string | null>(null);\n  const [localRequiredGroups, setLocalRequiredGroups] = useState<string[]>(requiredTagGroups);\n\n  // Update local state when props change\n  useEffect(() => {\n    setLocalRequiredGroups(requiredTagGroups);\n  }, [requiredTagGroups]);\n\n  // Get all unique tag groups\n  const tagGroups = useMemo(() => {\n    return getUniqueTagGroups(allTags);\n  }, [allTags]);\n\n  // Reset selected tag group if it no longer exists in the available tag groups\n  useEffect(() => {\n    if (selectedTagGroup && !tagGroups.includes(selectedTagGroup)) {\n      setSelectedTagGroup('');\n    }\n  }, [tagGroups, selectedTagGroup]);\n\n  // Filter tags based on search term and selected group\n  const filteredTags = useMemo(() => {\n    let filtered = allTags;\n\n    // Filter by group if selected\n    if (selectedTagGroup) {\n      filtered = filtered.filter(tag =>\n        isGroupedTag(tag) && getTagGroup(tag) === selectedTagGroup\n      );\n    }\n\n    // Filter by search term\n    if (searchTerm) {\n      const term = searchTerm.toLowerCase();\n      filtered = filtered.filter(tag =>\n        tag.toLowerCase().includes(term) ||\n        formatTagForDisplay(tag).toLowerCase().includes(term)\n      );\n    }\n\n    return filtered;\n  }, [allTags, searchTerm, selectedTagGroup]);\n\n  // Group tags by their group\n  const groupedTags = useMemo(() => {\n    const groups: Record<string, string[]> = {};\n\n    filteredTags.forEach(tag => {\n      if (isGroupedTag(tag)) {\n        const group = getTagGroup(tag);\n        if (!groups[group]) {\n          groups[group] = [];\n        }\n        groups[group].push(tag);\n      } else {\n        if (!groups['Ungrouped']) {\n          groups['Ungrouped'] = [];\n        }\n        groups['Ungrouped'].push(tag);\n      }\n    });\n\n    return groups;\n  }, [filteredTags]);\n\n  const handleTagEditSuccess = (oldTag: string, newTag: string, tradesUpdated: number) => {\n    console.log(`Tag update completed: ${oldTag} -> ${newTag}, ${tradesUpdated} trades updated`);\n\n    // Check if this was a tag group name change\n    const oldGroup = isGroupedTag(oldTag) ? getTagGroup(oldTag) : null;\n    const newGroup = isGroupedTag(newTag) ? getTagGroup(newTag) : null;\n\n    // If the selected tag group was the old group name, update it to the new group name\n    if (oldGroup && newGroup && oldGroup !== newGroup && selectedTagGroup === oldGroup) {\n      setSelectedTagGroup(newGroup);\n    }\n\n    // Update local required groups if a group name changed\n    if (oldGroup && newGroup && oldGroup !== newGroup) {\n      const updatedRequiredGroups = localRequiredGroups.map(group =>\n        group === oldGroup ? newGroup : group\n      );\n      setLocalRequiredGroups(updatedRequiredGroups);\n    }\n\n    // If the tag was deleted (newTag is empty) and we were filtering by its group,\n    // check if the group still has other tags, if not, reset the filter\n    if (!newTag.trim() && oldGroup && selectedTagGroup === oldGroup) {\n      // We'll let the memoized tagGroups handle this - if the group no longer exists,\n      // the filter will show no results, which is correct behavior\n      // Alternatively, we could reset to show all groups:\n      // setSelectedTagGroup('');\n    }\n\n    if (onTagUpdated) {\n      onTagUpdated(oldTag, newTag);\n    }\n  };\n\n  const handleRequiredTagGroupsChange = (groups: string[]) => {\n    setLocalRequiredGroups(groups);\n\n    if (onUpdateCalendarProperty) {\n      onUpdateCalendarProperty(calendarId, (calendar) => ({\n        ...calendar,\n        requiredTagGroups: groups\n      }));\n    }\n  };\n\n  return (\n    <BaseDialog\n      open={open}\n      onClose={onClose}\n      title=\"Tag Management\"\n      maxWidth=\"md\"\n      fullWidth\n    >\n      <Box sx={{ p: 2 }}>\n        <Box sx={{ mb: 3 }}>\n          <Typography variant=\"body1\" gutterBottom>\n            Manage your tags and set required tag groups for new trades.\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            When a tag group is set as required, every new trade must include at least one tag from this group.\n          </Typography>\n        </Box>\n\n        <Box sx={{ mb: 3 }}>\n          <Typography variant=\"subtitle1\" fontWeight={600} gutterBottom>\n            Required Tag Groups\n          </Typography>\n          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 2 }}>\n            {localRequiredGroups.length > 0 ? (\n              localRequiredGroups.map(group => (\n                <Chip\n                  key={group}\n                  label={group}\n                  color=\"primary\"\n                  variant=\"outlined\"\n                  sx={{ fontWeight: 600 }}\n                />\n              ))\n            ) : (\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                No required tag groups set. Edit a tag group to make it required.\n              </Typography>\n            )}\n          </Box>\n        </Box>\n\n        <Box sx={{ mb: 3 }}>\n          <TextField\n            fullWidth\n            placeholder=\"Search tags...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            InputProps={{\n              startAdornment: (\n                <InputAdornment position=\"start\">\n                  <SearchIcon />\n                </InputAdornment>\n              ),\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                    <FilterListIcon fontSize=\"small\" />\n                    <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%' }}>\n                      <select\n                        value={selectedTagGroup}\n                        onChange={(e) => setSelectedTagGroup(e.target.value)}\n                        style={{\n                          border: 'none',\n                          background: 'transparent',\n                          fontSize: '0.875rem',\n                          color: theme.palette.text.primary,\n                          padding: '4px',\n                          cursor: 'pointer'\n                        }}\n                      >\n                        <option value=\"\">All Groups</option>\n                        {tagGroups.map(group => (\n                          <option key={group} value={group}>{group}</option>\n                        ))}\n                      </select>\n                    </Box>\n                  </Box>\n                </InputAdornment>\n              )\n            }}\n            size=\"small\"\n            sx={{ mb: 2 }}\n          />\n\n          <Box sx={{\n            maxHeight: '400px',\n            overflow: 'auto',\n            border: `1px solid ${theme.palette.divider}`,\n            borderRadius: 1,\n            ...theme.typography.body2,\n            ...scrollbarStyles(theme)\n          }}>\n            {Object.entries(groupedTags).length > 0 ? (\n              Object.entries(groupedTags).map(([group, tags]) => (\n                <Box key={group}>\n                  <Box sx={{\n                    p: 1.5,\n                    bgcolor: alpha(theme.palette.primary.main, 0.05),\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'space-between'\n                  }}>\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                      <Typography variant=\"subtitle2\" fontWeight={600}>\n                        {group}\n                      </Typography>\n                      {group !== 'Ungrouped' && (\n                        <Box sx={{ display: 'flex', alignItems: 'center', ml: 1 }}>\n                          <FormControlLabel\n                            control={\n                              <Switch\n                                checked={localRequiredGroups.includes(group)}\n                                onChange={(e) => {\n                                  const isChecked = e.target.checked;\n                                  const updatedGroups = isChecked\n                                    ? [...localRequiredGroups, group]\n                                    : localRequiredGroups.filter(g => g !== group);\n                                  handleRequiredTagGroupsChange(updatedGroups);\n                                }}\n                                color=\"primary\"\n                                size=\"small\"\n                              />\n                            }\n                            label={\n                              <Typography variant=\"caption\" sx={{ fontWeight: 500 }}>\n                                Required\n                              </Typography>\n                            }\n                          />\n                          <Tooltip title=\"When a tag group is set as required, every new trade must include at least one tag from this group\">\n                            <InfoIcon sx={{ ml: 0.5, color: 'text.secondary', fontSize: '0.875rem' }} />\n                          </Tooltip>\n                        </Box>\n                      )}\n                    </Box>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      {tags.length} tag{tags.length !== 1 ? 's' : ''}\n                    </Typography>\n                  </Box>\n                  <Divider />\n                  <List disablePadding>\n                    {tags.map((tag) => (\n                      <ListItem\n                        key={tag}\n                        secondaryAction={\n                          <Button\n                            color=\"primary\"\n                            sx={{ minWidth: 'auto', p: 0.5 }}\n                            onClick={() => setTagToEdit(tag)}\n                          >\n                            Edit\n                          </Button>\n                      \n                            \n                        }\n                        sx={{\n                          '&:hover': {\n                            bgcolor: alpha(theme.palette.primary.main, 0.05)\n                          }\n                        }}\n                      >\n                        <ListItemText\n                          primary={\n                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                              <Chip\n                                label={formatTagForDisplay(tag,true)}\n                                size=\"small\"\n                                sx={getTagChipStyles(tag, theme)}\n                              />\n                               \n                            </Box>\n                          }\n                        />\n                      </ListItem>\n                    ))}\n                  </List>\n                </Box>\n              ))\n            ) : (\n              <Box sx={{ p: 3, textAlign: 'center' }}>\n                <Typography color=\"text.secondary\">\n                  No tags found matching your search criteria.\n                </Typography>\n              </Box>\n            )}\n          </Box>\n        </Box>\n      </Box>\n\n      {tagToEdit && (\n        <TagEditDialog\n          open={!!tagToEdit}\n          onClose={() => setTagToEdit(null)}\n          tag={tagToEdit}\n          calendarId={calendarId}\n          onSuccess={handleTagEditSuccess}\n        />\n      )}\n    </BaseDialog>\n  );\n};\n\nexport default TagManagementDialog;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport {\n  Box,\n  Typography,\n  List,\n  ListItem,\n  ListItemText,\n  IconButton,\n  Divider,\n  TextField,\n  InputAdornment,\n  Chip,\n  useTheme,\n  alpha,\n  Tooltip,\n  Button,\n  FormControlLabel,\n  Switch,\n  Drawer\n} from '@mui/material';\nimport { scrollbarStyles } from '../styles/scrollbarStyles';\nimport {\n  Edit as EditIcon,\n  Search as SearchIcon,\n  FilterList as FilterListIcon,\n  Info as InfoIcon,\n  Close as CloseIcon,\n  Tag as TagIcon,\n} from '@mui/icons-material';\nimport TagEditDialog from './TagEditDialog';\nimport {\n  getTagChipStyles,\n  formatTagForDisplay,\n  isGroupedTag,\n  getTagGroup,\n  getUniqueTagGroups\n} from '../utils/tagColors';\nimport { Calendar } from '../types/calendar';\n\ninterface TagManagementDrawerProps {\n  open: boolean;\n  onClose: () => void;\n  allTags: string[];\n  calendarId: string;\n  onTagUpdated?: (oldTag: string, newTag: string) => void;\n  requiredTagGroups?: string[];\n  onUpdateCalendarProperty?: (calendarId: string, updateCallback: (calendar: Calendar) => Calendar) => Promise<void>;\n}\n\nconst TagManagementDrawer: React.FC<TagManagementDrawerProps> = ({\n  open,\n  onClose,\n  allTags,\n  calendarId,\n  onTagUpdated,\n  requiredTagGroups = [],\n  onUpdateCalendarProperty\n}) => {\n  const theme = useTheme();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedTagGroup, setSelectedTagGroup] = useState<string>('');\n  const [tagToEdit, setTagToEdit] = useState<string | null>(null);\n  const [localRequiredGroups, setLocalRequiredGroups] = useState<string[]>(requiredTagGroups);\n\n  // Update local state when props change\n  useEffect(() => {\n    setLocalRequiredGroups(requiredTagGroups);\n  }, [requiredTagGroups]);\n\n  // Get all unique tag groups\n  const tagGroups = useMemo(() => {\n    return getUniqueTagGroups(allTags);\n  }, [allTags]);\n\n  // Reset selected tag group if it no longer exists in the available tag groups\n  useEffect(() => {\n    if (selectedTagGroup && !tagGroups.includes(selectedTagGroup)) {\n      setSelectedTagGroup('');\n    }\n  }, [tagGroups, selectedTagGroup]);\n\n  // Filter tags based on search term and selected group\n  const filteredTags = useMemo(() => {\n    let filtered = allTags;\n\n    // Filter by group if selected\n    if (selectedTagGroup) {\n      filtered = filtered.filter(tag =>\n        isGroupedTag(tag) && getTagGroup(tag) === selectedTagGroup\n      );\n    }\n\n    // Filter by search term\n    if (searchTerm) {\n      const term = searchTerm.toLowerCase();\n      filtered = filtered.filter(tag =>\n        tag.toLowerCase().includes(term) ||\n        formatTagForDisplay(tag).toLowerCase().includes(term)\n      );\n    }\n\n    return filtered;\n  }, [allTags, searchTerm, selectedTagGroup]);\n\n  // Group tags by their group\n  const groupedTags = useMemo(() => {\n    const groups: Record<string, string[]> = {};\n\n    filteredTags.forEach(tag => {\n      if (isGroupedTag(tag)) {\n        const group = getTagGroup(tag);\n        if (!groups[group]) {\n          groups[group] = [];\n        }\n        groups[group].push(tag);\n      } else {\n        if (!groups['Ungrouped']) {\n          groups['Ungrouped'] = [];\n        }\n        groups['Ungrouped'].push(tag);\n      }\n    });\n\n    return groups;\n  }, [filteredTags]);\n\n  const handleTagEditSuccess = (oldTag: string, newTag: string, tradesUpdated: number) => {\n    console.log(`Tag update completed: ${oldTag} -> ${newTag}, ${tradesUpdated} trades updated`);\n\n    // Check if this was a tag group name change\n    const oldGroup = isGroupedTag(oldTag) ? getTagGroup(oldTag) : null;\n    const newGroup = isGroupedTag(newTag) ? getTagGroup(newTag) : null;\n\n    // If the selected tag group was the old group name, update it to the new group name\n    if (oldGroup && newGroup && oldGroup !== newGroup && selectedTagGroup === oldGroup) {\n      setSelectedTagGroup(newGroup);\n    }\n\n    // Update local required groups if a group name changed\n    if (oldGroup && newGroup && oldGroup !== newGroup) {\n      const updatedRequiredGroups = localRequiredGroups.map(group =>\n        group === oldGroup ? newGroup : group\n      );\n      setLocalRequiredGroups(updatedRequiredGroups);\n    }\n\n    if (onTagUpdated) {\n      onTagUpdated(oldTag, newTag);\n    }\n  };\n\n  const handleRequiredTagGroupsChange = (groups: string[]) => {\n    setLocalRequiredGroups(groups);\n\n    if (onUpdateCalendarProperty) {\n      onUpdateCalendarProperty(calendarId, (calendar) => ({\n        ...calendar,\n        requiredTagGroups: groups\n      }));\n    }\n  };\n\n  return (\n    <Drawer\n      anchor=\"right\"\n      open={open}\n      onClose={onClose}\n      sx={{\n        zIndex: 1300, // Higher than AppBar (1100) and other components\n        '& .MuiDrawer-paper': {\n          width: { xs: '100%', sm: 500 },\n          maxWidth: '100vw',\n          zIndex: 1300 // Ensure the paper also has high z-index\n        }\n      }}\n    >\n      <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n        {/* Header */}\n        <Box sx={{\n          p: 2,\n          borderBottom: `1px solid ${theme.palette.divider}`,\n          display: 'flex',\n          alignItems: 'center',\n          gap: 2\n        }}>\n          <Box sx={{\n            p: 1,\n            borderRadius: 1,\n            backgroundColor: alpha(theme.palette.primary.main, 0.1),\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center'\n          }}>\n            <TagIcon sx={{ color: 'primary.main', fontSize: 20 }} />\n          </Box>\n          <Typography variant=\"h6\" sx={{ flex: 1, fontWeight: 600 }}>\n            Tag Management\n          </Typography>\n          <IconButton onClick={onClose} size=\"small\">\n            <CloseIcon />\n          </IconButton>\n        </Box>\n\n        {/* Content */}\n        <Box sx={{ flex: 1, p: 2, overflow: 'auto' }}>\n          <Box sx={{ mb: 3 }}>\n            <Typography variant=\"body1\" gutterBottom>\n              Manage your tags and set required tag groups for new trades.\n            </Typography>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              When a tag group is set as required, every new trade must include at least one tag from this group.\n            </Typography>\n          </Box>\n\n          <Box sx={{ mb: 3 }}>\n            <Typography variant=\"subtitle1\" fontWeight={600} gutterBottom>\n              Required Tag Groups\n            </Typography>\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 2 }}>\n              {localRequiredGroups.length > 0 ? (\n                localRequiredGroups.map(group => (\n                  <Chip\n                    key={group}\n                    label={group}\n                    color=\"primary\"\n                    variant=\"outlined\"\n                    sx={{ fontWeight: 600 }}\n                  />\n                ))\n              ) : (\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  No required tag groups set. Edit a tag group to make it required.\n                </Typography>\n              )}\n            </Box>\n          </Box>\n\n          <Box sx={{ mb: 3 }}>\n            <TextField\n              fullWidth\n              placeholder=\"Search tags...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    <SearchIcon />\n                  </InputAdornment>\n                ),\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                      <FilterListIcon fontSize=\"small\" />\n                      <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%' }}>\n                        <select\n                          value={selectedTagGroup}\n                          onChange={(e) => setSelectedTagGroup(e.target.value)}\n                          style={{\n                            border: 'none',\n                            background: 'transparent',\n                            fontSize: '0.875rem',\n                            color: theme.palette.text.primary,\n                            padding: '4px',\n                            cursor: 'pointer'\n                          }}\n                        >\n                          <option value=\"\">All Groups</option>\n                          {tagGroups.map(group => (\n                            <option key={group} value={group}>{group}</option>\n                          ))}\n                        </select>\n                      </Box>\n                    </Box>\n                  </InputAdornment>\n                )\n              }}\n              size=\"small\"\n              sx={{ mb: 2 }}\n            />\n\n            <Box sx={{\n              maxHeight: '400px',\n              overflow: 'auto',\n              border: `1px solid ${theme.palette.divider}`,\n              borderRadius: 1,\n              ...theme.typography.body2,\n              ...scrollbarStyles(theme)\n            }}>\n              {Object.entries(groupedTags).length > 0 ? (\n                Object.entries(groupedTags).map(([group, tags]) => (\n                  <Box key={group}>\n                    <Box sx={{\n                      p: 1.5,\n                      bgcolor: alpha(theme.palette.primary.main, 0.05),\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'space-between'\n                    }}>\n                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                        <Typography variant=\"subtitle2\" fontWeight={600}>\n                          {group}\n                        </Typography>\n                        {group !== 'Ungrouped' && (\n                          <Box sx={{ display: 'flex', alignItems: 'center', ml: 1 }}>\n                            <FormControlLabel\n                              control={\n                                <Switch\n                                  checked={localRequiredGroups.includes(group)}\n                                  onChange={(e) => {\n                                    const isChecked = e.target.checked;\n                                    const updatedGroups = isChecked\n                                      ? [...localRequiredGroups, group]\n                                      : localRequiredGroups.filter(g => g !== group);\n                                    handleRequiredTagGroupsChange(updatedGroups);\n                                  }}\n                                  color=\"primary\"\n                                  size=\"small\"\n                                />\n                              }\n                              label={\n                                <Typography variant=\"caption\" sx={{ fontWeight: 500 }}>\n                                  Required\n                                </Typography>\n                              }\n                            />\n                            <Tooltip title=\"When a tag group is set as required, every new trade must include at least one tag from this group\">\n                              <InfoIcon sx={{ ml: 0.5, color: 'text.secondary', fontSize: '0.875rem' }} />\n                            </Tooltip>\n                          </Box>\n                        )}\n                      </Box>\n                      <Typography variant=\"caption\" color=\"text.secondary\">\n                        {tags.length} tag{tags.length !== 1 ? 's' : ''}\n                      </Typography>\n                    </Box>\n                    <Divider />\n                    <List disablePadding>\n                      {tags.map((tag) => (\n                        <ListItem\n                          key={tag}\n                          secondaryAction={\n                            <Button\n                              color=\"primary\"\n                              sx={{ minWidth: 'auto', p: 0.5 }}\n                              onClick={() => setTagToEdit(tag)}\n                            >\n                              Edit\n                            </Button>\n                          }\n                          sx={{\n                            '&:hover': {\n                              bgcolor: alpha(theme.palette.primary.main, 0.05)\n                            }\n                          }}\n                        >\n                          <ListItemText\n                            primary={\n                              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                                <Chip\n                                  label={formatTagForDisplay(tag, true)}\n                                  size=\"small\"\n                                  sx={getTagChipStyles(tag, theme)}\n                                />\n                              </Box>\n                            }\n                          />\n                        </ListItem>\n                      ))}\n                    </List>\n                  </Box>\n                ))\n              ) : (\n                <Box sx={{ p: 3, textAlign: 'center' }}>\n                  <Typography color=\"text.secondary\">\n                    No tags found matching your search criteria.\n                  </Typography>\n                </Box>\n              )}\n            </Box>\n          </Box>\n        </Box>\n      </Box>\n\n      {tagToEdit && (\n        <TagEditDialog\n          open={!!tagToEdit}\n          onClose={() => setTagToEdit(null)}\n          tag={tagToEdit}\n          calendarId={calendarId}\n          onSuccess={handleTagEditSuccess}\n        />\n      )}\n    </Drawer>\n  );\n};\n\nexport default TagManagementDrawer;\n","import React, { useState, useMemo, useCallback, useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  useTheme,\n  TextField,\n  Drawer,\n  IconButton,\n  alpha,\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemText,\n  Chip,\n  Divider,\n  InputAdornment,\n  CircularProgress,\n  Autocomplete,\n  Button,\n  Collapse,\n  FormControl,\n  FormLabel,\n  RadioGroup,\n  FormControlLabel,\n  Radio\n} from '@mui/material';\nimport {\n  Close as CloseIcon,\n  Search as SearchIcon,\n  TrendingUp as WinIcon,\n  TrendingDown as LossIcon,\n  Remove as BreakevenIcon,\n  CalendarToday as DateIcon,\n  FilterAlt as FilterIcon,\n  ExpandMore as ExpandMoreIcon,\n  ExpandLess as ExpandLessIcon,\n  DateRange as DateRangeIcon\n} from '@mui/icons-material';\nimport { DatePicker } from '@mui/x-date-pickers';\nimport { Trade } from '../types/trade';\nimport { format, isAfter, isBefore, startOfDay, endOfDay } from 'date-fns';\nimport {\n  getTagChipStyles,\n  formatTagForDisplay,\n  isGroupedTag,\n  getTagGroup,\n  getUniqueTagGroups,\n  filterTagsByGroup\n} from '../utils/tagColors';\nimport { SelectInput } from './common';\nimport { scrollbarStyles } from '../styles/scrollbarStyles';\n\ninterface SearchDrawerProps {\n  open: boolean;\n  onClose: () => void;\n  trades: Trade[];\n  allTags: string[];\n  onTradeClick?: (trade: Trade) => void;\n  // Tag filtering props\n  selectedTags?: string[];\n  onTagsChange?: (tags: string[]) => void;\n}\n\n// Date filter types\ntype DateFilterType = 'all' | 'single' | 'range';\n\ninterface DateFilter {\n  type: DateFilterType;\n  startDate: Date | null;\n  endDate: Date | null;\n}\n\n// Debounce hook for search optimization\nconst useDebounce = (value: string, delay: number) => {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n};\n\n// Background search worker function\nconst performSearch = (trades: Trade[], query: string, selectedTags: string[] = [], dateFilter: DateFilter): Trade[] => {\n  // First apply tag filtering if any tags are selected\n  let filteredTrades = trades;\n  if (selectedTags.length > 0) {\n    filteredTrades = trades.filter(trade =>\n      trade.tags?.some(tag => selectedTags.includes(tag))\n    );\n  }\n\n  // Apply date filtering\n  if (dateFilter.type !== 'all') {\n    filteredTrades = filteredTrades.filter(trade => {\n      const tradeDate = new Date(trade.date);\n\n      if (dateFilter.type === 'single' && dateFilter.startDate) {\n        const filterDate = startOfDay(dateFilter.startDate);\n        const endOfFilterDate = endOfDay(dateFilter.startDate);\n        return !isBefore(tradeDate, filterDate) && !isAfter(tradeDate, endOfFilterDate);\n      }\n\n      if (dateFilter.type === 'range' && dateFilter.startDate && dateFilter.endDate) {\n        const startFilterDate = startOfDay(dateFilter.startDate);\n        const endFilterDate = endOfDay(dateFilter.endDate);\n        return !isBefore(tradeDate, startFilterDate) && !isAfter(tradeDate, endFilterDate);\n      }\n\n      return true;\n    });\n  }\n\n  // If no search query, return filtered results\n  if (!query.trim()) {\n    return filteredTrades.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  }\n\n  const lowerQuery = query.toLowerCase();\n\n  // Check if query contains multiple tags (separated by spaces, commas, or semicolons)\n  const searchTerms = lowerQuery\n    .split(/[,;\\s]+/) // Split by comma, semicolon, or whitespace\n    .map(term => term.trim())\n    .filter(term => term.length > 0);\n\n  return filteredTrades.filter(trade => {\n    // For multiple search terms, check if ALL terms match (AND logic)\n    // For single term, use the original OR logic across different fields\n\n    if (searchTerms.length > 1) {\n      // Multiple terms - check if ALL terms are found in the trade's tags\n      return searchTerms.every(term => {\n        if (!trade.tags || trade.tags.length === 0) return false;\n\n        return trade.tags.some(tag =>\n          tag.toLowerCase().includes(term) ||\n          formatTagForDisplay(tag).toLowerCase().includes(term)\n        );\n      });\n    } else {\n      // Single term - search across all fields (original behavior)\n      const term = searchTerms[0];\n\n      // Search by trade name\n      if (trade.name && trade.name.toLowerCase().includes(term)) {\n        return true;\n      }\n\n      // Search by tags\n      if (trade.tags && trade.tags.some(tag =>\n        tag.toLowerCase().includes(term) ||\n        formatTagForDisplay(tag).toLowerCase().includes(term)\n      )) {\n        return true;\n      }\n\n      // Search by notes\n      if (trade.notes && trade.notes.toLowerCase().includes(term)) {\n        return true;\n      }\n\n      // Search by session\n      if (trade.session && trade.session.toLowerCase().includes(term)) {\n        return true;\n      }\n\n      return false;\n    }\n  }).sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()); // Sort by date, newest first\n};\n\n// Background tag suggestion function\nconst getSuggestedTags = (allTags: string[], query: string): string[] => {\n  if (!query.trim()) return [];\n\n  // Get the last term being typed (for multi-tag support)\n  const terms = query.split(/[,;\\s]+/).map(term => term.trim()).filter(term => term.length > 0);\n  const lastTerm = terms[terms.length - 1]?.toLowerCase() || '';\n\n  if (!lastTerm) return [];\n\n  // Filter out tags that are already in the search query\n  const existingTags = terms.slice(0, -1).map(term => term.toLowerCase());\n\n  return allTags\n    .filter(tag => {\n      const lowerTag = tag.toLowerCase();\n      const displayTag = formatTagForDisplay(tag).toLowerCase();\n\n      // Don't suggest tags that are already included\n      if (existingTags.some(existing =>\n        lowerTag.includes(existing) || displayTag.includes(existing)\n      )) {\n        return false;\n      }\n\n      // Match the current term being typed\n      return lowerTag.includes(lastTerm) || displayTag.includes(lastTerm);\n    })\n    .slice(0, 5); // Limit to 5 suggestions\n};\n\nconst SearchDrawer: React.FC<SearchDrawerProps> = ({\n  open,\n  onClose,\n  trades,\n  allTags,\n  onTradeClick,\n  selectedTags = [],\n  onTagsChange\n}) => {\n  const theme = useTheme();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isSearching, setIsSearching] = useState(false);\n  const [filteredTrades, setFilteredTrades] = useState<Trade[]>([]);\n  const [suggestedTags, setSuggestedTags] = useState<string[]>([]);\n\n  // Tag filtering state\n  const [isFilterExpanded, setIsFilterExpanded] = useState(false);\n  const [selectedTagGroup, setSelectedTagGroup] = useState<string>('');\n\n  // Date filtering state\n  const [isDateFilterExpanded, setIsDateFilterExpanded] = useState(false);\n  const [dateFilter, setDateFilter] = useState<DateFilter>({\n    type: 'all',\n    startDate: null,\n    endDate: null\n  });\n\n  // Get all unique tag groups\n  const tagGroups = useMemo(() => {\n    return getUniqueTagGroups(allTags);\n  }, [allTags]);\n\n  // Filter tags by selected group\n  const filteredTagOptions = useMemo(() => {\n    if (!selectedTagGroup) return allTags;\n    return filterTagsByGroup(allTags, selectedTagGroup);\n  }, [allTags, selectedTagGroup]);\n\n  // Debounce search query to avoid excessive calculations\n  const debouncedSearchQuery = useDebounce(searchQuery, 300);\n\n  // Perform search in background when debounced query or selected tags change\n  useEffect(() => {\n    if (!open) return; // Don't search if drawer is closed\n\n    const performBackgroundSearch = async () => {\n      setIsSearching(true);\n\n      // Use setTimeout to move computation to next tick (background)\n      setTimeout(() => {\n        try {\n          const results = performSearch(trades, debouncedSearchQuery, selectedTags, dateFilter);\n          const suggestions = getSuggestedTags(allTags, debouncedSearchQuery);\n\n          setFilteredTrades(results);\n          setSuggestedTags(suggestions);\n        } catch (error) {\n          console.error('Search error:', error);\n          setFilteredTrades([]);\n          setSuggestedTags([]);\n        } finally {\n          setIsSearching(false);\n        }\n      }, 0);\n    };\n\n    performBackgroundSearch();\n  }, [debouncedSearchQuery, selectedTags, dateFilter, trades, allTags, open]);\n\n  // Reset search when drawer closes\n  useEffect(() => {\n    if (!open) {\n      setSearchQuery('');\n      setFilteredTrades([]);\n      setSuggestedTags([]);\n      setIsSearching(false);\n      setSelectedTagGroup('');\n      setIsDateFilterExpanded(false);\n      setDateFilter({\n        type: 'all',\n        startDate: null,\n        endDate: null\n      });\n    }\n  }, [open]);\n\n  // Tag filtering handlers\n  const handleTagsChange = useCallback((tags: string[]) => {\n    onTagsChange?.(tags);\n  }, [onTagsChange]);\n\n  const handleClearTags = useCallback(() => {\n    onTagsChange?.([]);\n  }, [onTagsChange]);\n\n  // Date filtering handlers\n  const handleDateFilterChange = useCallback((type: DateFilterType) => {\n    setDateFilter(prev => ({\n      ...prev,\n      type,\n      // Clear dates when switching to 'all'\n      startDate: type === 'all' ? null : prev.startDate,\n      endDate: type === 'all' ? null : prev.endDate\n    }));\n  }, []);\n\n  const handleStartDateChange = useCallback((date: Date | null) => {\n    setDateFilter(prev => ({\n      ...prev,\n      startDate: date\n    }));\n  }, []);\n\n  const handleEndDateChange = useCallback((date: Date | null) => {\n    setDateFilter(prev => ({\n      ...prev,\n      endDate: date\n    }));\n  }, []);\n\n  const handleClearDateFilter = useCallback(() => {\n    setDateFilter({\n      type: 'all',\n      startDate: null,\n      endDate: null\n    });\n  }, []);\n\n  const getTradeTypeIcon = (type: Trade['type']) => {\n    switch (type) {\n      case 'win':\n        return <WinIcon sx={{ fontSize: 20, color: 'success.main' }} />;\n      case 'loss':\n        return <LossIcon sx={{ fontSize: 20, color: 'error.main' }} />;\n      case 'breakeven':\n        return <BreakevenIcon sx={{ fontSize: 20, color: 'text.secondary' }} />;\n    }\n  };\n\n  const getTradeTypeColor = (type: Trade['type']) => {\n    switch (type) {\n      case 'win':\n        return theme.palette.success.main;\n      case 'loss':\n        return theme.palette.error.main;\n      case 'breakeven':\n        return theme.palette.text.secondary;\n    }\n  };\n\n  const handleTagClick = useCallback((tag: string) => {\n    // Smart tag appending for multi-tag search\n    const currentTerms = searchQuery.split(/[,;\\s]+/).map(term => term.trim()).filter(term => term.length > 0);\n\n    if (currentTerms.length === 0) {\n      // No existing terms, just set the tag\n      setSearchQuery(tag);\n    } else {\n      // Replace the last term (which is being typed) with the selected tag\n      const newTerms = [...currentTerms.slice(0, -1), tag];\n      setSearchQuery(newTerms.join(', ') + ', ');\n    }\n  }, [searchQuery]);\n\n  const handleTradeClick = useCallback((trade: Trade) => {\n    onTradeClick?.(trade);\n    onClose();\n  }, [onTradeClick, onClose]);\n\n  return (\n    <Drawer\n      anchor=\"right\"\n      open={open}\n      onClose={onClose}\n      sx={{\n        zIndex: 1300, // Higher than AppBar (1100) and other components\n        '& .MuiDrawer-paper': {\n          width: { xs: '100%', sm: 450 },\n          maxWidth: '100vw',\n          zIndex: 1300 // Ensure the paper also has high z-index\n        }\n      }}\n    >\n      <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n        {/* Header */}\n        <Box sx={{\n          p: 2,\n          borderBottom: `1px solid ${theme.palette.divider}`,\n          display: 'flex',\n          alignItems: 'center',\n          gap: 2\n        }}>\n          <Box sx={{\n            p: 1,\n            borderRadius: 1,\n            backgroundColor: alpha(theme.palette.primary.main, 0.1),\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center'\n          }}>\n            <SearchIcon sx={{ color: 'primary.main', fontSize: 20 }} />\n          </Box>\n          <Typography variant=\"h6\" sx={{ flex: 1, fontWeight: 600 }}>\n            Search & Filter Trades\n          </Typography>\n          <IconButton onClick={onClose} size=\"small\">\n            <CloseIcon />\n          </IconButton>\n        </Box>\n\n        {/* Search Input */}\n        <Box sx={{ p: 2, borderBottom: `1px solid ${theme.palette.divider}` }}>\n          <TextField\n            fullWidth\n            placeholder=\"Search by name, tags, notes, or session...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            slotProps={{\n              input: {\n                startAdornment: (\n                  <InputAdornment position=\"start\">\n                    {isSearching ? (\n                      <CircularProgress size={20} sx={{ color: 'text.secondary' }} />\n                    ) : (\n                      <SearchIcon sx={{ color: 'text.secondary' }} />\n                    )}\n                  </InputAdornment>\n                )\n              }\n            }}\n            variant=\"outlined\"\n            size=\"small\"\n          />\n          <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 1, display: 'block' }}>\n            💡 Use multiple tags separated by spaces, commas, or semicolons to find trades with ALL specified tags\n          </Typography>\n        </Box>\n\n        {/* Tag Filter Section */}\n        {onTagsChange && (\n          <Box sx={{ borderBottom: `1px solid ${theme.palette.divider}` }}>\n            <Box sx={{ p: 2, pb: 1 }}>\n              <Box sx={{\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'space-between',\n                color: selectedTags.length > 0 ? 'primary.main' : 'text.secondary',\n                fontWeight: selectedTags.length > 0 ? 600 : 400\n              }}>\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, flex: 1 }}>\n                  <FilterIcon sx={{ fontSize: 20 }} />\n                  <Typography variant=\"body2\">\n                    Filter by Tags\n                  </Typography>\n                  {selectedTags.length > 0 && (\n                    <Chip\n                      label={`${selectedTags.length} selected`}\n                      size=\"small\"\n                      color=\"primary\"\n                      variant=\"outlined\"\n                      sx={{ height: 20, fontSize: '0.7rem' }}\n                    />\n                  )}\n                </Box>\n                <IconButton\n                  onClick={() => setIsFilterExpanded(!isFilterExpanded)}\n                  size=\"small\"\n                  sx={{\n                    color: 'inherit',\n                    '&:hover': {\n                      backgroundColor: alpha(theme.palette.primary.main, 0.1)\n                    }\n                  }}\n                >\n                  {isFilterExpanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n                </IconButton>\n              </Box>\n            </Box>\n\n            <Collapse in={isFilterExpanded}>\n              <Box sx={{ px: 2, pb: 2 }}>\n                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n                  {tagGroups.length > 0 && (\n                    <SelectInput\n                      label=\"Filter by Tag Group\"\n                      value={selectedTagGroup}\n                      onChange={(e) => setSelectedTagGroup(e.target.value as string)}\n                      options={[\n                        { value: \"\", label: \"All Tags\" },\n                        ...tagGroups.map(group => ({ value: group, label: group }))\n                      ]}\n                      size=\"small\"\n                    />\n                  )}\n\n                  <Autocomplete\n                    multiple\n                    options={filteredTagOptions}\n                    value={selectedTags}\n                    onChange={(_, newValue) => handleTagsChange(newValue)}\n                    slotProps={{\n                      listbox: {\n                        sx: {\n                          ...scrollbarStyles(theme)\n                        }\n                      }\n                    }}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        variant=\"outlined\"\n                        label=\"Select Tags\"\n                        placeholder=\"Choose tags to filter\"\n                        fullWidth\n                        size=\"small\"\n                      />\n                    )}\n                    renderTags={(value, getTagProps) =>\n                      value.map((option, index) => (\n                        <Chip\n                          label={formatTagForDisplay(option, true)}\n                          {...getTagProps({ index })}\n                          sx={getTagChipStyles(option, theme)}\n                          title={isGroupedTag(option) ? `Group: ${getTagGroup(option)}` : undefined}\n                        />\n                      ))\n                    }\n                    renderOption={(props, option) => (\n                      <li {...props}>\n                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                          {isGroupedTag(option) && (\n                            <Chip\n                              label={getTagGroup(option)}\n                              size=\"small\"\n                              sx={{\n                                ...getTagChipStyles(option, theme),\n                                height: '18px',\n                                fontSize: '0.7rem'\n                              }}\n                            />\n                          )}\n                          {formatTagForDisplay(option, true)}\n                        </Box>\n                      </li>\n                    )}\n                  />\n\n                  {selectedTags.length > 0 && (\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        {selectedTags.length} tag{selectedTags.length > 1 ? 's' : ''} selected\n                      </Typography>\n                      <Button onClick={handleClearTags} size=\"small\" color=\"inherit\">\n                        Clear All\n                      </Button>\n                    </Box>\n                  )}\n                </Box>\n              </Box>\n            </Collapse>\n          </Box>\n        )}\n\n        {/* Date Filter Section */}\n        <Box sx={{ borderBottom: `1px solid ${theme.palette.divider}` }}>\n          <Box sx={{ p: 2, pb: 1 }}>\n            <Box sx={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'space-between',\n              color: dateFilter.type !== 'all' ? 'primary.main' : 'text.secondary',\n              fontWeight: dateFilter.type !== 'all' ? 600 : 400\n            }}>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, flex: 1 }}>\n                <DateRangeIcon sx={{ fontSize: 20 }} />\n                <Typography variant=\"body2\">\n                  Filter by Date\n                </Typography>\n                {dateFilter.type !== 'all' && (\n                  <Chip\n                    label={\n                      dateFilter.type === 'single'\n                        ? 'Single Date'\n                        : dateFilter.type === 'range'\n                        ? 'Date Range'\n                        : ''\n                    }\n                    size=\"small\"\n                    color=\"primary\"\n                    variant=\"outlined\"\n                    sx={{ height: 20, fontSize: '0.7rem' }}\n                  />\n                )}\n              </Box>\n              <IconButton\n                onClick={() => setIsDateFilterExpanded(!isDateFilterExpanded)}\n                size=\"small\"\n                sx={{\n                  color: 'inherit',\n                  '&:hover': {\n                    backgroundColor: alpha(theme.palette.primary.main, 0.1)\n                  }\n                }}\n              >\n                {isDateFilterExpanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n              </IconButton>\n            </Box>\n          </Box>\n\n          <Collapse in={isDateFilterExpanded}>\n            <Box sx={{ px: 2, pb: 2 }}>\n              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n                <FormControl component=\"fieldset\" sx={{ width: '100%' }}>\n                  <RadioGroup\n                    value={dateFilter.type}\n                    onChange={(e) => handleDateFilterChange(e.target.value as DateFilterType)}\n                    sx={{ gap: 1 }}\n                  >\n                    <FormControlLabel\n                      value=\"all\"\n                      control={<Radio size=\"small\" />}\n                      label=\"All dates\"\n                      sx={{ margin: 0 }}\n                    />\n                    <FormControlLabel\n                      value=\"single\"\n                      control={<Radio size=\"small\" />}\n                      label=\"Specific date\"\n                      sx={{ margin: 0 }}\n                    />\n                    <FormControlLabel\n                      value=\"range\"\n                      control={<Radio size=\"small\" />}\n                      label=\"Date range\"\n                      sx={{ margin: 0 }}\n                    />\n                  </RadioGroup>\n                </FormControl>\n\n                {/* Date Pickers */}\n                {dateFilter.type === 'single' && (\n                  <DatePicker\n                    label=\"Select Date\"\n                    value={dateFilter.startDate}\n                    onChange={handleStartDateChange}\n                    slotProps={{\n                      textField: {\n                        fullWidth: true,\n                        size: 'small'\n                      }\n                    }}\n                  />\n                )}\n\n                {dateFilter.type === 'range' && (\n                  <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n                    <DatePicker\n                      label=\"Start Date\"\n                      value={dateFilter.startDate}\n                      onChange={handleStartDateChange}\n                      slotProps={{\n                        textField: {\n                          fullWidth: true,\n                          size: 'small'\n                        }\n                      }}\n                    />\n                    <DatePicker\n                      label=\"End Date\"\n                      value={dateFilter.endDate}\n                      onChange={handleEndDateChange}\n                      minDate={dateFilter.startDate || undefined}\n                      slotProps={{\n                        textField: {\n                          fullWidth: true,\n                          size: 'small'\n                        }\n                      }}\n                    />\n                  </Box>\n                )}\n\n                {/* Date Filter Summary and Clear Button */}\n                {dateFilter.type !== 'all' && (\n                  <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\n                    {/* Summary */}\n                    <Box sx={{ p: 1.5, bgcolor: alpha(theme.palette.primary.main, 0.05), borderRadius: 1 }}>\n                      <Typography variant=\"body2\" color=\"text.secondary\">\n                        {dateFilter.type === 'single' && dateFilter.startDate && (\n                          <>Showing trades from: <strong>{format(dateFilter.startDate, 'MMM dd, yyyy')}</strong></>\n                        )}\n                        {dateFilter.type === 'range' && dateFilter.startDate && dateFilter.endDate && (\n                          <>\n                            Showing trades from: <strong>{format(dateFilter.startDate, 'MMM dd, yyyy')}</strong> to <strong>{format(dateFilter.endDate, 'MMM dd, yyyy')}</strong>\n                          </>\n                        )}\n                        {dateFilter.type === 'range' && dateFilter.startDate && !dateFilter.endDate && (\n                          <>Showing trades from: <strong>{format(dateFilter.startDate, 'MMM dd, yyyy')}</strong> onwards</>\n                        )}\n                      </Typography>\n                    </Box>\n\n                    {/* Clear Button */}\n                    <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>\n                      <Button onClick={handleClearDateFilter} size=\"small\" color=\"inherit\">\n                        Clear Date Filter\n                      </Button>\n                    </Box>\n                  </Box>\n                )}\n              </Box>\n            </Box>\n          </Collapse>\n        </Box>\n\n        {/* Content */}\n        <Box sx={{\n          flex: 1,\n          overflow: 'auto',\n          ...scrollbarStyles(theme)\n        }}>\n          {/* Tag Suggestions */}\n          {suggestedTags.length > 0 && (\n            <Box sx={{ p: 2, borderBottom: `1px solid ${theme.palette.divider}` }}>\n              <Typography variant=\"subtitle2\" sx={{ mb: 1, fontWeight: 600 }}>\n                Tag Suggestions\n              </Typography>\n              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\n                {suggestedTags.map((tag) => (\n                  <Chip\n                    key={tag}\n                    label={formatTagForDisplay(tag, true)}\n                    size=\"small\"\n                    clickable\n                    onClick={() => handleTagClick(tag)}\n                    sx={{\n                      ...getTagChipStyles(tag, theme),\n                      '&:hover': {\n                        backgroundColor: alpha(theme.palette.primary.main, 0.1)\n                      }\n                    }}\n                  />\n                ))}\n              </Box>\n            </Box>\n          )}\n\n          {/* Search Results */}\n          {(searchQuery.trim() || selectedTags.length > 0 || dateFilter.type !== 'all') && (\n            <Box sx={{ p: 2 }}>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1, flexWrap: 'wrap' }}>\n                <Typography variant=\"subtitle2\" sx={{ fontWeight: 600 }}>\n                  {searchQuery.trim() ? 'Search Results' : 'Filtered Results'} {!isSearching && `(${filteredTrades.length})`}\n                </Typography>\n                {(() => {\n                  const terms = searchQuery.split(/[,;\\s]+/).map(term => term.trim()).filter(term => term.length > 0);\n                  if (terms.length > 1) {\n                    return (\n                      <Chip\n                        label={`${terms.length} search terms (AND)`}\n                        size=\"small\"\n                        color=\"primary\"\n                        variant=\"outlined\"\n                        sx={{ fontSize: '0.7rem', height: 20 }}\n                      />\n                    );\n                  }\n                  return null;\n                })()}\n                {selectedTags.length > 0 && (\n                  <Chip\n                    label={`${selectedTags.length} tag filter${selectedTags.length > 1 ? 's' : ''}`}\n                    size=\"small\"\n                    color=\"secondary\"\n                    variant=\"outlined\"\n                    sx={{ fontSize: '0.7rem', height: 20 }}\n                  />\n                )}\n                {dateFilter.type !== 'all' && (\n                  <Chip\n                    label={`${dateFilter.type === 'single' ? 'Single date' : 'Date range'} filter`}\n                    size=\"small\"\n                    color=\"info\"\n                    variant=\"outlined\"\n                    sx={{ fontSize: '0.7rem', height: 20 }}\n                  />\n                )}\n              </Box>\n\n              {isSearching ? (\n                <Box sx={{ textAlign: 'center', py: 4 }}>\n                  <CircularProgress size={40} sx={{ mb: 2 }} />\n                  <Typography variant=\"body1\" color=\"text.secondary\">\n                    Searching trades...\n                  </Typography>\n                </Box>\n              ) : filteredTrades.length === 0 ? (\n                <Box sx={{ textAlign: 'center', py: 4 }}>\n                  <SearchIcon sx={{ fontSize: 48, color: 'text.disabled', mb: 2 }} />\n                  <Typography variant=\"body1\" color=\"text.secondary\">\n                    No trades found\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Try searching with different keywords\n                  </Typography>\n                </Box>\n              ) : (\n                <List sx={{\n                  p: 0,\n                  ...scrollbarStyles(theme)\n                }}>\n                  {filteredTrades.map((trade, index) => (\n                    <React.Fragment key={trade.id}>\n                      <ListItem disablePadding>\n                        <ListItemButton\n                          onClick={() => handleTradeClick(trade)}\n                          sx={{\n                            p: 2,\n                            '&:hover': {\n                              backgroundColor: alpha(theme.palette.primary.main, 0.05)\n                            }\n                          }}\n                        >\n                          <Box sx={{ display: 'flex', alignItems: 'flex-start', gap: 1.5, width: '100%' }}>\n                            {/* Trade Type Icon */}\n                            <Box sx={{ mt: 0.5 }}>\n                              {getTradeTypeIcon(trade.type)}\n                            </Box>\n\n                            {/* Trade Content */}\n                            <Box sx={{ flex: 1, minWidth: 0 }}>\n                              <ListItemText\n                                primary={\n                                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 0.5 }}>\n                                    <Typography\n                                      variant=\"subtitle1\"\n                                      sx={{\n                                        fontWeight: 600,\n                                        color: 'text.primary',\n                                        overflow: 'hidden',\n                                        textOverflow: 'ellipsis',\n                                        whiteSpace: 'nowrap',\n                                        flex: 1,\n                                        mr: 1\n                                      }}\n                                    >\n                                      {trade.name || `Trade ${trade.id.slice(-6)}`}\n                                    </Typography>\n                                    <Typography\n                                      variant=\"subtitle1\"\n                                      sx={{\n                                        fontWeight: 700,\n                                        color: getTradeTypeColor(trade.type),\n                                        whiteSpace: 'nowrap'\n                                      }}\n                                    >\n                                      {trade.amount > 0 ? '+' : ''}${Math.abs(trade.amount).toFixed(2)}\n                                    </Typography>\n                                  </Box>\n                                }\n                                secondary={\n                                  <Box>\n                                    {/* Date and Session */}\n                                    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>\n                                      <DateIcon sx={{ fontSize: 16, color: 'text.secondary' }} />\n                                      <Typography variant=\"body2\" color=\"text.secondary\">\n                                        {format(new Date(trade.date), 'MMM dd, yyyy')}\n                                      </Typography>\n                                      {trade.session && (\n                                        <Chip\n                                          label={trade.session}\n                                          size=\"small\"\n                                          variant=\"outlined\"\n                                          sx={{\n                                            height: 20,\n                                            fontSize: '0.7rem',\n                                            borderColor: alpha(theme.palette.text.secondary, 0.3),\n                                            color: 'text.secondary'\n                                          }}\n                                        />\n                                      )}\n                                    </Box>\n\n                                    {/* Tags */}\n                                    {trade.tags && trade.tags.length > 0 && (\n                                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                                        {trade.tags.slice(0, 3).map((tag) => (\n                                          <Chip\n                                            key={tag}\n                                            label={formatTagForDisplay(tag, true)}\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            sx={{\n                                              height: 20,\n                                              fontSize: '0.7rem',\n                                              ...getTagChipStyles(tag, theme)\n                                            }}\n                                          />\n                                        ))}\n                                        {trade.tags.length > 3 && (\n                                          <Chip\n                                            label={`+${trade.tags.length - 3}`}\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            sx={{\n                                              height: 20,\n                                              fontSize: '0.7rem',\n                                              borderColor: alpha(theme.palette.text.secondary, 0.3),\n                                              color: 'text.secondary'\n                                            }}\n                                          />\n                                        )}\n                                      </Box>\n                                    )}\n                                  </Box>\n                                }\n                              />\n                            </Box>\n                          </Box>\n                        </ListItemButton>\n                      </ListItem>\n                      {index < filteredTrades.length - 1 && <Divider />}\n                    </React.Fragment>\n                  ))}\n                </List>\n              )}\n            </Box>\n          )}\n\n          {/* Empty State */}\n          {!searchQuery.trim() && selectedTags.length === 0 && dateFilter.type === 'all' && (\n            <Box sx={{ textAlign: 'center', py: 6, px: 3 }}>\n              <SearchIcon sx={{ fontSize: 64, color: 'text.disabled', mb: 2 }} />\n              <Typography variant=\"h6\" sx={{ mb: 1, fontWeight: 600, color: 'text.secondary' }}>\n                Search Your Trades\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ textAlign: 'center', maxWidth: 400, mx: 'auto', mb: 2 }}>\n                Search by trade name, tags, notes, or session. Use tag and date filters to narrow down results.\n              </Typography>\n              <Box sx={{ textAlign: 'left', maxWidth: 400, mx: 'auto' }}>\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 1, fontWeight: 600 }}>\n                  Examples:\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 0.5 }}>\n                  • <code>scalping</code> - Find trades with \"scalping\" tag\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 0.5 }}>\n                  • <code>scalping, morning</code> - Find trades with BOTH tags\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 0.5 }}>\n                  • <code>EURUSD breakout</code> - Find trades with both terms\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 0.5 }}>\n                  • Use tag filters to show trades with specific tags\n                </Typography>\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  • Use date filters to show trades from specific dates or ranges\n                </Typography>\n              </Box>\n            </Box>\n          )}\n        </Box>\n      </Box>\n    </Drawer>\n  );\n};\n\nexport default SearchDrawer;\n","import { Box } from '@mui/material';\nimport { styled } from '@mui/material/styles';\n\nexport const CalendarGrid = styled(Box)(({ theme }) => ({\n  display: 'grid',\n  gridTemplateColumns: 'repeat(7, 1fr)',\n  gap: theme.spacing(1),\n  padding: theme.spacing(2),\n  backgroundColor: theme.palette.background.paper,\n  borderRadius: theme.shape.borderRadius,\n  boxShadow: theme.shadows[1],\n  width: '100%',\n  minHeight: '600px',\n  alignContent: 'start'\n}));\n\nexport const CalendarCell = styled(Box)(({ theme }) => ({\n  aspectRatio: '1',\n  \n  minHeight: '30px',\n  borderRadius: theme.shape.borderRadius,\n  overflow: 'hidden',\n  backgroundColor: theme.palette.background.default,\n  border: `1px solid ${theme.palette.divider}`,\n}));\n\nexport const WeekdayHeader = styled(Box)(({ theme }) => ({\n  padding: theme.spacing(1),\n  textAlign: 'center',\n  color: theme.palette.text.secondary,\n  fontSize: '0.875rem',\n  fontWeight: 500,\n  border: `1px solid ${theme.palette.divider}`,\n  backgroundColor: theme.palette.background.default,\n  borderRadius: theme.shape.borderRadius,\n})); ","import React, { useState, useEffect } from 'react';\nimport {\n  Typography,\n  Box,\n  useTheme,\n  alpha\n} from '@mui/material';\nimport { EventNote as EventNoteIcon } from '@mui/icons-material';\nimport RichTextEditor from './common/RichTextEditor';\nimport { Calendar } from '../types/calendar';\nimport { BaseDialog } from './common';\n\ninterface DayNotesDialogProps {\n  open: boolean;\n  onClose: () => void;\n  day: string;\n  notes: string;\n  calendarId: string;\n  onUpdateCalendarProperty?: (calendarId: string, updateCallback: (calendar: Calendar) => Calendar) => Promise<void>;\n  // Optional props for trade link navigation\n  trades?: Array<{ id: string; [key: string]: any }>;\n  onOpenGalleryMode?: (trades: any[], initialTradeId?: string, title?: string) => void;\n}\n\nconst DayNotesDialog: React.FC<DayNotesDialogProps> = ({\n  open,\n  onClose,\n  day,\n  notes,\n  calendarId,\n  onUpdateCalendarProperty,\n  trades,\n  onOpenGalleryMode\n}) => {\n  const [currentNotes, setCurrentNotes] = useState(notes);\n  const [isSaving, setIsSaving] = useState(false);\n  const [hasChanges, setHasChanges] = useState(false);\n\n  // Update local state when props change\n  useEffect(() => {\n    setCurrentNotes(notes);\n    setHasChanges(false);\n  }, [notes, day]);\n\n  const handleNotesChange = (value: string) => {\n    setCurrentNotes(value);\n    setHasChanges(true);\n  };\n\n  const handleSave = async () => {\n    if (!hasChanges) {\n      onClose();\n      return;\n    }\n\n    setIsSaving(true);\n    try {\n      if (!onUpdateCalendarProperty) {\n        throw new Error('onUpdateCalendarProperty is undefined');\n      }\n\n      await onUpdateCalendarProperty(calendarId, (calendar) => {\n        // Create a new Map from the existing daysNotes or a new empty Map\n        const daysNotesMap = calendar.daysNotes ? new Map(calendar.daysNotes) : new Map<string, string>();\n\n        // Set the notes for this day - ensure consistent key format\n        const dayKey = day.toString();\n        daysNotesMap.set(dayKey, currentNotes);\n\n        return {\n          ...calendar,\n          daysNotes: daysNotesMap\n        };\n      });\n\n      setHasChanges(false);\n      onClose();\n    } catch (error) {\n      console.error('Error saving notes:', error);\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const theme = useTheme();\n  const dayFullName =\n    day === 'Sun' ? 'Sunday' :\n    day === 'Mon' ? 'Monday' :\n    day === 'Tue' ? 'Tuesday' :\n    day === 'Wed' ? 'Wednesday' :\n    day === 'Thu' ? 'Thursday' :\n    day === 'Fri' ? 'Friday' :\n    day === 'Sat' ? 'Saturday' : day;\n\n  // Create a custom title with icon\n  const dialogTitle = (\n    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1.5 }}>\n      <Box\n        sx={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          width: 40,\n          height: 40,\n          borderRadius: '50%',\n          backgroundColor: alpha(theme.palette.primary.main, 0.1),\n          color: theme.palette.primary.main\n        }}\n      >\n        <EventNoteIcon />\n      </Box>\n      <Typography variant=\"h6\" component=\"div\" sx={{ fontWeight: 600 }}>\n        Notes for {dayFullName}\n      </Typography>\n    </Box>\n  );\n\n  return (\n    <BaseDialog\n      open={open}\n      onClose={() => {\n        if (!isSaving) onClose();\n      }}\n      maxWidth=\"md\"\n      fullWidth\n      title={dialogTitle}\n      hideCloseButton={isSaving}\n      hideFooterCancelButton={false}\n      cancelButtonText=\"Cancel\"\n      cancelButtonAction={onClose}\n      primaryButtonText={isSaving ? 'Saving...' : 'Save Notes'}\n      primaryButtonAction={hasChanges ? handleSave : undefined}\n      isSubmitting={isSaving}\n      contentSx={{\n        minHeight: 350,\n        p: 3\n      }}\n    >\n      <Box sx={{\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column'\n      }}>\n        <RichTextEditor\n          value={currentNotes}\n          onChange={handleNotesChange}\n          placeholder=\"Add notes for this day...\"\n          minHeight={300}\n          calendarId={calendarId}\n          trades={trades}\n          onOpenGalleryMode={onOpenGalleryMode}\n        />\n      </Box>\n    </BaseDialog>\n  );\n};\n\nexport default DayNotesDialog;\n","import { Trade } from '../types/trade';\r\nimport { format, parse } from 'date-fns';\r\nimport * as XLSX from 'xlsx';\r\n\r\n// Helper function to prepare trade data for export\r\nconst prepareTradeDataForExport = (trades: Trade[], initialBalance: number = 0) => {\r\n  // Sort trades by date\r\n  const sortedTrades = [...trades].sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\r\n\r\n  // Calculate cumulative P&L and account balance\r\n  let cumulativePnL = 0;\r\n  let currentBalance = initialBalance;\r\n  const tradesWithBalances = sortedTrades.map(trade => {\r\n    cumulativePnL += trade.amount;\r\n    currentBalance += trade.amount;\r\n    return {\r\n      ...trade,\r\n      cumulativePnL,\r\n      accountBalance: currentBalance\r\n    };\r\n  });\r\n\r\n  // Transform trades into a format suitable for export\r\n  return tradesWithBalances.map(trade => ({\r\n    Date: format(new Date(trade.date), 'MM/dd/yyyy'),\r\n    Name: trade.name ? trade.name : '',\r\n    Type: trade.type.charAt(0).toUpperCase() + trade.type.slice(1),\r\n    Amount: trade.amount,\r\n    'P&L': trade.amount > 0 ? `+${trade.amount.toFixed(2)}` : trade.amount.toFixed(2),\r\n    'Cumulative P&L': trade.cumulativePnL > 0 ? `+${trade.cumulativePnL.toFixed(2)}` : trade.cumulativePnL.toFixed(2),\r\n    'Account Balance': trade.accountBalance.toFixed(2),\r\n    'Entry Price': trade.entry || '',\r\n    'Exit Price': trade.exit || '',\r\n    Tags: trade.tags?.join(', ') || '',\r\n    'Risk to Reward': trade.riskToReward?.toFixed(2) || '',\r\n    Session: trade.session || '',\r\n    Notes: trade.notes || ''\r\n  }));\r\n};\r\n\r\n// Export trades to Excel format\r\nconst exportToExcel = (data: any[], fileName: string): void => {\r\n  // Create workbook and worksheet\r\n  const wb = XLSX.utils.book_new();\r\n  const ws = XLSX.utils.json_to_sheet(data);\r\n\r\n  // Set column widths\r\n  const colWidths = [\r\n    { wch: 12 }, // Date\r\n    { wch: 25 }, // Name\r\n    { wch: 8 },  // Type\r\n    { wch: 10 }, // Amount\r\n    { wch: 10 }, // P&L\r\n    { wch: 15 }, // Cumulative P&L\r\n    { wch: 15 }, // Account Balance\r\n    { wch: 15 }, // Entry Price\r\n    { wch: 15 }, // Exit Price\r\n    { wch: 30 }, // Tags\r\n    { wch: 12 }, // Risk to Reward\r\n    { wch: 12 }, // Session\r\n    { wch: 50 }  // Notes\r\n  ];\r\n  ws['!cols'] = colWidths;\r\n\r\n  // Add the worksheet to the workbook\r\n  XLSX.utils.book_append_sheet(wb, ws, 'Trades');\r\n\r\n  // Generate Excel file\r\n  XLSX.writeFile(wb, fileName);\r\n};\r\n\r\n// Export trades to CSV format\r\nconst exportToCsv = (data: any[], fileName: string): void => {\r\n  // Convert data to CSV string\r\n  const headers = Object.keys(data[0]);\r\n  const csvRows = [];\r\n\r\n  // Add header row\r\n  csvRows.push(headers.join(','));\r\n\r\n  // Add data rows\r\n  for (const row of data) {\r\n    const values = headers.map(header => {\r\n      const value = row[header];\r\n      // Handle values that need to be quoted (contain commas, quotes, or newlines)\r\n      const escaped = String(value).replace(/\"/g, '\"\"');\r\n      if (escaped.includes(',') || escaped.includes('\"') || escaped.includes('\\n')) {\r\n        return `\"${escaped}\"`;\r\n      }\r\n      return value;\r\n    });\r\n    csvRows.push(values.join(','));\r\n  }\r\n\r\n  // Create CSV content\r\n  const csvContent = csvRows.join('\\n');\r\n\r\n  // Create a blob and download the file\r\n  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n  const url = URL.createObjectURL(blob);\r\n  const link = document.createElement('a');\r\n  link.setAttribute('href', url);\r\n  link.setAttribute('download', fileName);\r\n  link.style.visibility = 'hidden';\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n};\r\n\r\n// Main export function that supports both Excel and CSV formats\r\nexport const exportTrades = (trades: Trade[], initialBalance: number = 0, fileFormat: 'xlsx' | 'csv' = 'xlsx'): void => {\r\n  if (trades.length === 0) return;\r\n\r\n  // Prepare data for export\r\n  const exportData = prepareTradeDataForExport(trades, initialBalance);\r\n\r\n  // Generate file name with current date\r\n  const dateStr = format(new Date(), 'yyyy-MM-dd');\r\n  const fileName = `trades_${dateStr}.${fileFormat}`;\r\n\r\n  // Export in the requested format\r\n  if (fileFormat === 'xlsx') {\r\n    exportToExcel(exportData, fileName);\r\n  } else {\r\n    exportToCsv(exportData, fileName);\r\n  }\r\n};\r\n\r\n// Import trades from Excel format\r\nconst importFromExcel = async (data: ArrayBuffer): Promise<Trade[]> => {\r\n  try {\r\n    const workbook = XLSX.read(new Uint8Array(data), { type: 'array' });\r\n\r\n    // Check if the workbook has any sheets\r\n    if (!workbook.SheetNames || workbook.SheetNames.length === 0) {\r\n      throw new Error('Excel file does not contain any sheets');\r\n    }\r\n\r\n    const worksheet = workbook.Sheets[workbook.SheetNames[0]];\r\n\r\n    // Check if the worksheet exists\r\n    if (!worksheet) {\r\n      throw new Error('Excel sheet is empty or invalid');\r\n    }\r\n\r\n    const jsonData = XLSX.utils.sheet_to_json(worksheet);\r\n\r\n    // Check if we have any data\r\n    if (!jsonData || jsonData.length === 0) {\r\n      throw new Error('No data found in the Excel file');\r\n    }\r\n\r\n    // Check if we have the required Date column\r\n    const firstRow = jsonData[0] as any;\r\n    if (!firstRow.Date) {\r\n      throw new Error('Excel file must contain a \"Date\" column');\r\n    }\r\n\r\n    try {\r\n      return parseTradeData(jsonData);\r\n    } catch (parseError) {\r\n      console.error('Trade data parsing error:', parseError);\r\n      // Provide more specific error messages for common issues\r\n      if (parseError instanceof Error) {\r\n        if (parseError.message.includes('Invalid time value')) {\r\n          throw new Error('Could not parse one or more dates in the Excel file. Please ensure dates are in a standard format like \"MM/DD/YYYY\" or \"Month Day, Year\".');\r\n        }\r\n        throw parseError;\r\n      }\r\n      throw new Error('Failed to parse trade data from Excel file.');\r\n    }\r\n  } catch (error) {\r\n    console.error('Excel parsing error:', error);\r\n    throw error; // Re-throw to be handled by the caller\r\n  }\r\n};\r\n\r\n// Import trades from CSV format\r\nconst importFromCsv = async (data: string): Promise<Trade[]> => {\r\n  try {\r\n    // Parse CSV string to JSON\r\n    const rows = data.split('\\n');\r\n\r\n    // Check if we have at least a header row\r\n    if (rows.length === 0) {\r\n      throw new Error('CSV file is empty');\r\n    }\r\n\r\n    // Parse headers\r\n    const headers = rows[0].split(',').map(header => {\r\n      // Remove quotes if present\r\n      return header.replace(/^\"|\"$/g, '').trim();\r\n    });\r\n\r\n    // Check if we have the required Date header\r\n    if (!headers.includes('Date')) {\r\n      throw new Error('CSV file must contain a \"Date\" column');\r\n    }\r\n\r\n    const jsonData = [];\r\n\r\n    for (let i = 1; i < rows.length; i++) {\r\n      if (!rows[i].trim()) continue; // Skip empty rows\r\n\r\n      // Handle quoted values with commas inside\r\n      const values = [];\r\n      let inQuotes = false;\r\n      let currentValue = '';\r\n\r\n      try {\r\n        for (let j = 0; j < rows[i].length; j++) {\r\n          const char = rows[i][j];\r\n\r\n          if (char === '\"') {\r\n            inQuotes = !inQuotes;\r\n          } else if (char === ',' && !inQuotes) {\r\n            values.push(currentValue);\r\n            currentValue = '';\r\n          } else {\r\n            currentValue += char;\r\n          }\r\n        }\r\n\r\n        // Add the last value\r\n        values.push(currentValue);\r\n\r\n        // Create object from headers and values\r\n        const obj: any = {};\r\n        for (let j = 0; j < headers.length; j++) {\r\n          if (j < values.length) {\r\n            // Remove quotes if present\r\n            obj[headers[j]] = values[j].replace(/^\"|\"$/g, '').trim();\r\n          }\r\n        }\r\n\r\n        // Only add rows that have a Date value\r\n        if (obj.Date) {\r\n          jsonData.push(obj);\r\n        }\r\n      } catch (error) {\r\n        console.warn(`Skipping row ${i} due to parsing error:`, error);\r\n        // Continue with the next row\r\n      }\r\n    }\r\n\r\n    if (jsonData.length === 0) {\r\n      throw new Error('No valid data rows found in the CSV file');\r\n    }\r\n\r\n    try {\r\n      return parseTradeData(jsonData);\r\n    } catch (parseError) {\r\n      console.error('Trade data parsing error:', parseError);\r\n      // Provide more specific error messages for common issues\r\n      if (parseError instanceof Error) {\r\n        if (parseError.message.includes('Invalid time value')) {\r\n          throw new Error('Could not parse one or more dates in the CSV file. Please ensure dates are in a standard format like \"MM/DD/YYYY\" or \"Month Day, Year\".');\r\n        }\r\n        throw parseError;\r\n      }\r\n      throw new Error('Failed to parse trade data from CSV file.');\r\n    }\r\n  } catch (error) {\r\n    console.error('CSV parsing error:', error);\r\n    throw error; // Re-throw to be handled by the caller\r\n  }\r\n};\r\n\r\n// Known trade properties that should not be converted to tags\r\nconst knownTradeProperties = [\r\n  'id', 'date', 'Date', 'amount', 'Amount', 'P&L', 'type', 'Type', 'name', 'Name',\r\n  'entry', 'Entry Price', 'exit', 'Exit Price', 'tags', 'Tags', 'riskToReward', 'Risk to Reward',\r\n  'partialsTaken', 'Partials Taken', 'session', 'Session', 'notes', 'Notes',\r\n  'images', 'Images', 'Cumulative P&L', 'Account Balance'\r\n];\r\n\r\n// Common date formats to try when parsing\r\nconst DATE_FORMATS = [\r\n  'MM/dd/yyyy',    // 01/31/2023\r\n  'M/d/yyyy',      // 1/31/2023\r\n  'yyyy-MM-dd',    // 2023-01-31\r\n  'yyyy/MM/dd',    // 2023/01/31\r\n  'dd/MM/yyyy',    // 31/01/2023\r\n  'dd-MM-yyyy',    // 31-01-2023\r\n  'MM-dd-yyyy',    // 01-31-2023\r\n  'M-d-yyyy',      // 1-31-2023\r\n  'MMMM d, yyyy',  // March 7, 2025\r\n  'MMM d, yyyy',   // Mar 7, 2025\r\n  'MMMM dd, yyyy', // March 07, 2025\r\n  'MMM dd, yyyy'   // Mar 07, 2025\r\n];\r\n\r\n// Parse a date string using multiple formats\r\nconst parseDate = (dateStr: string): Date => {\r\n  // Normalize the date string to handle potential inconsistencies\r\n  const normalizedDateStr = dateStr.trim();\r\n\r\n  // Try to parse with each format\r\n  for (const format of DATE_FORMATS) {\r\n    try {\r\n      const parsedDate = parse(normalizedDateStr, format, new Date());\r\n      // Check if the date is valid (not Invalid Date)\r\n      if (!isNaN(parsedDate.getTime())) {\r\n        return parsedDate;\r\n      }\r\n    } catch (error) {\r\n      // Continue to the next format if this one fails\r\n    }\r\n  }\r\n\r\n  // Special handling for month name formats (e.g., \"March 7, 2025\")\r\n  const monthNameRegex = /(January|February|March|April|May|June|July|August|September|October|November|December)\\s+(\\d{1,2})(?:st|nd|rd|th)?(?:,)?\\s+(\\d{4})/i;\r\n  const monthNameMatch = normalizedDateStr.match(monthNameRegex);\r\n\r\n  if (monthNameMatch) {\r\n    const [, month, day, year] = monthNameMatch;\r\n    const monthIndex = [\r\n      'january', 'february', 'march', 'april', 'may', 'june',\r\n      'july', 'august', 'september', 'october', 'november', 'december'\r\n    ].indexOf(month.toLowerCase());\r\n\r\n    if (monthIndex !== -1) {\r\n      const date = new Date(parseInt(year), monthIndex, parseInt(day));\r\n      if (!isNaN(date.getTime())) {\r\n        return date;\r\n      }\r\n    }\r\n  }\r\n\r\n  // If all formats fail, try to create a date directly\r\n  const directDate = new Date(normalizedDateStr);\r\n  if (!isNaN(directDate.getTime())) {\r\n    return directDate;\r\n  }\r\n\r\n  // If all attempts fail, use the current date and log a warning\r\n  console.warn(`Could not parse date: ${normalizedDateStr}. Using current date instead.`);\r\n  return new Date();\r\n};\r\n\r\n// Parse trade data from JSON format\r\nconst parseTradeData = (jsonData: any[]): Trade[] => {\r\n  return jsonData.map((row: any) => {\r\n    // Parse date from various possible formats\r\n    const date = row.Date ? parseDate(row.Date) : new Date();\r\n\r\n    // Handle both the Amount and P&L columns\r\n    let amount = 0;\r\n    try {\r\n      amount = row.Amount !== undefined ?\r\n        (typeof row.Amount === 'string' ? parseFloat(row.Amount) : row.Amount) :\r\n        parseFloat(row['P&L'] || '0');\r\n    } catch (error) {\r\n      console.warn(`Could not parse amount: ${row.Amount || row['P&L']}. Using 0 instead.`);\r\n    }\r\n\r\n    // Parse tags from the Tags column\r\n    let tags = row.Tags ? row.Tags.split(',').map((tag: string) => tag.trim()).filter(Boolean) : [];\r\n\r\n    // Process unknown headers as tag categories\r\n    for (const header in row) {\r\n      // Skip known properties and empty values\r\n      if (knownTradeProperties.includes(header) || !row[header] || row[header] === '') {\r\n        continue;\r\n      }\r\n\r\n      // Convert the header to a tag category\r\n      const categoryName = header.trim();\r\n      const values = String(row[header]).split(',');\r\n\r\n      // Add each value as a tag in the format \"Category:Value\"\r\n      for (const value of values) {\r\n        const trimmedValue = value.trim();\r\n        if (trimmedValue) {\r\n          tags.push(`${categoryName}:${trimmedValue}`);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Determine the trade type based on amount or Type column\r\n    let tradeType: 'win' | 'loss' | 'breakeven';\r\n    if (row.Type && typeof row.Type === 'string') {\r\n      const typeStr = row.Type.toLowerCase();\r\n      if (typeStr === 'win' || typeStr === 'loss' || typeStr === 'breakeven') {\r\n        tradeType = typeStr as 'win' | 'loss' | 'breakeven';\r\n      } else {\r\n        // Fallback to amount-based type\r\n        tradeType = amount > 0 ? 'win' : amount < 0 ? 'loss' : 'breakeven';\r\n      }\r\n    } else {\r\n      // Determine type based on amount\r\n      tradeType = amount > 0 ? 'win' : amount < 0 ? 'loss' : 'breakeven';\r\n    }\r\n\r\n    return {\r\n      id: crypto.randomUUID(),\r\n      date,\r\n      type: tradeType,\r\n      amount: amount,\r\n      ...(row.Name && { name: row.Name }),\r\n      ...(row['Entry Price'] && { entry: row['Entry Price'] }),\r\n      ...(row['Exit Price'] && { exit: row['Exit Price'] }),\r\n\r\n      ...(tags.length > 0 && { tags }),\r\n      ...(row['Risk to Reward'] && { riskToReward: parseFloat(row['Risk to Reward']) }),\r\n      ...(row.Session && { session: row.Session }),\r\n      ...(row.Notes && { notes: row.Notes })\r\n    };\r\n  });\r\n};\r\n\r\n// Main import function that supports both Excel and CSV formats\r\nexport const importTrades = async (file: File): Promise<Trade[]> => {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    const fileType = file.name.split('.').pop()?.toLowerCase();\r\n\r\n    reader.onload = async (e) => {\r\n      try {\r\n        let trades: Trade[] = [];\r\n\r\n        // Handle different file types\r\n        if (fileType === 'csv') {\r\n          // CSV import\r\n          const csvContent = e.target?.result as string;\r\n          trades = await importFromCsv(csvContent);\r\n        } else {\r\n          // Excel import\r\n          const data = e.target?.result as ArrayBuffer;\r\n          trades = await importFromExcel(data);\r\n        }\r\n\r\n        resolve(trades);\r\n      } catch (error) {\r\n        console.error('Import error:', error);\r\n        let errorMessage = 'Failed to parse import file. ';\r\n\r\n        if (error instanceof Error) {\r\n          if (error.message.includes('Invalid time value')) {\r\n            errorMessage += 'There was an issue with a date format in your file. Please ensure all dates are in a standard format like MM/DD/YYYY.';\r\n          } else if (error.message.includes('is not a function')) {\r\n            errorMessage += 'There was an issue with the file structure. Please ensure the file has proper headers and data.';\r\n          } else {\r\n            errorMessage += error.message;\r\n          }\r\n        } else {\r\n          errorMessage += 'Please ensure the file format is correct.';\r\n        }\r\n\r\n        reject(new Error(errorMessage));\r\n      }\r\n    };\r\n\r\n    reader.onerror = () => {\r\n      reject(new Error('Failed to read import file.'));\r\n    };\r\n\r\n    // Read file based on type\r\n    if (fileType === 'csv') {\r\n      reader.readAsText(file);\r\n    } else {\r\n      reader.readAsArrayBuffer(file);\r\n    }\r\n  });\r\n};","import React, { useState } from 'react';\nimport { format } from 'date-fns';\nimport {\n  Box,\n  Typography,\n  IconButton,\n  Paper,\n  alpha,\n  Button,\n  Tooltip,\n  Snackbar,\n  Alert,\n  AlertColor,\n  DialogContent,\n  DialogActions,\n  DialogTitle,\n  Dialog\n} from '@mui/material';\nimport {\n  TrendingUp,\n  FileDownload,\n  FileUpload,\n  EmojiEvents,\n  CalendarMonth\n} from '@mui/icons-material';\nimport { Trade } from '../types/trade';\nimport { exportTrades, importTrades } from '../utils/tradeExportImport';\nimport { formatCurrency } from '../utils/formatters';\nimport { calculatePercentageOfValueAtDate } from '../utils/dynamicRiskUtils';\nimport { calculateTargetProgress } from '../utils/statsUtils';\n\n\n\ninterface MonthlyStatsProps {\n  trades: Trade[];\n  accountBalance: number;\n  onImportTrades?: (trades: Trade[]) => void;\n  onDeleteTrade?: (id: string) => void;\n  currentDate?: Date;\n  monthlyTarget?: number;\n  onClearMonthTrades?: (month: number, year: number) => void;\n}\n\n\nconst MonthlyStats: React.FC<MonthlyStatsProps> = ({\n  trades,\n  accountBalance,\n  onImportTrades,\n  onDeleteTrade,\n  currentDate = new Date(),\n  monthlyTarget,\n  onClearMonthTrades\n}) => {\n  const [showClearConfirm, setShowClearConfirm] = useState(false);\n  const monthTrades = trades.filter(trade =>\n    new Date(trade.date).getMonth() === currentDate.getMonth() &&\n    new Date(trade.date).getFullYear() === currentDate.getFullYear()\n  );\n\n  // Calculate monthly values from the filtered trades\n  const netAmountForThisMonth = monthTrades.reduce((sum, trade) => sum + trade.amount, 0);\n  const winCount = monthTrades.filter(trade => trade.type === 'win').length;\n  const lossCount = monthTrades.filter(trade => trade.type === 'loss').length;\n  const winRate = monthTrades.length > 0 ? (winCount / monthTrades.length * 100).toFixed(1) : '0';\n\n  // Calculate growth percentage using account value at start of month (excluding current month trades)\n  const startOfCurrentMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n  const growthPercentage = trades\n    ? calculatePercentageOfValueAtDate(netAmountForThisMonth, accountBalance, trades, startOfCurrentMonth).toFixed(1)\n    : accountBalance > 0 ? ((netAmountForThisMonth / accountBalance) * 100).toFixed(2) : '0';\n\n  // Calculate account value at start of month for display\n  const tradesBeforeMonth = trades.filter(trade => new Date(trade.date) < startOfCurrentMonth);\n  const accountValueAtStartOfMonth = accountBalance + tradesBeforeMonth.reduce((sum, trade) => sum + trade.amount, 0);\n\n\n  // Calculate monthly target progress using centralized function\n  const targetProgressValue = monthlyTarget && monthlyTarget > 0\n    ? calculateTargetProgress(monthTrades, accountBalance, monthlyTarget, startOfCurrentMonth, trades)\n    : 0;\n  const targetProgress = targetProgressValue.toFixed(0);\n  const isTargetMet = monthlyTarget ? parseFloat(growthPercentage) >= monthlyTarget : false;\n\n  const [exportFormat, setExportFormat] = useState<'xlsx' | 'csv'>('xlsx');\n\n  const handleExport = () => {\n    if (trades.length === 0) {\n      return;\n    }\n    exportTrades(trades, accountBalance, exportFormat);\n  };\n\n  const toggleExportFormat = () => {\n    setExportFormat(prev => prev === 'xlsx' ? 'csv' : 'xlsx');\n  };\n\n  const [isImporting, setIsImporting] = useState(false);\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n  const [snackbarSeverity, setSnackbarSeverity] = useState<AlertColor>('success');\n\n  const handleImport = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file || !onImportTrades) return;\n\n    setIsImporting(true);\n\n    try {\n      const importedTrades = await importTrades(file);\n      onImportTrades(importedTrades);\n\n      // Show success message\n      setSnackbarMessage(`Successfully imported ${importedTrades.length} trades`);\n      setSnackbarSeverity('success');\n      setSnackbarOpen(true);\n    } catch (error) {\n      console.error('Import failed:', error);\n\n      // Show error message\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error during import';\n      setSnackbarMessage(`Error importing trades: ${errorMessage}`);\n      setSnackbarSeverity('error');\n      setSnackbarOpen(true);\n    } finally {\n      setIsImporting(false);\n    }\n\n    // Reset the input\n    event.target.value = '';\n  };\n\n  const handleClearClick = () => {\n    setShowClearConfirm(true);\n  };\n\n  const handleClearConfirm = () => {\n    if (onClearMonthTrades) {\n      onClearMonthTrades(currentDate.getMonth(), currentDate.getFullYear());\n    }\n    setShowClearConfirm(false);\n  };\n\n  // Handle snackbar close\n  const handleSnackbarClose = () => {\n    setSnackbarOpen(false);\n  };\n\n  return (\n    <>\n      <Paper\n        elevation={2}\n        sx={{\n          p: 2,\n          borderRadius: 2,\n          position: 'relative',\n          width: '100%',\n          pb: { xs: 5, sm: 2.5 },\n          overflow: 'hidden'\n        }}\n      >\n        <Box sx={{\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n        }}>\n          <Typography variant=\"h6\" sx={{ mb: 2, fontWeight: 600, pl: 0.5,  }}>\n            Monthly Performance\n            <Typography variant=\"body2\" sx={{\n                  fontWeight: 500,\n                  mt : 1,\n                  color: 'text.secondary',  \n                  fontSize: '0.875rem'\n                }}>\n                  Started with {formatCurrency(accountValueAtStartOfMonth)}\n                </Typography>\n          </Typography>\n            \n\n          <Box sx={{\n            position: { xs: 'absolute', sm: 'static' },\n            bottom: 0,\n            left: 0,\n            right: 0,\n            display: 'flex',\n            gap: 1,\n            justifyContent: { xs: 'center', sm: 'flex-end' },\n            mt: { xs: 2, sm: 0 },\n            flex: 1,\n            alignItems: 'flex-start'\n          }}>\n            <input\n              type=\"file\"\n              accept=\".xlsx,.csv\"\n              style={{ display: 'none' }}\n              id=\"import-file\"\n              onChange={handleImport}\n            />\n            <Tooltip title=\"Import trades from Excel or CSV. Custom columns will be converted to tags (e.g., 'Strategy: Breakout' becomes 'Strategy:Breakout' tag)\">\n              <label htmlFor=\"import-file\">\n                <Button\n                  component=\"span\"\n                  size=\"small\"\n                  variant=\"outlined\"\n                  startIcon={<FileUpload />}\n                  sx={{\n                    color: 'text.secondary',\n                    fontSize: '0.75rem',\n                    fontWeight: 500,\n                    textTransform: 'none',\n                    minWidth: 'auto',\n                    p: 0.5,\n                    px: 1,\n                    bgcolor: 'background.paper',\n                    border: '1px solid',\n                    borderColor: 'divider',\n                    '&:hover': {\n                      bgcolor: 'action.hover',\n                      color: 'text.primary',\n                      borderColor: 'text.primary'\n                    }\n                  }}\n                >\n                  Import\n                </Button>\n              </label>\n            </Tooltip>\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\n              <Button\n                size=\"small\"\n                variant=\"outlined\"\n                startIcon={<FileDownload />}\n                onClick={handleExport}\n                disabled={monthTrades.length === 0}\n                sx={{\n                  color: 'text.secondary',\n                  fontSize: '0.75rem',\n                  fontWeight: 500,\n                  textTransform: 'none',\n                  minWidth: 'auto',\n                  p: 0.5,\n                  px: 1,\n                  bgcolor: 'background.paper',\n                  border: '1px solid',\n                  borderColor: 'divider',\n                  '&:hover': {\n                    bgcolor: 'action.hover',\n                    color: 'text.primary',\n                    borderColor: 'text.primary'\n                  },\n                  '&.Mui-disabled': {\n                    color: 'text.disabled',\n                    bgcolor: 'action.disabledBackground',\n                    borderColor: 'divider'\n                  }\n                }}\n              >\n                Export {exportFormat.toUpperCase()}\n              </Button>\n              <Tooltip title={`Switch to ${exportFormat === 'xlsx' ? 'CSV' : 'Excel'} format`}>\n                <IconButton\n                  size=\"small\"\n                  onClick={toggleExportFormat}\n                  disabled={monthTrades.length === 0}\n                  sx={{ ml: 0.5 }}\n                >\n                  <Typography variant=\"caption\" sx={{ fontWeight: 600 }}>\n                    {exportFormat === 'xlsx' ? 'CSV' : 'XLS'}\n                  </Typography>\n                </IconButton>\n              </Tooltip>\n            </Box>\n\n            <Button\n              size=\"small\"\n              variant=\"outlined\"\n              onClick={handleClearClick}\n              disabled={monthTrades.length === 0}\n              sx={{\n                color: 'error.main',\n                fontSize: '0.75rem',\n                fontWeight: 500,\n                textTransform: 'none',\n                minWidth: 'auto',\n                p: 0.5,\n                px: 1,\n                bgcolor: 'background.paper',\n                border: '1px solid',\n                borderColor: 'divider',\n                '&:hover': {\n                  bgcolor: (theme) => alpha(theme.palette.error.main, 0.08),\n                  borderColor: 'error.main'\n                },\n                '&.Mui-disabled': {\n                  color: 'text.disabled',\n                  bgcolor: 'action.disabledBackground',\n                  borderColor: 'divider'\n                }\n              }}\n            >\n              Clear Month\n            </Button>\n          </Box>\n        </Box>\n\n        <Box sx={{\n          display: 'grid',\n          gridTemplateColumns: { xs: '1fr', sm: 'repeat(3, 1fr)' },\n          gap: 2.5,\n          mb: 2\n        }}>\n          {/* Monthly P&L Card */}\n          <Box sx={{\n            p: 2,\n            borderRadius: 2,\n            bgcolor: theme => alpha(theme.palette.background.default, 0.5),\n            display: 'flex',\n            flexDirection: 'column',\n            gap: 0.5\n          }}>\n            <Box sx={{\n              display: 'flex',\n              alignItems: 'center',\n              gap: 1,\n              mb: 0.5\n            }}>\n              <TrendingUp sx={{ fontSize: '1.2rem', color: netAmountForThisMonth > 0 ? 'success.main' : netAmountForThisMonth < 0 ? 'error.main' : 'text.secondary' }} />\n              <Typography variant=\"body1\" sx={{ fontWeight: 600, color: 'text.secondary' }}>\n                Monthly P&L\n              \n              </Typography>\n            </Box>\n            <Typography\n              variant=\"h5\"\n              sx={{\n                fontWeight: 700,\n                color: netAmountForThisMonth > 0 ? 'success.main' : netAmountForThisMonth < 0 ? 'error.main' : 'text.primary',\n                display: 'flex',\n                alignItems: 'baseline',\n                gap: 0.5\n              }}\n            >\n              {formatCurrency(netAmountForThisMonth)}\n              <Tooltip\n                title={`Percentage calculated based on account value at start of ${format(currentDate, 'MMMM')}: ${formatCurrency(accountValueAtStartOfMonth)} (excluding this month's trades for consistent comparison)`}\n                placement=\"top\"\n              >\n                <Typography\n                  component=\"span\"\n                  sx={{\n                    fontSize: '1rem',\n                    color: netAmountForThisMonth > 0 ? 'success.main' : netAmountForThisMonth < 0 ? 'error.main' : 'text.primary',\n                    fontWeight: 600,\n                    cursor: 'help'\n                  }}\n                >\n                  ({growthPercentage}%)\n                </Typography>\n              </Tooltip>\n            </Typography>\n\n            {monthlyTarget && (\n              <Box sx={{ width: '100%', mt: 1.5 }}>\n                <Box sx={{\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                  mb: 0.5\n                }}>\n                  <Typography variant=\"body2\" sx={{ fontWeight: 500, color: 'text.secondary' }}>\n                    Target Progress\n                  </Typography>\n                  <Typography variant=\"body2\" sx={{\n                    fontWeight: 600,\n                    color: isTargetMet ? 'success.main' : 'primary.main'\n                  }}>\n                    {targetProgress}%\n                  </Typography>\n                </Box>\n                <Box sx={{\n                  width: '100%',\n                  height: '8px',\n                  bgcolor: theme => alpha(theme.palette.divider, 0.5),\n                  borderRadius: '4px',\n                  overflow: 'hidden'\n                }}>\n                  <Box sx={{\n                    width: `${Math.max(Math.min(parseFloat(targetProgress), 100), 0)}%`,\n                    height: '100%',\n                    bgcolor: isTargetMet ? 'success.main' : 'primary.main',\n                    transition: 'width 0.3s ease'\n                  }} />\n                </Box>\n              </Box>\n            )}\n          </Box>\n\n          {/* Win Rate Card */}\n          <Box sx={{\n            p: 2,\n            borderRadius: 2,\n            bgcolor: theme => alpha(theme.palette.background.default, 0.5),\n            display: 'flex',\n            flexDirection: 'column',\n            gap: 0.5\n          }}>\n            <Box sx={{\n              display: 'flex',\n              alignItems: 'center',\n              gap: 1,\n              mb: 0.5\n            }}>\n              <EmojiEvents sx={{ fontSize: '1.2rem', color: parseFloat(winRate) > 50 ? 'success.main' : 'text.secondary' }} />\n              <Typography variant=\"body1\" sx={{ fontWeight: 600, color: 'text.secondary' }}>\n                Win Rate\n              </Typography>\n            </Box>\n            <Typography variant=\"h5\" sx={{ fontWeight: 700, color: parseFloat(winRate) > 50 ? 'success.main' : 'text.primary' }}>\n              {winRate}%\n            </Typography>\n            <Typography variant=\"body1\" sx={{ fontWeight: 500, color: 'text.secondary', mt: 0.5 }}>\n              {winCount} Wins / {lossCount} Losses\n            </Typography>\n            <Box sx={{\n              display: 'flex',\n              alignItems: 'center',\n              mt: 1,\n              gap: 1\n            }}>\n              <Box sx={{\n                height: '10px',\n                bgcolor: 'success.main',\n                borderRadius: '5px',\n                flex: winCount || 1\n              }} />\n              <Box sx={{\n                height: '10px',\n                bgcolor: 'error.main',\n                borderRadius: '5px',\n                flex: lossCount || 1\n              }} />\n            </Box>\n          </Box>\n\n          {/* Total Trades Card */}\n          <Box sx={{\n            p: 2,\n            borderRadius: 2,\n            bgcolor: theme => alpha(theme.palette.background.default, 0.5),\n            display: 'flex',\n            flexDirection: 'column',\n            gap: 0.5\n          }}>\n            <Box sx={{\n              display: 'flex',\n              alignItems: 'center',\n              gap: 1,\n              mb: 0.5\n            }}>\n              <CalendarMonth sx={{ fontSize: '1.2rem', color: 'text.secondary' }} />\n              <Typography variant=\"body1\" sx={{ fontWeight: 600, color: 'text.secondary' }}>\n                Trading Activity\n              </Typography>\n            </Box>\n            <Typography variant=\"h5\" sx={{ fontWeight: 700, color: 'text.primary' }}>\n              {monthTrades.length} Trade{monthTrades.length === 1 ? '' : 's'}\n            </Typography>\n            <Typography variant=\"body1\" sx={{ fontWeight: 500, color: 'text.secondary', mt: 0.5 }}>\n              {monthTrades.length > 0 ? (monthTrades.length / 30 * 100).toFixed(0) : 0}% of Month Active\n            </Typography>\n          </Box>\n        </Box>\n\n      </Paper>\n\n\n      <Dialog\n        open={showClearConfirm}\n        onClose={() => setShowClearConfirm(false)}\n        maxWidth=\"xs\"\n        fullWidth\n      >\n        <DialogTitle>Clear Trades</DialogTitle>\n        <DialogContent>\n          <Typography>\n            Are you sure you want to clear all trades? This action cannot be undone.\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setShowClearConfirm(false)}>Cancel</Button>\n          <Button onClick={handleClearConfirm} color=\"error\">Clear</Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Snackbar for import notifications */}\n      <Snackbar\n        open={snackbarOpen}\n        autoHideDuration={snackbarSeverity === 'success' ? 3000 : 6000}\n        onClose={handleSnackbarClose}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n      >\n        <Alert\n          onClose={handleSnackbarClose}\n          severity={snackbarSeverity}\n          variant=\"filled\"\n          sx={{ width: '100%' }}\n        >\n          {snackbarMessage}\n        </Alert>\n      </Snackbar>\n    </>\n  );\n};\n\nexport default MonthlyStats;\n","import React, { useState, useMemo } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Paper,\r\n  alpha,\r\n  TextField,\r\n  Switch,\r\n  FormControlLabel\r\n} from '@mui/material';\r\nimport {\r\n  Security as SecurityIcon\r\n} from '@mui/icons-material';\r\nimport { Trade } from '../types/trade';\r\nimport { DynamicRiskSettings } from '../utils/dynamicRiskUtils';\r\n\r\n\r\n\r\ninterface AccountBalanceProps {\r\n  balance: number;\r\n  totalProfit: number;\r\n  onChange: (balance: number) => void;\r\n  trades: Trade[];\r\n  onPerformanceClick?: () => void;\r\n  riskPerTrade?: number;\r\n  dynamicRiskSettings?: DynamicRiskSettings;\r\n  onToggleDynamicRisk?: (useActualAmounts: boolean) => void;\r\n  isDynamicRiskToggled?: boolean;\r\n}\r\n\r\n\r\nconst AccountBalance: React.FC<AccountBalanceProps> = ({\r\n  balance,\r\n  onChange,\r\n  trades,\r\n  totalProfit,\r\n  onPerformanceClick,\r\n  riskPerTrade,\r\n  dynamicRiskSettings,\r\n  onToggleDynamicRisk,\r\n  isDynamicRiskToggled = true // Default to true (using actual amounts)\r\n}) => {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [tempBalance, setTempBalance] = useState(balance.toString());\r\n\r\n  // Profit percentage calculation - should be based on original account balance for threshold comparison\r\n  const profitPercentage = trades.length > 0 && balance > 0 ? (totalProfit / balance * 100).toFixed(2) : '0';\r\n\r\n  // Calculate the effective risk percentage based on dynamic risk settings\r\n  const effectiveRiskPercentage = useMemo(() => {\r\n    if (!riskPerTrade) return undefined;\r\n\r\n    if (dynamicRiskSettings?.dynamicRiskEnabled &&\r\n      dynamicRiskSettings.increasedRiskPercentage &&\r\n      dynamicRiskSettings.profitThresholdPercentage &&\r\n      parseFloat(profitPercentage) >= dynamicRiskSettings.profitThresholdPercentage) {\r\n      return dynamicRiskSettings.increasedRiskPercentage;\r\n    }\r\n\r\n    return riskPerTrade;\r\n  }, [riskPerTrade, dynamicRiskSettings, profitPercentage]);\r\n\r\n  // Calculate total account value\r\n  const totalAccountValue = balance + totalProfit;\r\n\r\n  const handleSubmit = () => {\r\n    const newBalance = parseFloat(tempBalance);\r\n    if (!isNaN(newBalance) && newBalance > 0) {\r\n      onChange(newBalance);\r\n      setIsEditing(false);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter') {\r\n      handleSubmit();\r\n    } else if (e.key === 'Escape') {\r\n      setIsEditing(false);\r\n      setTempBalance(balance.toString());\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n  return (\r\n    <Paper\r\n      elevation={2}\r\n      sx={{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: 1.5,\r\n        p: 2,\r\n        borderRadius: 2,\r\n        bgcolor: 'background.paper',\r\n        border: '1px solid',\r\n        borderColor: 'divider',\r\n        position: 'relative',\r\n        overflow: 'hidden'\r\n      }}\r\n    >\r\n      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n          <Typography variant=\"h6\" sx={{ color: 'text.primary', fontWeight: 600, pl: 1 }}>\r\n            Account Balance\r\n          </Typography>\r\n        </Box>\r\n        {isEditing ? (\r\n          <TextField\r\n            value={tempBalance}\r\n            onChange={(e) => {\r\n              const value = e.target.value;\r\n              if (value === '' || /^\\d*\\.?\\d*$/.test(value)) {\r\n                setTempBalance(value);\r\n              }\r\n            }}\r\n            onBlur={handleSubmit}\r\n            onKeyDown={handleKeyPress}\r\n            size=\"small\"\r\n            autoFocus\r\n            sx={{\r\n              width: '150px',\r\n              '& .MuiInputBase-input': {\r\n                py: 0.8,\r\n                px: 1.5,\r\n                fontSize: '1.1rem',\r\n                fontWeight: 600,\r\n                color: 'text.primary'\r\n              }\r\n            }}\r\n            InputProps={{\r\n              startAdornment: (\r\n                <Typography sx={{ color: 'text.secondary', fontSize: '1.1rem', mr: 0.5, fontWeight: 600 }}>\r\n                  $\r\n                </Typography>\r\n              )\r\n            }}\r\n          />\r\n        ) : (\r\n          <Typography\r\n            onClick={() => setIsEditing(true)}\r\n            sx={{\r\n              cursor: 'pointer',\r\n              fontSize: '1.5rem',\r\n              fontWeight: 700,\r\n              color: 'text.primary',\r\n              '&:hover': {\r\n                color: 'primary.main'\r\n              },\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              gap: 0.5\r\n            }}\r\n          >\r\n            <Box component=\"span\" sx={{ fontSize: '1.1rem', color: 'text.secondary', fontWeight: 500 }}>$</Box>\r\n            {balance.toLocaleString()}\r\n          </Typography>\r\n        )}\r\n      </Box>\r\n\r\n      <Box sx={{\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'space-between',\r\n        backgroundColor: theme => alpha(theme.palette.background.default, 0.5),\r\n        p: 1.5,\r\n        borderRadius: 1.5,\r\n        mt: 0.5\r\n      }}>\r\n        <Box>\r\n          <Typography\r\n            variant=\"body2\"\r\n            sx={{\r\n              color: 'text.secondary',\r\n              mb: 0.5,\r\n              fontWeight: 500\r\n            }}\r\n          >\r\n            Current P&L\r\n          </Typography>\r\n          <Typography\r\n            variant=\"h6\"\r\n            sx={{\r\n              fontSize: '1.2rem',\r\n              color: totalProfit > 0 ? 'success.main' : totalProfit < 0 ? 'error.main' : 'text.secondary',\r\n              fontWeight: 700,\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              gap: 0.5\r\n            }}\r\n          >\r\n            ${trades.length > 0 ? Math.abs(totalProfit).toLocaleString() : '0'}\r\n            <Typography\r\n              component=\"span\"\r\n              sx={{\r\n                fontSize: '0.9rem',\r\n                color: totalProfit > 0 ? 'success.main' : totalProfit < 0 ? 'error.main' : 'text.secondary',\r\n                fontWeight: 600\r\n              }}\r\n            >\r\n              ({profitPercentage}%)\r\n            </Typography>\r\n          </Typography>\r\n        </Box>\r\n\r\n        <Box>\r\n          <Typography\r\n            variant=\"body2\"\r\n            sx={{\r\n              color: 'text.secondary',\r\n              mb: 0.5,\r\n              fontWeight: 500,\r\n              textAlign: 'right'\r\n            }}\r\n          >\r\n            Total Value\r\n          </Typography>\r\n          <Typography\r\n            variant=\"h6\"\r\n            sx={{\r\n              fontSize: '1.2rem',\r\n              color: totalAccountValue > balance ? 'success.main' : totalAccountValue < balance ? 'error.main' : 'text.secondary',\r\n              fontWeight: 700\r\n            }}\r\n          >\r\n            ${totalAccountValue.toLocaleString()}\r\n          </Typography>\r\n        </Box>\r\n      </Box>\r\n\r\n      {riskPerTrade && (\r\n        <Box sx={{\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          gap: 1,\r\n          mt: 1\r\n        }}>\r\n          <Box sx={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'space-between',\r\n            backgroundColor: theme => alpha(theme.palette.primary.main, 0.08),\r\n            p: 1.5,\r\n            borderRadius: 1.5,\r\n          }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n              <SecurityIcon sx={{ fontSize: '1rem', color: 'primary.main' }} />\r\n              <Typography\r\n                variant=\"body2\"\r\n                sx={{\r\n                  color: 'text.secondary',\r\n                  fontWeight: 500\r\n                }}\r\n              >\r\n                Risk Per Trade ({effectiveRiskPercentage}%)\r\n                {dynamicRiskSettings?.dynamicRiskEnabled && effectiveRiskPercentage !== riskPerTrade && (\r\n                  <Box component=\"span\" sx={{ ml: 1, color: 'success.main', fontSize: '0.75rem', fontWeight: 700 }}>\r\n                    INCREASED\r\n                  </Box>\r\n                )}\r\n              </Typography>\r\n            </Box>\r\n            <Typography\r\n              variant=\"body1\"\r\n              sx={{\r\n                fontWeight: 600,\r\n                color: 'primary.main'\r\n              }}\r\n            >\r\n              ${effectiveRiskPercentage ? ((totalAccountValue * effectiveRiskPercentage) / 100).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) : '0.00'}\r\n            </Typography>\r\n          </Box>\r\n\r\n          {dynamicRiskSettings?.dynamicRiskEnabled && dynamicRiskSettings.profitThresholdPercentage && dynamicRiskSettings.increasedRiskPercentage && (\r\n            <Box sx={{\r\n              display: 'flex',\r\n              flexDirection: 'column',\r\n              gap: 1,\r\n              backgroundColor: theme => alpha(theme.palette.background.default, 0.5),\r\n              p: 1,\r\n              borderRadius: 1.5,\r\n              fontSize: '0.75rem'\r\n            }}>\r\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n                <Typography variant=\"caption\" sx={{ color: 'text.secondary' }}>\r\n                  Dynamic Risk: {parseFloat(profitPercentage) >= dynamicRiskSettings.profitThresholdPercentage ?\r\n                    <Box component=\"span\" sx={{ color: 'success.main', fontWeight: 600 }}>Active</Box> :\r\n                    <Box component=\"span\" sx={{ color: 'text.secondary', fontWeight: 600 }}>Inactive</Box>}\r\n                </Typography>\r\n                <Typography variant=\"caption\" sx={{ color: 'text.secondary' }}>\r\n                  Threshold: {dynamicRiskSettings.profitThresholdPercentage}% profit\r\n                </Typography>\r\n              </Box>\r\n\r\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Switch\r\n                      checked={isDynamicRiskToggled}\r\n                      onChange={(e) => {\r\n                        if (onToggleDynamicRisk) {\r\n                          onToggleDynamicRisk(e.target.checked);\r\n                        }\r\n                      }}\r\n                      size=\"small\"\r\n                      color=\"primary\"\r\n                    />\r\n                  }\r\n                  label={\r\n                    <Typography variant=\"caption\" sx={{ color: 'text.secondary' }}>\r\n                      {isDynamicRiskToggled ? \"Using actual trade amounts\" : \"Using calculated amounts\"}\r\n                    </Typography>\r\n                  }\r\n                  sx={{ m: 0 }}\r\n                />\r\n                \r\n              </Box>\r\n            </Box>\r\n          )}\r\n        </Box>\r\n      )}\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default AccountBalance;\r\n","import { convertFromRaw } from 'draft-js';\nimport { stateToHTML } from 'draft-js-export-html';\n\n/**\n * Converts Draft.js raw content to HTML\n * @param rawContent The Draft.js raw content as a string\n * @returns HTML string or empty string if conversion fails\n */\nexport const convertRichTextToHtml = (rawContent: string): string => {\n  if (!rawContent) return '';\n\n  try {\n    // Parse the raw content\n    const contentState = convertFromRaw(JSON.parse(rawContent));\n\n    // Convert to HTML with custom options\n    const options = {\n      inlineStyles: {\n        // Handle custom text colors\n        ...Object.fromEntries(\n          Array.from({ length: 100 }, (_, i) => {\n            const colorHex = i.toString(16).padStart(2, '0');\n            return [`TEXT_COLOR_${colorHex}${colorHex}${colorHex}`, { style: { color: `#${colorHex}${colorHex}${colorHex}` } }];\n          })\n        ),\n        // Handle all possible text colors (basic set)\n        TEXT_COLOR_FF0000: { style: { color: '#FF0000' } }, // Red\n        TEXT_COLOR_00FF00: { style: { color: '#00FF00' } }, // Green\n        TEXT_COLOR_0000FF: { style: { color: '#0000FF' } }, // Blue\n        TEXT_COLOR_FFFF00: { style: { color: '#FFFF00' } }, // Yellow\n        TEXT_COLOR_FF00FF: { style: { color: '#FF00FF' } }, // Magenta\n        TEXT_COLOR_00FFFF: { style: { color: '#00FFFF' } }, // Cyan\n        TEXT_COLOR_000000: { style: { color: '#000000' } }, // Black\n        TEXT_COLOR_FFFFFF: { style: { color: '#FFFFFF' } }, // White\n        TEXT_COLOR_808080: { style: { color: '#808080' } }, // Gray\n        TEXT_COLOR_FFA500: { style: { color: '#FFA500' } }, // Orange\n        TEXT_COLOR_800080: { style: { color: '#800080' } }, // Purple\n        TEXT_COLOR_008000: { style: { color: '#008000' } }, // Dark Green\n        TEXT_COLOR_800000: { style: { color: '#800000' } }, // Maroon\n        TEXT_COLOR_000080: { style: { color: '#000080' } }, // Navy\n        TEXT_COLOR_808000: { style: { color: '#808000' } }, // Olive\n        TEXT_COLOR_008080: { style: { color: '#008080' } }, // Teal\n      },\n      blockStyleFn: (block: any) => {\n        const type = block.getType();\n        switch (type) {\n          case 'header-one':\n            return { element: 'h1', style: { margin: '0.4em 0', fontSize: '1.2rem' } };\n          case 'header-two':\n            return { element: 'h2', style: { margin: '0.3em 0', fontSize: '1.1rem' } };\n          case 'header-three':\n            return { element: 'h3', style: { margin: '0.2em 0', fontSize: '1rem' } };\n          default:\n            return {};\n        }\n      }\n    };\n\n    // Convert to HTML with the options\n    let html = stateToHTML(contentState, options);\n\n    // Wrap the content in a div with full-width styling and smaller text\n    html = `<div style=\"width: 100%; box-sizing: border-box; font-size: 0.8rem; line-height: 1.3;\">${html}</div>`;\n\n    // Add additional styling for paragraphs to reduce spacing\n    html = html.replace(/<p/g, '<p style=\"margin: 0.3em 0\"');\n\n    return html;\n  } catch (error) {\n    console.error('Error converting rich text to HTML:', error);\n    // If conversion fails, return the raw content as plain text\n    try {\n      // Try to extract text from the JSON\n      const parsed = JSON.parse(rawContent);\n      if (parsed.blocks && Array.isArray(parsed.blocks)) {\n        return parsed.blocks.map((block: any) => block.text).join('\\n');\n      }\n    } catch (e) {\n      // If that fails too, just return the raw content\n      return rawContent;\n    }\n    return '';\n  }\n};\n","import React, { useState, useCallback } from 'react';\r\nimport { format } from 'date-fns';\r\nimport { alpha, useTheme } from '@mui/material/styles';\r\nimport {\r\n  Box,\r\n  Paper,\r\n  Typography,\r\n  IconButton,\r\n  Tooltip\r\n} from '@mui/material';\r\nimport { convertRichTextToHtml } from '../utils/richTextUtils';\r\nimport {\r\n  EventNote as EventNoteIcon,\r\n  Edit as EditIcon,\r\n  NoteAdd as NoteAddIcon,\r\n  Add as AddIcon\r\n} from '@mui/icons-material';\r\n\r\ninterface DayNoteCardProps {\r\n  calendarNotes: Map<string, string>;\r\n  setIsDayNotesDialogOpen: (day: string) => void;\r\n}\r\n\r\nconst DayNoteCard: React.FC<DayNoteCardProps> = ({\r\n  calendarNotes,\r\n  setIsDayNotesDialogOpen\r\n}) => {\r\n  const theme = useTheme();\r\n  const [isContentOverflowing, setIsContentOverflowing] = useState(false);\r\n\r\n  // Get current day of week (Sun, Mon, Tue, etc.)\r\n  const currentDayOfWeek = format(new Date(), 'EEE');\r\n  const hasNoteForToday = calendarNotes && calendarNotes.has(currentDayOfWeek) && calendarNotes.get(currentDayOfWeek)?.trim() !== '';\r\n\r\n  // Function to check if content overflows\r\n  const checkOverflow = useCallback((contentElement: HTMLElement, containerElement: HTMLElement) => {\r\n    // Create a temporary element to measure the actual content height without duplication\r\n    const tempDiv = document.createElement('div');\r\n    tempDiv.style.position = 'absolute';\r\n    tempDiv.style.visibility = 'hidden';\r\n    tempDiv.style.height = 'auto';\r\n    tempDiv.style.width = containerElement.clientWidth + 'px';\r\n    tempDiv.style.fontSize = '0.8rem';\r\n    tempDiv.style.lineHeight = '1.3';\r\n    tempDiv.innerHTML = convertRichTextToHtml(calendarNotes?.get(currentDayOfWeek) || '');\r\n\r\n    document.body.appendChild(tempDiv);\r\n    const actualContentHeight = tempDiv.offsetHeight;\r\n    document.body.removeChild(tempDiv);\r\n\r\n    const containerHeight = containerElement.clientHeight;\r\n    const isOverflowing = actualContentHeight > containerHeight;\r\n\r\n    setIsContentOverflowing(isOverflowing);\r\n    return isOverflowing;\r\n  }, [calendarNotes, currentDayOfWeek]);\r\n\r\n  // Common paper styles for both states\r\n  const paperStyles = {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    gap: 1.5,\r\n    p: 2,\r\n    borderRadius: 2,\r\n    bgcolor: 'background.paper',\r\n    border: '1px solid',\r\n    borderColor: hasNoteForToday ? theme.palette.info.main : alpha(theme.palette.primary.main, 0.3),\r\n    boxShadow: hasNoteForToday\r\n      ? `0 0 8px ${alpha(theme.palette.info.main, 0.2)}`\r\n      : `0 0 8px ${alpha(theme.palette.primary.main, 0.1)}`,\r\n    position: 'relative',\r\n    overflow: 'hidden',\r\n    cursor: 'pointer',\r\n    transition: 'all 0.2s ease-in-out',\r\n    height: '100%',\r\n    '&:hover': {\r\n      transform: 'translateY(-2px)',\r\n      boxShadow: theme.shadows[4],\r\n      borderColor: theme.palette.primary.main\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Paper\r\n      elevation={2}\r\n      sx={paperStyles}\r\n      onClick={() => setIsDayNotesDialogOpen(currentDayOfWeek)}\r\n    >\r\n      {/* Card Header - Different for empty vs filled states */}\r\n      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\r\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n          <Box\r\n            sx={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              width: 32,\r\n              height: 32,\r\n              borderRadius: '50%',\r\n              backgroundColor: alpha(hasNoteForToday ? theme.palette.info.main : theme.palette.primary.main, 0.1),\r\n              color: hasNoteForToday ? theme.palette.info.main : theme.palette.primary.main\r\n            }}\r\n          >\r\n            <EventNoteIcon fontSize=\"small\" />\r\n          </Box>\r\n          <Typography variant=\"subtitle1\" sx={{ color: 'text.primary', fontWeight: 600 }}>\r\n            Today's Notes\r\n          </Typography>\r\n        </Box>\r\n        <Tooltip title={hasNoteForToday ? \"Edit Notes\" : \"Add Notes\"}>\r\n          <IconButton\r\n            size=\"small\"\r\n            sx={{\r\n              color: hasNoteForToday ? 'info.main' : 'primary.main',\r\n              bgcolor: alpha(hasNoteForToday ? theme.palette.info.main : theme.palette.primary.main, 0.08),\r\n              '&:hover': {\r\n                bgcolor: alpha(hasNoteForToday ? theme.palette.info.main : theme.palette.primary.main, 0.15),\r\n              }\r\n            }}\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              setIsDayNotesDialogOpen(currentDayOfWeek);\r\n            }}\r\n          >\r\n            {hasNoteForToday ? <EditIcon fontSize=\"small\" /> : <AddIcon fontSize=\"small\" />}\r\n          </IconButton>\r\n        </Tooltip>\r\n      </Box>\r\n\r\n      {/* Card Content - Different for empty vs filled states */}\r\n      {hasNoteForToday ? (\r\n        // Content when notes exist\r\n        <Box sx={{\r\n          backgroundColor: alpha(theme.palette.background.default, 0.5),\r\n          p: 1.2,\r\n          borderRadius: 1.5,\r\n          mt: 0.5,\r\n          flex: 1,\r\n          overflow: 'hidden',\r\n          position: 'relative',\r\n          width: '100%',\r\n          display: 'flex',\r\n          flexDirection: 'column'\r\n        }}>\r\n          <Box\r\n            className=\"auto-scroll-container\"\r\n            sx={{\r\n              overflow: 'hidden',\r\n              height: '100%',\r\n              maxHeight: '170px',\r\n              position: 'relative',\r\n              width: '100%',\r\n              '& .MuiTypography-root': {\r\n                margin: 0\r\n              },\r\n              '& .auto-scroll-content': {\r\n                position: 'relative',\r\n                whiteSpace: 'normal',\r\n                width: '100%',\r\n                textAlign: 'left',\r\n                boxSizing: 'border-box',\r\n                fontSize: '0.8rem'\r\n              },\r\n              '&:hover': {\r\n                '& .infinite-scroll-wrapper': {\r\n                  animationPlayState: 'paused'\r\n                }\r\n              },\r\n              '@keyframes scrollText': {\r\n                '0%, 100%': { transform: 'translateY(0)' }\r\n              }\r\n            }}\r\n          >\r\n            <Box\r\n              className=\"scroll-container\"\r\n              sx={{\r\n                position: 'relative',\r\n                width: '100%',\r\n                height: '100%',\r\n                overflow: 'hidden',\r\n                '&:hover .scroll-content': {\r\n                  animationPlayState: 'paused'\r\n                }\r\n              }}\r\n            >\r\n              <Box\r\n                className=\"scroll-content\"\r\n                sx={{\r\n                  animation: 'marquee var(--scroll-duration, 15s) linear infinite',\r\n                  paddingBottom: '20px',\r\n                  '@keyframes marquee': {\r\n                    '0%': { transform: 'translateY(0)' },\r\n                    '100%': { transform: 'translateY(-50%)' }\r\n                  }\r\n                }}\r\n                ref={(el: HTMLDivElement | null) => {\r\n                  if (el) {\r\n                    // Check if content overflows the container\r\n                    const container = el.parentElement;\r\n                    if (container) {\r\n                      // Wait for content to render\r\n                      setTimeout(() => {\r\n                        const isOverflowing = checkOverflow(el, container);\r\n\r\n                        if (isOverflowing) {\r\n                          // Calculate content length and set appropriate duration\r\n                          const contentLength = el.textContent?.length || 0;\r\n                          // Base duration on content length - longer content scrolls slower\r\n                          const duration = Math.max(10, Math.min(30, contentLength / 20));\r\n                          el.style.setProperty('--scroll-duration', `${duration}s`);\r\n                          el.style.animationPlayState = 'running';\r\n                        } else {\r\n                          // Disable animation for short content\r\n                          el.style.animationPlayState = 'paused';\r\n                          el.style.transform = 'translateY(0)';\r\n                        }\r\n                      }, 100);\r\n                    }\r\n                  }\r\n                }}\r\n                dangerouslySetInnerHTML={{\r\n                  __html: `\r\n                    <div style=\"font-size: 0.8rem; line-height: 1.3; text-align: left;\">\r\n                      ${convertRichTextToHtml(calendarNotes?.get(currentDayOfWeek) || '')}\r\n                    </div>\r\n                    ${isContentOverflowing ? `\r\n                      <div style=\"height: 30px;\"></div>\r\n                      <div style=\"font-size: 0.8rem; line-height: 1.3; text-align: left;\">\r\n                        ${convertRichTextToHtml(calendarNotes?.get(currentDayOfWeek) || '')}\r\n                      </div>\r\n                    ` : ''}\r\n                  `\r\n                }}\r\n              />\r\n            </Box>\r\n          </Box>\r\n          <Box\r\n            className=\"scroll-indicator\"\r\n            sx={{\r\n              position: 'absolute',\r\n              bottom: 0,\r\n              left: 0,\r\n              right: 0,\r\n              height: '30px',\r\n              background: `linear-gradient(to bottom, transparent, ${theme.palette.mode === 'dark' ? 'rgba(30,30,30,0.8)' : 'rgba(255,255,255,0.8)'})`,\r\n              pointerEvents: 'none',\r\n              display: 'flex',\r\n              justifyContent: 'center',\r\n              alignItems: 'flex-end',\r\n              paddingBottom: '4px',\r\n              opacity: 0,\r\n              transition: 'opacity 0.3s ease',\r\n              '&::after': {\r\n                content: '\"\"',\r\n                width: '40px',\r\n                height: '4px',\r\n                borderRadius: '2px',\r\n                backgroundColor: alpha(theme.palette.info.main, 0.3),\r\n                animation: 'pulseIndicator 2s ease-in-out infinite'\r\n              },\r\n              '@keyframes pulseIndicator': {\r\n                '0%, 100%': { opacity: 0.3 },\r\n                '50%': { opacity: 0.7 }\r\n              }\r\n            }}\r\n            ref={(el: HTMLDivElement | null) => {\r\n              if (el) {\r\n                // Show indicator only when content is overflowing\r\n                setTimeout(() => {\r\n                  el.style.opacity = isContentOverflowing ? '1' : '0';\r\n                }, 150);\r\n              }\r\n            }}\r\n          />\r\n        </Box>\r\n      ) : (\r\n        // Empty state content\r\n        <Box sx={{\r\n          backgroundColor: alpha(theme.palette.background.default, 0.5),\r\n          p: 1,\r\n          borderRadius: 1.5, \r\n          flex: 1,\r\n          pb: 3,\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          textAlign: 'center',\r\n          gap: 2\r\n        }}>\r\n          <Box sx={{\r\n            width: 60,\r\n            height: 60,\r\n            borderRadius: '50%',\r\n            mt: 1,\r\n            backgroundColor: alpha(theme.palette.primary.main, 0.1),\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            color: theme.palette.primary.main, \r\n          }}>\r\n            <NoteAddIcon sx={{ fontSize: '2rem' }} />\r\n          </Box>\r\n          <Typography variant=\"body1\" sx={{ fontWeight: 500, color: 'text.primary' }}>\r\n            No notes for {format(new Date(), 'EEEE')}\r\n          </Typography>\r\n          <Typography variant=\"body2\" sx={{ color: 'text.secondary', maxWidth: '80%' }}>\r\n            Add notes about market conditions, your trading mindset, or lessons learned for today.\r\n          </Typography>\r\n        </Box>\r\n      )}\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default DayNoteCard;\r\n","import React, { useMemo } from 'react';\nimport {\n  Drawer,\n  Box,\n  Typography,\n  IconButton,\n  Chip,\n  alpha,\n  useTheme,\n  Divider,\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemText\n} from '@mui/material';\nimport {\n  Close as CloseIcon,\n  PushPin as PinIcon,\n  TrendingUp as WinIcon,\n  TrendingDown as LossIcon,\n  Remove as BreakevenIcon,\n  CalendarToday as DateIcon\n} from '@mui/icons-material';\nimport { Trade } from '../types/trade';\nimport { format } from 'date-fns';\n\ninterface PinnedTradesDrawerProps {\n  open: boolean;\n  onClose: () => void;\n  trades: Trade[];\n  onTradeClick?: (trade: Trade) => void;\n}\n\nconst PinnedTradesDrawer: React.FC<PinnedTradesDrawerProps> = ({\n  open,\n  onClose,\n  trades,\n  onTradeClick\n}) => {\n  const theme = useTheme();\n\n  // Get pinned trades\n  const pinnedTrades = useMemo(() => {\n    return trades.filter(trade => trade.isPinned);\n  }, [trades]);\n\n  // Sort pinned trades by date (most recent first)\n  const sortedPinnedTrades = useMemo(() => {\n    return [...pinnedTrades].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  }, [pinnedTrades]);\n\n  const getTradeTypeIcon = (type: Trade['type']) => {\n    switch (type) {\n      case 'win':\n        return <WinIcon sx={{ fontSize: 20, color: 'success.main' }} />;\n      case 'loss':\n        return <LossIcon sx={{ fontSize: 20, color: 'error.main' }} />;\n      case 'breakeven':\n        return <BreakevenIcon sx={{ fontSize: 20, color: 'text.secondary' }} />;\n    }\n  };\n\n  const getTradeTypeColor = (type: Trade['type']) => {\n    switch (type) {\n      case 'win':\n        return theme.palette.success.main;\n      case 'loss':\n        return theme.palette.error.main;\n      case 'breakeven':\n        return theme.palette.text.secondary;\n    }\n  };\n\n\n\n  return (\n    <Drawer\n      anchor=\"right\"\n      open={open}\n      onClose={onClose}\n      sx={{\n        zIndex: 1300, // Higher than AppBar (1100) and other components\n        '& .MuiDrawer-paper': {\n          width: { xs: '100%', sm: 400 },\n          maxWidth: '100vw',\n          zIndex: 1300 // Ensure the paper also has high z-index\n        }\n      }}\n    >\n      <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n        {/* Header */}\n        <Box sx={{\n          p: 2,\n          borderBottom: `1px solid ${theme.palette.divider}`,\n          display: 'flex',\n          alignItems: 'center',\n          gap: 2\n        }}>\n          <Box sx={{\n            p: 1,\n            borderRadius: 1,\n            backgroundColor: alpha(theme.palette.primary.main, 0.1),\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center'\n          }}>\n            <PinIcon sx={{ color: 'primary.main', fontSize: 20 }} />\n          </Box>\n          <Typography variant=\"h6\" sx={{ flex: 1, fontWeight: 600 }}>\n            Pinned Trades\n          </Typography>\n          {sortedPinnedTrades.length > 0 && (\n            <Chip\n              label={sortedPinnedTrades.length}\n              size=\"small\"\n              sx={{\n                backgroundColor: alpha(theme.palette.primary.main, 0.1),\n                color: 'primary.main',\n                fontWeight: 600\n              }}\n            />\n          )}\n          <IconButton onClick={onClose} size=\"small\">\n            <CloseIcon />\n          </IconButton>\n        </Box>\n\n        {/* Content */}\n        <Box sx={{ flex: 1, overflow: 'auto' }}>\n          {sortedPinnedTrades.length === 0 ? (\n            <Box\n              sx={{\n                p: 4,\n                textAlign: 'center',\n                height: '100%',\n                display: 'flex',\n                flexDirection: 'column',\n                justifyContent: 'center',\n                alignItems: 'center'\n              }}\n            >\n              <PinIcon sx={{ fontSize: 64, color: 'text.disabled', mb: 2 }} />\n              <Typography variant=\"h6\" sx={{ mb: 1, fontWeight: 600, color: 'text.secondary' }}>\n                No Pinned Trades\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ textAlign: 'center', maxWidth: 300 }}>\n                Pin important trades to keep them easily accessible. Open any trade and click the pin button to add trades here.\n              </Typography>\n            </Box>\n          ) : (\n            <List sx={{ p: 0, overflow: 'auto', height: '100%' }}>\n              {sortedPinnedTrades.map((trade, index) => (\n                <React.Fragment key={trade.id}>\n                  <ListItem disablePadding>\n                    <ListItemButton\n                      onClick={() => onTradeClick?.(trade)}\n                      sx={{\n                        p: 2,\n                        '&:hover': {\n                          backgroundColor: alpha(theme.palette.primary.main, 0.05)\n                        }\n                      }}\n                    >\n                      <Box sx={{ display: 'flex', alignItems: 'flex-start', gap: 1.5, width: '100%' }}>\n                        {/* Trade Type Icon */}\n                        <Box sx={{ mt: 0.5 }}>\n                          {getTradeTypeIcon(trade.type)}\n                        </Box>\n\n                        {/* Trade Content */}\n                        <Box sx={{ flex: 1, minWidth: 0 }}>\n                          <ListItemText\n                            primary={\n                              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 0.5 }}>\n                                <Typography\n                                  variant=\"subtitle1\"\n                                  sx={{\n                                    fontWeight: 600,\n                                    color: 'text.primary',\n                                    overflow: 'hidden',\n                                    textOverflow: 'ellipsis',\n                                    whiteSpace: 'nowrap',\n                                    flex: 1,\n                                    mr: 1\n                                  }}\n                                >\n                                  {trade.name || `Trade ${trade.id.slice(-6)}`}\n                                </Typography>\n                                <Typography\n                                  variant=\"subtitle1\"\n                                  sx={{\n                                    fontWeight: 700,\n                                    color: getTradeTypeColor(trade.type),\n                                    whiteSpace: 'nowrap'\n                                  }}\n                                >\n                                  {trade.amount > 0 ? '+' : ''}${Math.abs(trade.amount).toFixed(2)}\n                                </Typography>\n                              </Box>\n                            }\n                            secondary={\n                              <Box>\n                                {/* Date and Session */}\n                                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>\n                                  <DateIcon sx={{ fontSize: 16, color: 'text.secondary' }} />\n                                  <Typography variant=\"body2\" color=\"text.secondary\">\n                                    {format(new Date(trade.date), 'MMM dd, yyyy')}\n                                  </Typography>\n                                  {trade.session && (\n                                    <Chip\n                                      label={trade.session}\n                                      size=\"small\"\n                                      variant=\"outlined\"\n                                      sx={{\n                                        height: 20,\n                                        fontSize: '0.7rem',\n                                        borderColor: alpha(theme.palette.text.secondary, 0.3),\n                                        color: 'text.secondary'\n                                      }}\n                                    />\n                                  )}\n                                </Box>\n\n                                {/* Tags */}\n                                {trade.tags && trade.tags.length > 0 && (\n                                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n                                    {trade.tags.slice(0, 4).map((tag) => (\n                                      <Chip\n                                        key={tag}\n                                        label={tag}\n                                        size=\"small\"\n                                        variant=\"outlined\"\n                                        sx={{\n                                          height: 20,\n                                          fontSize: '0.7rem',\n                                          borderColor: alpha(theme.palette.primary.main, 0.3),\n                                          color: 'primary.main'\n                                        }}\n                                      />\n                                    ))}\n                                    {trade.tags.length > 4 && (\n                                      <Chip\n                                        label={`+${trade.tags.length - 4}`}\n                                        size=\"small\"\n                                        variant=\"outlined\"\n                                        sx={{\n                                          height: 20,\n                                          fontSize: '0.7rem',\n                                          borderColor: alpha(theme.palette.text.secondary, 0.3),\n                                          color: 'text.secondary'\n                                        }}\n                                      />\n                                    )}\n                                  </Box>\n                                )}\n                              </Box>\n                            }\n                          />\n                        </Box>\n                      </Box>\n                    </ListItemButton>\n                  </ListItem>\n                  {index < sortedPinnedTrades.length - 1 && <Divider />}\n                </React.Fragment>\n              ))}\n            </List>\n          )}\n        </Box>\n      </Box>\n    </Drawer>\n  );\n};\n\nexport default PinnedTradesDrawer;\n","import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport {\n  Dialog,\n  Box,\n  IconButton,\n  Typography,\n  useTheme,\n  alpha,\n  Chip,\n  Tooltip\n} from '@mui/material';\nimport {\n  Close as CloseIcon,\n  ArrowBackIos as ArrowBackIcon,\n  ArrowForwardIos as ArrowForwardIcon,\n  CalendarToday as CalendarIcon\n} from '@mui/icons-material';\nimport { format } from 'date-fns';\nimport { Trade } from '../types/trade';\nimport TradeDetailExpanded from './TradeDetailExpanded';\nimport { scrollbarStyles } from '../styles/scrollbarStyles';\n\ninterface TradeGalleryDialogProps {\n  open: boolean;\n  onClose: () => void;\n  trades: Trade[];\n  initialTradeId?: string;\n  onUpdateTradeProperty?: (tradeId: string, updateCallback: (trade: Trade) => Trade) => Promise<Trade | undefined>;\n  setZoomedImage: (url: string, allImages?: string[], initialIndex?: number) => void;\n  title?: string;\n  calendarId?: string;\n  // Optional props for trade link navigation in notes\n  onOpenGalleryMode?: (trades: any[], initialTradeId?: string, title?: string) => void;\n}\n\nconst TradeGalleryDialog: React.FC<TradeGalleryDialogProps> = ({\n  open,\n  onClose,\n  trades,\n  initialTradeId,\n  onUpdateTradeProperty,\n  setZoomedImage,\n  title = \"Trade Gallery\",\n  calendarId,\n  onOpenGalleryMode\n}) => {\n  const theme = useTheme();\n  \n  // Find initial index based on initialTradeId\n  const initialIndex = useMemo(() => {\n    if (!initialTradeId) return 0;\n    const index = trades.findIndex(trade => trade.id === initialTradeId);\n    return index >= 0 ? index : 0;\n  }, [trades, initialTradeId]);\n\n  const [currentIndex, setCurrentIndex] = useState(initialIndex);\n\n  // Update current index when initialTradeId changes\n  useEffect(() => {\n    setCurrentIndex(initialIndex);\n  }, [initialIndex]);\n\n  // Get current trade\n  const currentTrade = useMemo(() => {\n    return trades[currentIndex] || null;\n  }, [trades, currentIndex]);\n\n  // Navigation functions\n  const navigateNext = useCallback(() => {\n    if (trades.length <= 1) return;\n    setCurrentIndex((prev) => (prev + 1) % trades.length);\n  }, [trades.length]);\n\n  const navigatePrevious = useCallback(() => {\n    if (trades.length <= 1) return;\n    setCurrentIndex((prev) => (prev - 1 + trades.length) % trades.length);\n  }, [trades.length]);\n\n  // Handle keyboard navigation\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (!open) return;\n\n      if (e.key === 'ArrowLeft') {\n        e.preventDefault();\n        navigatePrevious();\n      } else if (e.key === 'ArrowRight') {\n        e.preventDefault();\n        navigateNext();\n      } else if (e.key === 'Escape') {\n        e.preventDefault();\n        onClose();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [open, navigatePrevious, navigateNext, onClose]);\n\n  if (!currentTrade) {\n    return null;\n  }\n\n  return (\n    <Dialog\n      open={open}\n      onClose={onClose}\n      maxWidth=\"md\"\n      fullWidth\n      PaperProps={{\n        sx: {\n          height: '90vh',\n          maxHeight: '90vh',\n          backgroundColor: theme.palette.background.default\n        }\n      }}\n    >\n      {/* Header */}\n      <Box sx={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        p: 2,\n        borderBottom: `1px solid ${theme.palette.divider}`,\n        backgroundColor: theme.palette.background.paper\n      }}>\n        {/* Navigation and Title */}\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, flex: 1 }}>\n          {/* Previous Button */}\n          <Tooltip title=\"Previous trade (←)\">\n            <span>\n              <IconButton\n                onClick={navigatePrevious}\n                disabled={trades.length <= 1}\n                sx={{\n                  color: trades.length <= 1 ? 'text.disabled' : 'text.primary',\n                  '&:hover': {\n                    backgroundColor: alpha(theme.palette.primary.main, 0.1)\n                  }\n                }}\n              >\n                <ArrowBackIcon />\n              </IconButton>\n            </span>\n          </Tooltip>\n\n          {/* Title and Counter */}\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 0.5 }}>\n            <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n              {title}\n            </Typography>\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n              <Chip\n                size=\"small\"\n                label={`${currentIndex + 1} of ${trades.length}`}\n                sx={{\n                  backgroundColor: alpha(theme.palette.primary.main, 0.1),\n                  color: 'primary.main',\n                  fontWeight: 600\n                }}\n              />\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\n                <CalendarIcon sx={{ fontSize: 16, color: 'text.secondary' }} />\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  {format(new Date(currentTrade.date), 'MMM d, yyyy')}\n                </Typography>\n              </Box>\n            </Box>\n          </Box>\n\n          {/* Next Button */}\n          <Tooltip title=\"Next trade (→)\">\n            <span>\n              <IconButton\n                onClick={navigateNext}\n                disabled={trades.length <= 1}\n                sx={{\n                  color: trades.length <= 1 ? 'text.disabled' : 'text.primary',\n                  '&:hover': {\n                    backgroundColor: alpha(theme.palette.primary.main, 0.1)\n                  }\n                }}\n              >\n                <ArrowForwardIcon />\n              </IconButton>\n            </span>\n          </Tooltip>\n        </Box>\n\n        {/* Close Button */}\n        <IconButton\n          onClick={onClose}\n          sx={{\n            color: 'text.secondary',\n            '&:hover': {\n              backgroundColor: alpha(theme.palette.error.main, 0.1),\n              color: 'error.main'\n            }\n          }}\n        >\n          <CloseIcon />\n        </IconButton>\n      </Box>\n\n      {/* Content */}\n      <Box sx={{\n        flex: 1,\n        overflow: 'auto',\n        ...scrollbarStyles(theme)\n      }}>\n        <TradeDetailExpanded\n          tradeData={currentTrade}\n          isExpanded={true}\n          setZoomedImage={setZoomedImage}\n          onUpdateTradeProperty={onUpdateTradeProperty}\n          calendarId={calendarId}\n          trades={trades}\n          onOpenGalleryMode={onOpenGalleryMode}\n        />\n      </Box>\n    </Dialog>\n  );\n};\n\nexport default TradeGalleryDialog;\n","import React, { useMemo, useState, useEffect } from 'react';\r\nimport {\r\n  Box,\r\n  Button,\r\n  Dialog,\r\n  DialogContent,\r\n  DialogTitle,\r\n  IconButton,\r\n  Typography,\r\n  useTheme\r\n} from '@mui/material';\r\nimport { Close as CloseIcon, Analytics as AnalyticsIcon } from '@mui/icons-material';\r\nimport { Trade } from '../types/trade';\r\nimport { Calendar } from '../types/calendar';\r\nimport { DynamicRiskSettings } from '../utils/dynamicRiskUtils';\r\nimport { scrollbarStyles } from '../styles/scrollbarStyles';\r\nimport { PnLChartsWrapper, SessionPerformanceAnalysis, TradesListDialog, WinLossDistribution } from './charts';\r\nimport ScoreSection from './ScoreSection';\r\nimport PerformanceCharts from './PerformanceCharts';\r\nimport {\r\n  calculateChartData,\r\n  calculateSessionStats,\r\n  calculateTargetValue,\r\n  calculateDrawdownViolationValue,\r\n  TimePeriod,\r\n  getFilteredTrades\r\n} from '../utils/chartDataUtils';\r\n\r\ninterface MonthlyStatisticsSectionProps {\r\n  trades: Trade[];\r\n  selectedDate: Date;\r\n  accountBalance: number;\r\n  maxDailyDrawdown: number;\r\n  monthlyTarget?: number;\r\n  calendarId: string;\r\n  scoreSettings?: import('../types/score').ScoreSettings;\r\n  onUpdateTradeProperty?: (tradeId: string, updateCallback: (trade: Trade) => Trade) => Promise<Trade | undefined>;\r\n  onUpdateCalendarProperty?: (calendarId: string, updateCallback: (calendar: Calendar) => Calendar) => Promise<void>;\r\n  dynamicRiskSettings?: DynamicRiskSettings;\r\n  allTags?: string[]; // Add allTags prop to receive calendar.tags\r\n  // Optional handlers for trade interactions\r\n  onEditTrade?: (trade: Trade) => void;\r\n  onDeleteTrade?: (tradeId: string) => void;\r\n  onDeleteMultipleTrades?: (tradeIds: string[]) => void;\r\n  onZoomImage?: (imageUrl: string, allImages?: string[], initialIndex?: number) => void;\r\n  onOpenGalleryMode?: (trades: Trade[], initialTradeId?: string, title?: string) => void;\r\n}\r\n\r\ninterface MultipleTradesDialog {\r\n  open: boolean;\r\n  trades: Trade[];\r\n  date: string;\r\n  expandedTradeId: string | null;\r\n}\r\n\r\nconst MonthlyStatisticsSection: React.FC<MonthlyStatisticsSectionProps> = ({\r\n  trades,\r\n  selectedDate,\r\n  accountBalance,\r\n  maxDailyDrawdown,\r\n  monthlyTarget,\r\n  calendarId,\r\n  scoreSettings,\r\n  onUpdateTradeProperty,\r\n  onUpdateCalendarProperty,\r\n  dynamicRiskSettings,\r\n  allTags: propAllTags,\r\n  onEditTrade,\r\n  onDeleteTrade,\r\n  onDeleteMultipleTrades,\r\n  onZoomImage,\r\n  onOpenGalleryMode\r\n}) => {\r\n  const theme = useTheme();\r\n  const [multipleTradesDialog, setMultipleTradesDialog] = useState<MultipleTradesDialog>({\r\n    open: false,\r\n    trades: [],\r\n    date: '',\r\n    expandedTradeId: null\r\n  });\r\n  const [isPerformanceDialogOpen, setIsPerformanceDialogOpen] = useState(false);\r\n  const [comparisonTags, setComparisonTags] = useState<string[]>([]);\r\n  const [chartData, setChartData] = useState<any[]>([]);\r\n  const [isCalculatingChartData, setIsCalculatingChartData] = useState(false);\r\n\r\n  const timePeriod: TimePeriod = 'month';\r\n\r\n  // Calculate chart data using the async utility function\r\n  useEffect(() => {\r\n    const calculateChartDataAsync = async () => {\r\n      setIsCalculatingChartData(true);\r\n      try {\r\n        const data = await calculateChartData(trades, selectedDate, timePeriod);\r\n        setChartData(data);\r\n      } catch (error) {\r\n        console.error('Error calculating chart data:', error);\r\n        setChartData([]);\r\n      } finally {\r\n        setIsCalculatingChartData(false);\r\n      }\r\n    };\r\n\r\n    calculateChartDataAsync();\r\n  }, [trades, selectedDate, timePeriod]);\r\n\r\n  // Calculate session statistics using the utility function\r\n  const sessionStats = useMemo(() => {\r\n    return calculateSessionStats(trades, selectedDate, timePeriod, accountBalance);\r\n  }, [trades, selectedDate, timePeriod, accountBalance]);\r\n\r\n  // Calculate target value using the utility function\r\n  const targetValue = useMemo(() => {\r\n    return calculateTargetValue(monthlyTarget, accountBalance);\r\n  }, [monthlyTarget, accountBalance]);\r\n\r\n  // Calculate drawdown violation value using the utility function\r\n  const drawdownViolationValue = useMemo(() => {\r\n    return calculateDrawdownViolationValue(maxDailyDrawdown, accountBalance);\r\n  }, [maxDailyDrawdown, accountBalance]);\r\n\r\n  // Calculate win/loss distribution data\r\n  const winLossData = useMemo(() => {\r\n    const filteredTrades = getFilteredTrades(trades, selectedDate, timePeriod);\r\n    const winners = filteredTrades.filter(trade => trade.type === 'win').length;\r\n    const losers = filteredTrades.filter(trade => trade.type === 'loss').length;\r\n    const breakevens = filteredTrades.filter(trade => trade.type === 'breakeven').length;\r\n\r\n    return [\r\n      { name: 'Wins', value: winners },\r\n      { name: 'Losses', value: losers },\r\n      { name: 'Breakeven', value: breakevens }\r\n    ].filter(item => item.value > 0);\r\n  }, [trades, selectedDate, timePeriod]);\r\n\r\n  // Use calendar.tags from props, fallback to extracting from trades if not available\r\n  const allTags = useMemo(() => {\r\n    if (propAllTags && propAllTags.length > 0) {\r\n      return propAllTags;\r\n    }\r\n\r\n    // Fallback: extract from trades (for backwards compatibility)\r\n    const filteredTrades = getFilteredTrades(trades, selectedDate, timePeriod);\r\n    const tagSet = new Set<string>();\r\n    filteredTrades.forEach(trade => {\r\n      if (trade.tags) {\r\n        trade.tags.forEach(tag => tagSet.add(tag));\r\n      }\r\n    });\r\n    return Array.from(tagSet).sort();\r\n  }, [propAllTags, trades, selectedDate, timePeriod]);\r\n\r\n  // Calculate tag stats for distribution\r\n  const tagStats = useMemo(() => {\r\n    const filteredTrades = getFilteredTrades(trades, selectedDate, timePeriod);\r\n    const tagCounts = new Map<string, number>();\r\n\r\n    filteredTrades.forEach(trade => {\r\n      if (trade.tags) {\r\n        trade.tags.forEach(tag => {\r\n          tagCounts.set(tag, (tagCounts.get(tag) || 0) + 1);\r\n        });\r\n      }\r\n    });\r\n\r\n    return Array.from(tagCounts.entries()).map(([tag, count]) => ({\r\n      tag,\r\n      totalTrades: count\r\n    }));\r\n  }, [trades, selectedDate, timePeriod]);\r\n\r\n  // Handle pie click to show trades\r\n  const handlePieClick = (category: string) => {\r\n    const filteredTrades = getFilteredTrades(trades, selectedDate, timePeriod);\r\n    let categoryTrades: Trade[] = [];\r\n\r\n    if (category === 'Wins') {\r\n      categoryTrades = filteredTrades.filter(trade => trade.type === 'win');\r\n    } else if (category === 'Losses') {\r\n      categoryTrades = filteredTrades.filter(trade => trade.type === 'loss');\r\n    } else if (category === 'Breakeven') {\r\n      categoryTrades = filteredTrades.filter(trade => trade.type === 'breakeven');\r\n    } else {\r\n      // It's a tag\r\n      categoryTrades = filteredTrades.filter(trade =>\r\n        trade.tags && trade.tags.includes(category)\r\n      );\r\n    }\r\n\r\n    if (categoryTrades.length > 0) {\r\n      setMultipleTradesDialog({\r\n        open: true,\r\n        trades: categoryTrades,\r\n        date: `${category} Trades`,\r\n        expandedTradeId: null\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* View Details Stats Button */}\r\n      <Box sx={{ mb: 2, display: 'flex', justifyContent: 'flex-end' }}>\r\n        <Button\r\n          variant=\"outlined\"\r\n          startIcon={<AnalyticsIcon />}\r\n          onClick={() => setIsPerformanceDialogOpen(true)}\r\n          sx={{\r\n            borderRadius: 2,\r\n            textTransform: 'none',\r\n            fontWeight: 600\r\n          }}\r\n        >\r\n          View Details Stats\r\n        </Button>\r\n      </Box>\r\n\r\n      {/* Score Section */}\r\n      <ScoreSection\r\n        trades={trades}\r\n        selectedDate={selectedDate}\r\n        calendarId={calendarId}\r\n        scoreSettings={scoreSettings}\r\n        onUpdateCalendarProperty={onUpdateCalendarProperty}\r\n        accountBalance={accountBalance}\r\n        dynamicRiskSettings={dynamicRiskSettings}\r\n        allTags={allTags}\r\n      />\r\n      {/* P&L Charts Section */}\r\n      <PnLChartsWrapper\r\n        chartData={chartData}\r\n        targetValue={targetValue}\r\n        monthlyTarget={monthlyTarget}\r\n        drawdownViolationValue={drawdownViolationValue}\r\n        setMultipleTradesDialog={setMultipleTradesDialog}\r\n        timePeriod={timePeriod}\r\n      />\r\n\r\n      {/* Session Performance and Win Distribution side by side */}\r\n      <Box sx={{ display: 'flex', flexDirection: { xs: 'column', md: 'row' }, gap: 3, mb: 3 }}>\r\n        <Box sx={{ flex: 1, width: { xs: '100%', md: '50%' } }}>\r\n          <SessionPerformanceAnalysis\r\n            sessionStats={sessionStats}\r\n            trades={trades}\r\n            selectedDate={selectedDate}\r\n            timePeriod={timePeriod}\r\n            setMultipleTradesDialog={setMultipleTradesDialog}\r\n          />\r\n        </Box>\r\n        <Box sx={{ flex: 1, width: { xs: '100%', md: '50%' } }}>\r\n          <WinLossDistribution\r\n            winLossData={winLossData}\r\n            comparisonWinLossData={null}\r\n            allTags={allTags}\r\n            comparisonTags={comparisonTags}\r\n            setComparisonTags={setComparisonTags}\r\n            onPieClick={handlePieClick}\r\n            tagStats={tagStats}\r\n          />\r\n        </Box>\r\n      </Box>\r\n\r\n\r\n\r\n      {/* Trades List Dialog */}\r\n      <TradesListDialog\r\n        open={multipleTradesDialog.open}\r\n        onClose={() => setMultipleTradesDialog(prev => ({ ...prev, open: false }))}\r\n        trades={multipleTradesDialog.trades}\r\n        date={multipleTradesDialog.date}\r\n\r\n        expandedTradeId={multipleTradesDialog.expandedTradeId}\r\n        onTradeExpand={(tradeId) =>\r\n          setMultipleTradesDialog(prev => ({\r\n            ...prev,\r\n            expandedTradeId: prev.expandedTradeId === tradeId ? null : tradeId\r\n          }))\r\n        }\r\n        onUpdateTradeProperty={onUpdateTradeProperty}\r\n        onZoomImage={onZoomImage || (() => { })}\r\n        accountBalance={accountBalance}\r\n        allTrades={trades}\r\n        onEditClick={onEditTrade}\r\n        onDeleteClick={onDeleteTrade}\r\n        onDeleteMultiple={onDeleteMultipleTrades}\r\n        onOpenGalleryMode={onOpenGalleryMode}\r\n      />\r\n\r\n      {/* Performance Details Dialog */}\r\n      <Dialog\r\n        open={isPerformanceDialogOpen}\r\n        onClose={() => setIsPerformanceDialogOpen(false)}\r\n        maxWidth=\"lg\"\r\n        fullWidth\r\n        sx={{\r\n          '& .MuiDialog-paper': {\r\n            borderRadius: 2,\r\n            boxShadow: 'none',\r\n            border: `1px solid ${theme.palette.divider}`,\r\n            maxHeight: '90vh',\r\n            overflow: 'hidden'\r\n          },\r\n          '& .MuiDialogContent-root': {\r\n            ...scrollbarStyles(theme)\r\n          }\r\n        }}\r\n      >\r\n        <DialogTitle>\r\n          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', width: '100%' }}>\r\n            <Typography variant=\"h6\">\r\n              Performance Analytics\r\n            </Typography>\r\n            <IconButton onClick={() => setIsPerformanceDialogOpen(false)} size=\"small\">\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </Box>\r\n        </DialogTitle>\r\n        <DialogContent sx={{ p: 0 }}>\r\n          <PerformanceCharts\r\n            trades={trades}\r\n            selectedDate={selectedDate}\r\n            accountBalance={accountBalance}\r\n            maxDailyDrawdown={maxDailyDrawdown}\r\n            monthlyTarget={monthlyTarget}\r\n            calendarId={calendarId}\r\n            scoreSettings={scoreSettings}\r\n            onUpdateTradeProperty={onUpdateTradeProperty}\r\n            onUpdateCalendarProperty={onUpdateCalendarProperty}\r\n            dynamicRiskSettings={dynamicRiskSettings}\r\n            onEditTrade={onEditTrade}\r\n            onDeleteTrade={onDeleteTrade}\r\n            onOpenGalleryMode={onOpenGalleryMode}\r\n          />\r\n        </DialogContent>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MonthlyStatisticsSection;\r\n","import React from 'react';\nimport {\n  Box,\n  IconButton,\n  Typography,\n  useTheme,\n  alpha\n} from '@mui/material';\nimport {\n  ChevronLeft,\n  ChevronRight\n} from '@mui/icons-material';\nimport { format } from 'date-fns';\n\ninterface FloatingMonthNavigationProps {\n  currentDate: Date;\n  isVisible: boolean;\n  onPrevMonth: () => void;\n  onNextMonth: () => void;\n  onMonthClick: () => void;\n}\n\nconst FloatingMonthNavigation: React.FC<FloatingMonthNavigationProps> = ({\n  currentDate,\n  isVisible,\n  onPrevMonth,\n  onNextMonth,\n  onMonthClick\n}) => {\n  const theme = useTheme();\n\n  return (\n    <>\n      {isVisible && (\n        <Box\n          sx={{\n            position: 'fixed',\n            top: 80,\n            right: 20,\n            zIndex: 1200,\n            backgroundColor: alpha(theme.palette.background.paper, 0.95),\n            backdropFilter: 'blur(8px)',\n            borderRadius: 3,\n            boxShadow: theme.shadows[4],\n            border: `1px solid ${alpha(theme.palette.divider, 0.2)}`,\n            p: 1,\n            display: 'flex',\n            alignItems: 'center',\n            gap: 1,\n            transition: 'opacity 0.3s ease-in-out',\n            opacity: isVisible ? 1 : 0,\n            visibility: isVisible ? 'visible' : 'hidden',\n            pointerEvents: isVisible ? 'auto' : 'none'\n          }}\n        >\n          <IconButton\n            onClick={onPrevMonth}\n            size=\"small\"\n            sx={{\n              color: 'text.secondary',\n              '&:hover': {\n                color: 'primary.main',\n                bgcolor: alpha(theme.palette.primary.main, 0.08)\n              }\n            }}\n          >\n            <ChevronLeft />\n          </IconButton>\n          <Typography\n            variant=\"body1\"\n            sx={{\n              fontWeight: 600,\n              cursor: 'pointer',\n              minWidth: '140px',\n              textAlign: 'center',\n              fontSize: '0.95rem',\n              color: 'text.primary',\n              borderRadius: 1,\n              px: 1,\n              py: 0.5,\n              '&:hover': {\n                color: 'primary.main',\n                bgcolor: alpha(theme.palette.primary.main, 0.05)\n              }\n            }}\n            onClick={onMonthClick}\n          >\n            {format(currentDate, 'MMM yyyy')}\n          </Typography>\n          <IconButton\n            onClick={onNextMonth}\n            size=\"small\"\n            sx={{\n              color: 'text.secondary',\n              '&:hover': {\n                color: 'primary.main',\n                bgcolor: alpha(theme.palette.primary.main, 0.08)\n              }\n            }}\n          >\n            <ChevronRight />\n          </IconButton>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default FloatingMonthNavigation;\n","import React, { useState, useMemo, useCallback, useEffect, useRef } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport type { FC } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  IconButton,\r\n  Button,\r\n\r\n  Stack,\r\n  useTheme,\r\n  alpha,\r\n  Tooltip,\r\n  SxProps,\r\n  Theme,\r\n  AppBar,\r\n  Toolbar,\r\n  Avatar,\r\n  Snackbar,\r\n  Alert,\r\n  Badge,\r\n  Fab,\r\n} from '@mui/material';\r\nimport {\r\n  ChevronLeft,\r\n  ChevronRight,\r\n  TrendingUp,\r\n  Today,\r\n  ArrowBack,\r\n  Brightness4 as DarkModeIcon,\r\n  Brightness7 as LightModeIcon,\r\n  Google as GoogleIcon,\r\n  Logout as LogoutIcon,\r\n  FilterAlt,\r\n  Clear,\r\n  PushPin as PinIcon,\r\n  Info as InfoIcon,\r\n  LocalOffer as TagIcon,\r\n  Search as SearchIcon,\r\n  ViewCarousel as GalleryIcon,\r\n} from '@mui/icons-material';\r\nimport {\r\n  format,\r\n  addMonths,\r\n  subMonths,\r\n  startOfMonth,\r\n  endOfMonth,\r\n  eachDayOfInterval,\r\n  eachWeekOfInterval,\r\n  isSameMonth,\r\n  isSameDay,\r\n  startOfWeek,\r\n  endOfWeek,\r\n  isSameWeek,\r\n  isToday\r\n} from 'date-fns';\r\nimport { formatCurrency } from '../utils/formatters';\r\nimport CalendarNote from './CalendarNote';\r\nimport { Trade } from '../types/trade';\r\nimport DayDialog from './trades/DayDialog';\r\nimport SelectDateDialog from './SelectDateDialog';\r\n\r\nimport TagFilterDialog from './TagFilterDialog';\r\nimport TagManagementDialog from './TagManagementDialog';\r\nimport TagManagementDrawer from './TagManagementDrawer';\r\nimport SearchDrawer from './SearchDrawer';\r\nimport TargetBadge from './TargetBadge';\r\nimport { CalendarCell, WeekdayHeader } from './CalendarGrid';\r\n\r\nimport {\r\n  StyledCalendarDay,\r\n  DayStatus,\r\n  AnimatedPulse,\r\n  DayNumber,\r\n  TradeAmount,\r\n  TradeCount,\r\n\r\n} from './StyledComponents';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n\r\nimport ImageZoomDialog, { ImageZoomProp } from './ImageZoomDialog';\r\nimport AppHeader from './common/AppHeader';\r\nimport { NewTradeForm, TradeImage } from './trades/TradeForm';\r\nimport DayNotesDialog from './DayNotesDialog';\r\nimport { Calendar } from '../types/calendar';\r\nimport MonthlyStats from './MonthlyStats';\r\nimport AccountStats from './AccountStats';\r\nimport DayNoteCard from './DayNoteCard';\r\nimport TradeFormDialog, { createEditTradeData } from './trades/TradeFormDialog';\r\nimport ConfirmationDialog from './common/ConfirmationDialog';\r\nimport PinnedTradesDrawer from './PinnedTradesDrawer';\r\nimport TradeGalleryDialog from './TradeGalleryDialog';\r\n\r\nimport { calculatePercentageOfValueAtDate, DynamicRiskSettings } from '../utils/dynamicRiskUtils';\r\n\r\nimport MonthlyStatisticsSection from './MonthlyStatisticsSection';\r\nimport FloatingMonthNavigation from './FloatingMonthNavigation';\r\nimport { calculateDayStats, calculateTargetProgress } from '../utils/statsUtils';\r\n\r\ninterface TradeCalendarProps {\r\n  trades: Trade[];\r\n  accountBalance: number;\r\n  maxDailyDrawdown: number;\r\n  weeklyTarget?: number;\r\n  monthlyTarget?: number;\r\n  yearlyTarget?: number;\r\n  dynamicRiskSettings: DynamicRiskSettings;\r\n  requiredTagGroups?: string[];\r\n  allTags?: string[]; // Add allTags prop to receive calendar.tags\r\n  onAddTrade?: (trade: Trade) => Promise<void>;\r\n  onEditTrade?: (trade: Trade) => Promise<void>;\r\n  onUpdateTradeProperty?: (tradeId: string, updateCallback: (trade: Trade) => Trade, createIfNotExists?: (tradeId: string) => Trade) => Promise<Trade | undefined>;\r\n  onUpdateCalendarProperty?: (calendarId: string, updateCallback: (calendar: Calendar) => Calendar) => Promise<void>;\r\n\r\n  onImageUpload?: (tradeId: string, image: TradeImage, add: boolean) => Promise<void>;\r\n  onDeleteTrade?: (tradeId: string) => Promise<void>;\r\n  onAccountBalanceChange: (balance: number) => void;\r\n  onTagUpdated?: (oldTag: string, newTag: string) => void;\r\n  onImportTrades?: (trades: Trade[]) => void;\r\n  calendarName?: string,\r\n  calendarNote?: string;\r\n  calendarDayNotes?: Map<string, string>;\r\n  // Score settings\r\n  scoreSettings?: import('../types/score').ScoreSettings;\r\n  onClearMonthTrades: (month: number, year: number) => void;\r\n  onToggleTheme: () => void;\r\n  mode: 'light' | 'dark';\r\n  // Pre-calculated statistics\r\n  totalPnL?: number;\r\n  // Dynamic risk toggle\r\n  onToggleDynamicRisk?: (useActualAmounts: boolean) => void;\r\n  // Loading state\r\n  isLoadingTrades?: boolean;\r\n} \r\n\r\n\r\n\r\ninterface WeeklyPnLProps {\r\n  date: Date;\r\n  trades: Trade[];\r\n  monthStart: Date;\r\n  weekIndex: number;\r\n  currentMonth: number;\r\n  accountBalance: number;\r\n  weeklyTarget?: number;\r\n  sx?: SxProps<Theme>;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst WeeklyPnL: React.FC<WeeklyPnLProps> = ({ date, trades, monthStart, weekIndex, currentMonth, accountBalance, weeklyTarget, sx }) => {\r\n  const weekStart = startOfWeek(date, { weekStartsOn: 0 });\r\n  const weekEnd = endOfWeek(date, { weekStartsOn: 0 });\r\n\r\n  const weekTrades = trades.filter(trade =>\r\n    isSameWeek(new Date(trade.date), weekStart, { weekStartsOn: 0 }) &&\r\n    new Date(trade.date).getMonth() === currentMonth\r\n  );\r\n  \r\n  \r\n    // Calculate net amount for the week\r\n    const netAmount = weekTrades.reduce((sum, trade) => sum + trade.amount, 0);\r\n  \r\n    // Calculate percentage loss/gain relative to account value at start of week (excluding current week trades)\r\n    const percentage = trades\r\n      ? calculatePercentageOfValueAtDate(netAmount, accountBalance, trades, weekStart).toFixed(1)\r\n      : accountBalance > 0 ? ((netAmount / accountBalance) * 100).toFixed(1) : '0';\r\n\r\n \r\n  // Calculate target progress using centralized function\r\n  const targetProgressValue = weeklyTarget && weeklyTarget > 0\r\n    ? calculateTargetProgress(weekTrades, accountBalance, weeklyTarget, weekStart, trades)\r\n    : 0;\r\n  const targetProgress = targetProgressValue.toFixed(0);\r\n  const isTargetMet = weeklyTarget ? parseFloat(percentage) >= weeklyTarget : false;\r\n\r\n  return (\r\n    <Box sx={{\r\n      bgcolor: 'background.paper',\r\n      borderRadius: 1,\r\n      border: '1px solid',\r\n      borderColor: 'divider',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      height: '100%',\r\n      ...sx\r\n    }}>\r\n      <Stack spacing={0.3} sx={{ alignItems: 'center' }}>\r\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\r\n          <TrendingUp sx={{ fontSize: '0.875rem', color: 'text.secondary' }} />\r\n          <Typography variant=\"caption\" color=\"text.secondary\" sx={{ fontSize: '0.75rem' }}>\r\n            Week {weekIndex + 1}\r\n          </Typography>\r\n\r\n        </Box>\r\n        <Typography\r\n          variant=\"subtitle1\"\r\n          sx={{\r\n            fontWeight: 600,\r\n            color: netAmount > 0 ? 'success.main' : netAmount < 0 ? 'error.main' : 'text.primary',\r\n            fontSize: '0.875rem',\r\n            textAlign: 'center'\r\n          }}\r\n        >\r\n          {formatCurrency(netAmount)}\r\n        </Typography>\r\n        <Typography\r\n          variant=\"caption\"\r\n          sx={{\r\n            color: netAmount > 0 ? 'success.main' : netAmount < 0 ? 'error.main' : 'text.secondary',\r\n            fontSize: '0.75rem',\r\n            fontWeight: 500,\r\n            textAlign: 'center'\r\n          }}\r\n        >\r\n          {percentage}%\r\n        </Typography>\r\n        {weeklyTarget && (\r\n          <TargetBadge\r\n            progress={parseFloat(targetProgress)}\r\n            isMet={isTargetMet}\r\n            tooltipText={`${isTargetMet ? 'Weekly target achieved' : 'Progress towards weekly target'}: ${targetProgress}%`}\r\n          />\r\n        )}\r\n        <Typography\r\n          variant=\"caption\"\r\n          color=\"text.secondary\"\r\n          sx={{\r\n            fontSize: '0.75rem',\r\n            textAlign: 'center'\r\n          }}\r\n        >\r\n          {weekTrades.length} trades\r\n        </Typography>\r\n      </Stack>\r\n    </Box>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport const createNewTradeData = (): NewTradeForm => ({\r\n  id: uuidv4()!!,\r\n  name: '',\r\n  amount: '',\r\n  type: 'win',\r\n  entry: '',\r\n  date: null,\r\n  exit: '',\r\n  tags: [],\r\n  riskToReward: '',\r\n  partialsTaken: false,\r\n  session: '',\r\n  notes: '',\r\n  pendingImages: [],\r\n  uploadedImages: [],\r\n});\r\n\r\n\r\n\r\n \r\n// TagFilter component for filtering trades by tags\r\ninterface TagFilterProps {\r\n  allTags: string[];\r\n  selectedTags: string[];\r\n  onTagsChange: (tags: string[]) => void;\r\n  onOpenDrawer: () => void;\r\n}\r\n\r\nconst TagFilter: React.FC<TagFilterProps> = ({ allTags, selectedTags, onTagsChange, onOpenDrawer }) => {\r\n  const theme = useTheme();\r\n\r\n  const handleClearTags = () => {\r\n    onTagsChange([]);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n      <Tooltip title=\"Filter by tags\">\r\n        <Button\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          startIcon={<FilterAlt />}\r\n          onClick={onOpenDrawer}\r\n          sx={{\r\n            borderColor: selectedTags.length > 0 ? 'primary.main' : 'divider',\r\n            color: selectedTags.length > 0 ? 'primary.main' : 'text.secondary',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            '&:hover': {\r\n              borderColor: 'primary.main',\r\n              bgcolor: alpha(theme.palette.primary.main, 0.08)\r\n            }\r\n          }}\r\n        >\r\n          {selectedTags.length > 0 ? `${selectedTags.length} tag${selectedTags.length > 1 ? 's' : ''}` : 'Filter Tags'}\r\n        </Button>\r\n      </Tooltip>\r\n\r\n      {selectedTags.length > 0 && (\r\n        <Tooltip title=\"Clear all filters\">\r\n          <IconButton\r\n            size=\"small\"\r\n            onClick={handleClearTags}\r\n            sx={{\r\n              color: 'text.secondary',\r\n              '&:hover': {\r\n                color: 'error.main',\r\n                bgcolor: alpha(theme.palette.error.main, 0.08)\r\n              }\r\n            }}\r\n          >\r\n            <Clear fontSize=\"small\" />\r\n          </IconButton>\r\n        </Tooltip>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport const TradeCalendar: FC<TradeCalendarProps> = (props): React.ReactElement => {\r\n  const {\r\n    trades,\r\n    accountBalance,\r\n    maxDailyDrawdown,\r\n    weeklyTarget,\r\n    monthlyTarget,\r\n    yearlyTarget,\r\n    dynamicRiskSettings,\r\n    requiredTagGroups,\r\n    allTags: propAllTags, // Receive calendar.tags from parent\r\n    onAddTrade,\r\n    onTagUpdated,\r\n    onUpdateTradeProperty,\r\n    onUpdateCalendarProperty,\r\n    onAccountBalanceChange,\r\n    onImportTrades,\r\n    calendarName,\r\n    calendarNote,\r\n    calendarDayNotes,\r\n    // Score settings\r\n    scoreSettings,\r\n    onClearMonthTrades,\r\n    onToggleTheme,\r\n    mode,\r\n    // Pre-calculated statistics\r\n    totalPnL,\r\n    // Dynamic risk toggle\r\n    onToggleDynamicRisk,\r\n    // Loading state\r\n    isLoadingTrades = false\r\n  } = props;\r\n  const [currentDate, setCurrentDate] = useState(new Date());\r\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\r\n  const [isDayNotesDialogOpen, setIsDayNotesDialogOpen] = useState<string | null>(null);\r\n  const [isMonthSelectorOpen, setIsMonthSelectorOpen] = useState(false);\r\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\r\n  const [newTrade, setNewTrade] = useState<NewTradeForm | null>(null);\r\n  const [showAddForm, setShowAddForm] = useState<{ open: boolean, date: Date, editTrade?: Trade | null, createTempTrade?: boolean, showDayDialogWhenDone: boolean } | null>(null);\r\n  const [zoomedImages, setZoomedImagesState] = useState<ImageZoomProp | null>(null);\r\n  const [tradesToDelete, setTradesToDelete] = useState<string[]>([]);\r\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\r\n  const [deletingTradeIds, setDeletingTradeIds] = useState<string[]>([]);\r\n  const [deleteError, setDeleteError] = useState<string | null>(null);\r\n\r\n\r\n  // Custom function to handle setting zoomed image and related state\r\n  const setZoomedImage = useCallback((url: string, allImages?: string[], initialIndex?: number) => {\r\n    setZoomedImagesState({ selectetdImageIndex: initialIndex || 0, allImages: allImages || [url] });\r\n\r\n  }, []);\r\n\r\n  const [isTagManagementDialogOpen, setIsTagManagementDialogOpen] = useState(false);\r\n  const [isTagManagementDrawerOpen, setIsTagManagementDrawerOpen] = useState(false);\r\n  const [isSearchDrawerOpen, setIsSearchDrawerOpen] = useState(false);\r\n  const [isDynamicRiskToggled, setIsDynamicRiskToggled] = useState(true); // Default to true (using actual amounts)\r\n  const [snackbarOpen, setSnackbarOpen] = useState(false);\r\n  const [snackbarMessage, setSnackbarMessage] = useState('');\r\n  const [snackbarSeverity, setSnackbarSeverity] = useState<'success' | 'warning' | 'error'>('warning');\r\n  const [showFloatingMonthNav, setShowFloatingMonthNav] = useState(false);\r\n  const [pinnedTradesDrawerOpen, setPinnedTradesDrawerOpen] = useState(false);\r\n  const [galleryMode, setGalleryMode] = useState<{\r\n    open: boolean;\r\n    trades: Trade[];\r\n    initialTradeId?: string;\r\n    title?: string;\r\n  }>({\r\n    open: false,\r\n    trades: [],\r\n    initialTradeId: undefined,\r\n    title: undefined\r\n  });\r\n\r\n  const theme = useTheme(); \r\n  const { calendarId } = useParams();\r\n\r\n  \r\n\r\n  // Scroll detection for floating month navigation\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      // Find the score section element\r\n      const section = document.querySelector('[data-testid=\"month-nav-section\"]');\r\n      if (section) {\r\n        const rect = section.getBoundingClientRect();\r\n        // Show floating nav when section is NOT visible (top of element is NOT viewport)\r\n        setShowFloatingMonthNav((rect.top <= window.innerHeight && rect.bottom >= 0)==false? true : false);\r\n      }\r\n    };\r\n\r\n    window.addEventListener('scroll', handleScroll);\r\n    handleScroll(); // Check initial state\r\n\r\n    return () => window.removeEventListener('scroll', handleScroll);\r\n  }, []);\r\n\r\n\r\n\r\n  // Use calendar.tags from props, fallback to extracting from trades if not available\r\n  const allTags = useMemo(() => {\r\n    if (propAllTags && propAllTags.length > 0) {\r\n      return propAllTags;\r\n    }\r\n\r\n    // Fallback: extract from trades (for backwards compatibility)\r\n    const tagSet = new Set<string>();\r\n    trades.forEach(trade => {\r\n      if (trade.tags) {\r\n        trade.tags.forEach(tag => tagSet.add(tag));\r\n      }\r\n    });\r\n    return Array.from(tagSet).sort();\r\n  }, [propAllTags, trades]);\r\n\r\n  // Filter trades based on selected tags\r\n  const filteredTrades = useMemo(() => {\r\n    if (selectedTags.length === 0) {\r\n      return trades; // No filtering if no tags selected\r\n    }\r\n\r\n    return trades.filter(trade =>\r\n      trade.tags?.some(tag => selectedTags.includes(tag))\r\n    );\r\n  }, [trades, selectedTags]);\r\n\r\n\r\n  const tradesForSelectedDay = useMemo(() => {\r\n    if (!selectedDate) {\r\n      return [];\r\n    }\r\n    return filteredTrades.filter(trade => isSameDay(new Date(trade.date), selectedDate));\r\n  }, [selectedDate, filteredTrades]);\r\n\r\n\r\n\r\n  // Calculate total profit based on filtered trades or use pre-calculated value\r\n  const totalProfit = useMemo(() => {\r\n\r\n\r\n    // If no tag filtering is applied and pre-calculated totalPnL is available, use it\r\n    if (selectedTags.length === 0 && totalPnL !== undefined) {\r\n      return totalPnL;\r\n    }\r\n    // Otherwise calculate from filtered trades\r\n    return filteredTrades.length > 0 ? filteredTrades.reduce((sum, trade) => sum + trade.amount, 0) : 0;\r\n  }, [filteredTrades, selectedTags, totalPnL]);\r\n\r\n  const calendarDays = useMemo(() => {\r\n    const days: Date[] = [];\r\n    const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\r\n    const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\r\n\r\n    for (let day = firstDay; day <= lastDay; day.setDate(day.getDate() + 1)) {\r\n      days.push(new Date(day));\r\n    }\r\n\r\n    return days;\r\n  }, [currentDate]);\r\n \r\n\r\n  const handlePrevMonth = () => {\r\n    setCurrentDate(prev => subMonths(prev, 1));\r\n  };\r\n\r\n  const handleNextMonth = () => {\r\n    setCurrentDate(prev => addMonths(prev, 1));\r\n  };\r\n\r\n  const handleTodayClick = () => {\r\n    setCurrentDate(new Date());\r\n  };\r\n  const hasPinnedTrades = useMemo(() => {\r\n    const pinnedTrades = trades.filter(trade => trade.isPinned);\r\n    return pinnedTrades.length;\r\n  }, [trades]);\r\n\r\n  // Handle single trade deletion\r\n  const handleDeleteClick = (tradeId: string) => {\r\n    setTradesToDelete([tradeId]);\r\n    setIsDeleteDialogOpen(true);\r\n    setDeleteError(null);\r\n  };\r\n\r\n  // Handle multiple trade deletion\r\n  const handleDeleteMultipleTrades = (tradeIds: string[]) => {\r\n    setTradesToDelete(tradeIds);\r\n    setIsDeleteDialogOpen(true);\r\n    setDeleteError(null);\r\n  };\r\n\r\n  const handleConfirmDelete = async () => {\r\n    if (tradesToDelete.length === 0) return;\r\n\r\n    setIsDeleteDialogOpen(false);\r\n    setDeleteError(null);\r\n\r\n    // Add all trades to deleting list immediately for UI feedback\r\n    setDeletingTradeIds(prev => [...prev, ...tradesToDelete]);\r\n\r\n    try {\r\n      // Delete trades in parallel for better performance\r\n      const deletePromises = tradesToDelete.map(async (tradeId) => {\r\n        if (onUpdateTradeProperty) {\r\n          return await onUpdateTradeProperty(tradeId, (trade) => ({ ...trade, isDeleted: true }));\r\n        }\r\n        return Promise.resolve();\r\n      });\r\n\r\n      await Promise.all(deletePromises);\r\n\r\n      // Show success message\r\n      const successMessage = tradesToDelete.length === 1\r\n        ? 'Trade deleted successfully.'\r\n        : `Successfully deleted ${tradesToDelete.length} trades.`;\r\n\r\n      showSnackbar(successMessage, 'success');\r\n    } catch (error) {\r\n      console.error('Error deleting trades:', error);\r\n      const errorMessage = tradesToDelete.length === 1\r\n        ? 'Failed to delete trade. Please try again.'\r\n        : `Failed to delete some trades. Please try again.`;\r\n\r\n      setDeleteError(errorMessage);\r\n      showSnackbar(errorMessage, 'error');\r\n    } finally {\r\n      // Remove all trades from deleting list\r\n      setDeletingTradeIds(prev => prev.filter(id => !tradesToDelete.includes(id)));\r\n      setTradesToDelete([]);\r\n    }\r\n  };\r\n\r\n  const handleCancelDelete = () => {\r\n    setIsDeleteDialogOpen(false);\r\n    setTradesToDelete([]);\r\n    setDeleteError(null);\r\n  };\r\n\r\n\r\n  const handleDayClick = (date: Date) => {\r\n    // Prevent adding new trades when app is loading all trades\r\n    if (isLoadingTrades) {\r\n      console.log('Cannot add trade while trades are loading');\r\n      showSnackbar('Cannot add trade while trades are loading. Please wait...', 'warning');\r\n      return;\r\n    }\r\n\r\n    if (!isDynamicRiskToggled) {\r\n      // Reset to use actual amounts set to false before adding any trade\r\n      setIsDynamicRiskToggled(true);\r\n      if (onToggleDynamicRisk) {\r\n        onToggleDynamicRisk(true);\r\n      }\r\n      return;\r\n    }\r\n    const trades = filteredTrades.filter(trade => isSameDay(new Date(trade.date), date));\r\n    if (trades.length == 0) {\r\n      setNewTrade(createNewTradeData);\r\n      setShowAddForm({ open: true, date: date, showDayDialogWhenDone: true });\r\n    }\r\n    else {\r\n      setSelectedDate(date);\r\n    }\r\n  };\r\n  const handleDayChange = (date: Date) => {\r\n    setSelectedDate(date);\r\n  };\r\n\r\n\r\n  const handleAddTrade = onAddTrade ? async (trade: Trade) => {\r\n    await onAddTrade(trade);\r\n  } : undefined;\r\n\r\n\r\n\r\n\r\n  const handleMonthClick = () => {\r\n    setIsMonthSelectorOpen(true);\r\n  };\r\n\r\n  const handleMonthSelect = (date: Date) => {\r\n    setCurrentDate(date);\r\n    setIsMonthSelectorOpen(false);\r\n  };\r\n\r\n  const handleTagsChange = (tags: string[]) => {\r\n    setSelectedTags(tags);\r\n  };\r\n\r\n\r\n  const handleSnackbarClose = () => {\r\n    setSnackbarOpen(false);\r\n  };\r\n\r\n  // Utility function to show snackbar messages\r\n  const showSnackbar = (message: string, severity: 'success' | 'warning' | 'error' = 'warning') => {\r\n    setSnackbarMessage(message);\r\n    setSnackbarSeverity(severity);\r\n    setSnackbarOpen(true);\r\n  };\r\n\r\n  // Retry failed deletion\r\n  const retryDeletion = async () => {\r\n    if (deleteError && tradesToDelete.length > 0) {\r\n      setDeleteError(null);\r\n      await handleConfirmDelete();\r\n    }\r\n  };\r\n\r\n  // Gallery mode handlers\r\n  const openGalleryMode = (trades: Trade[], initialTradeId?: string, title?: string) => {\r\n    setGalleryMode({\r\n      open: true,\r\n      trades,\r\n      initialTradeId,\r\n      title\r\n    });\r\n  };\r\n\r\n  const closeGalleryMode = () => {\r\n    setGalleryMode({\r\n      open: false,\r\n      trades: [],\r\n      initialTradeId: undefined,\r\n      title: undefined\r\n    });\r\n  };\r\n\r\n  const handleMonthlyGalleryMode = () => {\r\n    // Filter trades to only include those from the current month\r\n    const monthTrades = filteredTrades.filter(trade =>\r\n      isSameMonth(new Date(trade.date), currentDate)\r\n    );\r\n\r\n    if (monthTrades.length > 0) {\r\n      const monthName = format(currentDate, 'MMMM yyyy');\r\n      const title = `${monthName} - Monthly Trades (${monthTrades.length} trades)`;\r\n      openGalleryMode(monthTrades, monthTrades[0].id, title);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <Box>\r\n      {/* Floating Month Navigation */}\r\n      <FloatingMonthNavigation\r\n        currentDate={currentDate}\r\n        isVisible={showFloatingMonthNav}\r\n        onPrevMonth={handlePrevMonth}\r\n        onNextMonth={handleNextMonth}\r\n        onMonthClick={handleMonthClick}\r\n      />\r\n\r\n      <AppHeader\r\n        onToggleTheme={onToggleTheme}\r\n        mode={mode}\r\n        title={calendarName || 'Calendar'}\r\n        showBackButton={true}\r\n        backButtonPath=\"/\"\r\n      />\r\n      <Toolbar />\r\n\r\n      <Box sx={{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        gap: 2,\r\n        p: 2,\r\n        mt: 1\r\n      }}>\r\n        <Box sx={{\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          gap: 2,\r\n          maxWidth: '1200px',\r\n          margin: '0 auto',\r\n          width: '100%'\r\n        }}>\r\n          <CalendarNote\r\n            calendarNote={calendarNote || ''}\r\n            calendarId={calendarId!!}\r\n            onUpdateCalendarProperty={onUpdateCalendarProperty}\r\n            trades={trades}\r\n            onOpenGalleryMode={openGalleryMode}\r\n          />\r\n\r\n          <Box sx={{\r\n            display: 'flex',\r\n            gap: 2,\r\n            flexDirection: { xs: 'column', md: 'row' },\r\n            justifyContent: 'center',\r\n            alignItems: 'stretch',\r\n            width: '100%'\r\n          }}>\r\n            <Box sx={{ flex: 1, maxWidth: '600px' }}>\r\n              <AccountStats\r\n                balance={accountBalance}\r\n                totalProfit={totalProfit}\r\n                onChange={onAccountBalanceChange}\r\n                trades={filteredTrades}\r\n\r\n                riskPerTrade={dynamicRiskSettings?.riskPerTrade}\r\n                dynamicRiskSettings={dynamicRiskSettings}\r\n                onToggleDynamicRisk={(useActualAmounts) => {\r\n                  // Update local state first\r\n                  setIsDynamicRiskToggled(useActualAmounts);\r\n                  if (onToggleDynamicRisk) {\r\n                    onToggleDynamicRisk(useActualAmounts);\r\n                  }\r\n                }}\r\n                isDynamicRiskToggled={isDynamicRiskToggled}\r\n              />\r\n            </Box>\r\n\r\n            {/* Day Note Card - Shows notes or empty state */}\r\n            <Box sx={{ flex: 1, maxWidth: '600px' }}>\r\n              <DayNoteCard\r\n                calendarNotes={calendarDayNotes || new Map()}\r\n                setIsDayNotesDialogOpen={setIsDayNotesDialogOpen}\r\n              />\r\n            </Box>\r\n\r\n          </Box>\r\n          <MonthlyStats\r\n            trades={filteredTrades}\r\n            accountBalance={accountBalance}\r\n            onImportTrades={onImportTrades}\r\n            currentDate={currentDate}\r\n            monthlyTarget={monthlyTarget}\r\n            onClearMonthTrades={onClearMonthTrades}\r\n          />\r\n\r\n          <Box sx={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'space-between',\r\n            mb: 0.5,\r\n            flexDirection: { xs: 'column', sm: 'row' },\r\n            gap: { xs: 1, sm: 0 }\r\n          }}>\r\n            <Box\r\n             data-testid=\"month-nav-section\"\r\n            sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n              <IconButton onClick={handlePrevMonth}>\r\n                <ChevronLeft />\r\n              </IconButton>\r\n              <Typography\r\n               \r\n                variant=\"h5\"\r\n                sx={{\r\n                  fontWeight: 800,\r\n                  cursor: 'pointer',\r\n                  width: '200px',\r\n                  textAlign: 'center',\r\n                  fontSize: { xs: '1.3rem', sm: '1.6rem' },\r\n                  letterSpacing: '-0.5px',\r\n                  color: 'text.primary',\r\n                  '&:hover': {\r\n                    color: 'primary.main'\r\n                  }\r\n                }}\r\n                onClick={handleMonthClick}\r\n              >\r\n                {format(currentDate, 'MMMM yyyy')}\r\n              </Typography>\r\n\r\n              <IconButton onClick={handleNextMonth}>\r\n                <ChevronRight />\r\n              </IconButton>\r\n            </Box>\r\n            <Stack direction=\"row\" spacing={1}>\r\n              <Button\r\n                startIcon={<Today />}\r\n                onClick={handleTodayClick}\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                sx={{\r\n                  minWidth: { xs: '100%', sm: 'auto' },\r\n                  display: 'flex',\r\n                  alignItems: 'center'\r\n                }}\r\n              >\r\n                Today\r\n              </Button>\r\n              {(() => {\r\n                // Check if there are trades for the current month\r\n                const monthTrades = filteredTrades.filter(trade =>\r\n                  isSameMonth(new Date(trade.date), currentDate)\r\n                );\r\n                return monthTrades.length > 0;\r\n              })() && (\r\n                <Tooltip title=\"View all trades for this month in gallery mode\">\r\n                  <Button\r\n                    startIcon={<GalleryIcon />}\r\n                    onClick={handleMonthlyGalleryMode}\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    sx={{\r\n                      minWidth: { xs: '100%', sm: 'auto' },\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      borderColor: 'divider',\r\n                      color: 'text.secondary',\r\n                      '&:hover': {\r\n                        borderColor: 'primary.main',\r\n                        bgcolor: alpha(theme.palette.primary.main, 0.08)\r\n                      }\r\n                    }}\r\n                  >\r\n                    Gallery View\r\n                  </Button>\r\n                </Tooltip>\r\n              )}\r\n              <Button\r\n                startIcon={<PinIcon />}\r\n                onClick={() => setPinnedTradesDrawerOpen(true)}\r\n                variant=\"outlined\"\r\n                size=\"small\"\r\n                sx={{\r\n                  minWidth: { xs: '100%', sm: 'auto' },\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  ...(hasPinnedTrades > 0 ? {\r\n                    // Active state - like Today button when active\r\n                    borderColor: 'primary.main',\r\n                    color: 'primary.main',\r\n                    '&:hover': {\r\n                      borderColor: 'primary.main',\r\n                      bgcolor: alpha(theme.palette.primary.main, 0.08)\r\n                    }\r\n                  } : {\r\n                    // Inactive state - like other buttons\r\n                    borderColor: 'divider',\r\n                    color: 'text.secondary',\r\n                    '&:hover': {\r\n                      borderColor: 'primary.main',\r\n                      bgcolor: alpha(theme.palette.primary.main, 0.08)\r\n                    }\r\n                  })\r\n                }}\r\n              >\r\n                Pinned Trades\r\n              </Button>\r\n              <Box sx={{ display: 'flex', gap: 1 }}>\r\n                <TagFilter\r\n                  allTags={allTags}\r\n                  selectedTags={selectedTags}\r\n                  onTagsChange={handleTagsChange}\r\n                  onOpenDrawer={() => setIsSearchDrawerOpen(true)}\r\n                />\r\n                <Tooltip title=\"Manage tags and required tag groups\">\r\n                  <Button\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    startIcon={<TagIcon />}\r\n                    onClick={() => setIsTagManagementDrawerOpen(true)}\r\n                    sx={{\r\n                      borderColor: 'divider',\r\n                      color: 'text.secondary',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      '&:hover': {\r\n                        borderColor: 'primary.main',\r\n                        bgcolor: alpha(theme.palette.primary.main, 0.08)\r\n                      }\r\n                    }}\r\n                  >\r\n                    Manage Tags\r\n                  </Button>\r\n                </Tooltip>\r\n              </Box>\r\n            </Stack>\r\n          </Box>\r\n\r\n          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 0.5 }}>\r\n            <Box sx={{\r\n              display: 'grid',\r\n              gridTemplateColumns: { xs: 'repeat(7, 1fr)', sm: 'repeat(8, 1fr)' },\r\n              gap: 0.5,\r\n              mb: 0.5\r\n            }}>\r\n              {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Week'].map((day, index) => {\r\n                // Check if this day has notes\r\n                const hasNotes = index < 7 && calendarDayNotes && calendarDayNotes.has(day) && calendarDayNotes.get(day)?.trim() !== '';\r\n\r\n                return (\r\n                  <WeekdayHeader\r\n                    key={day}\r\n                    onClick={() => {\r\n                      if (index < 7) { // Don't open notes dialog for 'Week' header\r\n                        setIsDayNotesDialogOpen(day);\r\n                      }\r\n                    }}\r\n                    sx={{\r\n                      display: index === 7 ? { xs: 'none', sm: 'flex' } : 'flex',\r\n                      cursor: index < 7 ? 'pointer' : 'default',\r\n                      position: 'relative',\r\n                      justifyContent: 'center',\r\n                      alignItems: 'center',\r\n                      '&:hover': index < 7 ? {\r\n                        color: 'primary.main',\r\n                        bgcolor: theme => alpha(theme.palette.primary.main, 0.08)\r\n                      } : {}\r\n                    }}\r\n                  >\r\n                    {day}\r\n                    {hasNotes && (\r\n                      <Tooltip\r\n                        title=\"This day has notes. Click to view or edit.\"\r\n                        placement=\"top\"\r\n                        arrow\r\n                      >\r\n                        <Box\r\n                          sx={{\r\n                            position: 'absolute',\r\n                            right: '8px',\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            justifyContent: 'center',\r\n                            fontSize: '1rem'\r\n                          }}\r\n                        >\r\n                          <InfoIcon fontSize=\"inherit\" />\r\n                        </Box>\r\n                      </Tooltip>\r\n                    )}\r\n                  </WeekdayHeader>\r\n                );\r\n              })}\r\n            </Box>\r\n            <Box sx={{\r\n              display: 'grid',\r\n              gridTemplateColumns: { xs: 'repeat(7, 1fr)', sm: 'repeat(8, 1fr)' },\r\n              gap: 1\r\n            }}>\r\n              {eachWeekOfInterval(\r\n                {\r\n                  start: startOfMonth(currentDate),\r\n                  end: endOfMonth(currentDate)\r\n                },\r\n                { weekStartsOn: 0 }\r\n              ).map((weekStart, index) => {\r\n                const weekDays = eachDayOfInterval({\r\n                  start: weekStart,\r\n                  end: endOfWeek(weekStart, { weekStartsOn: 0 })\r\n                });\r\n\r\n                return (\r\n                  <React.Fragment key={weekStart.toISOString()}>\r\n                    {weekDays.map((day) => {\r\n                      const dayTrades = filteredTrades.filter(trade => isSameDay(new Date(trade.date), day));\r\n                      const dayStats = calculateDayStats(\r\n                        dayTrades,\r\n                        accountBalance,\r\n                        maxDailyDrawdown,\r\n                        dynamicRiskSettings,\r\n                        filteredTrades,\r\n                        day\r\n                      );\r\n                      const isCurrentMonth = isSameMonth(day, currentDate);\r\n                      const isCurrentDay = isToday(day);\r\n\r\n                      return (\r\n                        <CalendarCell key={day.toISOString()}>\r\n                          <StyledCalendarDay\r\n                            onClick={() => handleDayClick(day)}\r\n                            $isCurrentMonth={isCurrentMonth}\r\n                            $dayStatus={dayStats.status}\r\n                            sx={[\r\n                              {\r\n                                backgroundColor: dayStats.status === 'win'\r\n                                  ? alpha(theme.palette.success.light, 0.3)\r\n                                  : dayStats.status === 'loss'\r\n                                    ? alpha(theme.palette.error.light, 0.3)\r\n                                    : dayStats.status === 'breakeven'\r\n                                      ? alpha(theme.palette.primary.main, 0.1)\r\n                                      : theme.palette.background.paper,\r\n                                transition: 'all 0.2s ease-in-out',\r\n                                border: `1px solid ${theme.palette.divider}`,\r\n                                boxShadow: `0 1px 2px ${alpha(theme.palette.common.black, 0.05)}`,\r\n                                '&:hover': {\r\n                                  borderColor: theme.palette.primary.main,\r\n                                  backgroundColor: dayStats.status === 'win'\r\n                                    ? alpha(theme.palette.success.light, 0.25)\r\n                                    : dayStats.status === 'loss'\r\n                                      ? alpha(theme.palette.error.light, 0.25)\r\n                                      : alpha(theme.palette.primary.light, 0.1)\r\n                                }\r\n                              },\r\n                              !isCurrentMonth && {\r\n                                opacity: 0.5,\r\n                                backgroundColor: theme.palette.background.default\r\n                              },\r\n                              isCurrentDay && {\r\n                                color: theme.palette.primary.main,\r\n                                borderColor: theme.palette.primary.main,\r\n                                borderWidth: 2\r\n                              },\r\n                              selectedDate && isSameDay(day, selectedDate) && {\r\n                                borderColor: theme.palette.primary.main,\r\n                                borderWidth: 2,\r\n                                backgroundColor: alpha(theme.palette.primary.light, 0.1)\r\n                              }\r\n                            ]}\r\n                          >\r\n                            <DayNumber $isCurrentMonth={isCurrentMonth}>\r\n                              {format(day, 'd')}\r\n                            </DayNumber>\r\n                            {dayTrades.length > 0 && (\r\n                              <AnimatedPulse>\r\n                                <Box sx={{\r\n                                  display: 'flex',\r\n                                  flexDirection: 'column',\r\n                                  alignItems: 'center',\r\n                                  gap: 0.5\r\n                                }}>\r\n                                  <TradeAmount $dayStatus={dayStats.status}>\r\n                                    {formatCurrency(Math.abs(dayStats.netAmount))}\r\n                                  </TradeAmount>\r\n                                  <TradeCount>\r\n                                    {dayTrades.length} trade{dayTrades.length !== 1 ? 's' : ''}\r\n                                  </TradeCount>\r\n                                  <Typography\r\n                                    variant=\"caption\"\r\n                                    sx={{\r\n                                      color: dayStats.status === 'win' ? 'success.main' :\r\n                                        dayStats.status === 'loss' ? 'error.main' : 'text.secondary',\r\n                                      fontSize: '0.75rem',\r\n                                      fontWeight: 500\r\n                                    }}\r\n                                  >\r\n                                    {dayStats.percentage}%\r\n                                  </Typography>\r\n                                  {dayStats.isDrawdownViolation && (\r\n                                    <Typography\r\n                                      variant=\"caption\"\r\n                                      sx={{\r\n                                        color: 'error.main',\r\n                                        fontSize: '0.75rem',\r\n                                        fontWeight: 700,\r\n                                        textTransform: 'uppercase'\r\n                                      }}\r\n                                    >\r\n                                      VIOLATED\r\n                                    </Typography>\r\n                                  )}\r\n                                </Box>\r\n                              </AnimatedPulse>\r\n                            )}\r\n                          </StyledCalendarDay>\r\n                        </CalendarCell>\r\n                      );\r\n                    })}\r\n\r\n                    <WeeklyPnL\r\n                      date={weekStart}\r\n                      trades={filteredTrades}\r\n                      monthStart={startOfMonth(currentDate)}\r\n                      weekIndex={index}\r\n                      currentMonth={currentDate.getMonth()}\r\n                      accountBalance={accountBalance}\r\n                      weeklyTarget={weeklyTarget}\r\n                      sx={{ display: { xs: 'none', sm: 'flex' } }}\r\n                    />\r\n\r\n                  </React.Fragment>\r\n                );\r\n              })}\r\n            </Box>\r\n\r\n            {/* Weekly stats for mobile */}\r\n            <Box sx={{\r\n              display: { xs: 'flex', sm: 'none' },\r\n              flexDirection: 'column',\r\n              gap: 1,\r\n              mt: 2\r\n            }}>\r\n              {eachWeekOfInterval(\r\n                {\r\n                  start: startOfMonth(currentDate),\r\n                  end: endOfMonth(currentDate)\r\n                },\r\n                { weekStartsOn: 0 }\r\n              ).map((weekStart, index) => (\r\n                <WeeklyPnL\r\n                  key={weekStart.toISOString()}\r\n                  date={weekStart}\r\n                  trades={filteredTrades}\r\n                  monthStart={startOfMonth(currentDate)}\r\n                  weekIndex={index}\r\n                  currentMonth={currentDate.getMonth()}\r\n                  accountBalance={accountBalance}\r\n                  weeklyTarget={weeklyTarget}\r\n                />\r\n              ))}\r\n            </Box>\r\n          </Box>\r\n\r\n          {/*Current Monthly Statistics Section */}\r\n          <MonthlyStatisticsSection\r\n            trades={filteredTrades}\r\n            selectedDate={currentDate}\r\n            accountBalance={accountBalance}\r\n            maxDailyDrawdown={maxDailyDrawdown}\r\n            monthlyTarget={monthlyTarget}\r\n            calendarId={calendarId!!}\r\n            scoreSettings={scoreSettings}\r\n            onUpdateTradeProperty={onUpdateTradeProperty}\r\n            onUpdateCalendarProperty={onUpdateCalendarProperty}\r\n            dynamicRiskSettings={dynamicRiskSettings}\r\n            allTags={allTags}\r\n            onEditTrade={(trade) => {\r\n              // Use the same edit handler as in DayDialog\r\n              if (props.onUpdateTradeProperty) {\r\n                setNewTrade(() => (createEditTradeData(trade)));\r\n                setShowAddForm({ open: true, date: new Date(trade.date), editTrade: trade, createTempTrade: false, showDayDialogWhenDone: false });\r\n              }\r\n            }}\r\n            onDeleteTrade={(tradeId) => {\r\n              // Use the same delete handler as in DayDialog\r\n              handleDeleteClick(tradeId);\r\n            }}\r\n            onDeleteMultipleTrades={handleDeleteMultipleTrades}\r\n            onZoomImage={(imageUrl, allImages, initialIndex) => {\r\n              setZoomedImage(imageUrl, allImages, initialIndex);\r\n            }}\r\n            onOpenGalleryMode={openGalleryMode}\r\n          />\r\n        </Box>\r\n\r\n        <DayDialog\r\n          open={!!selectedDate && !showAddForm?.open}\r\n          onClose={() => {\r\n            setSelectedDate(null);\r\n          }}\r\n          showAddForm={(trade) => {\r\n            if (trade !== null) {\r\n              setNewTrade(() => (createEditTradeData(trade!!)));\r\n            }\r\n            setShowAddForm({ open: true, date: selectedDate!!, editTrade: trade, createTempTrade: trade === null, showDayDialogWhenDone: true });\r\n          }}\r\n          date={selectedDate || new Date()}\r\n          trades={selectedDate ? tradesForSelectedDay : []}\r\n          onUpdateTradeProperty={onUpdateTradeProperty}\r\n          onDeleteTrade={handleDeleteClick}\r\n          onDeleteMultipleTrades={handleDeleteMultipleTrades}\r\n          calendarId={calendarId!!}\r\n          onDateChange={handleDayChange}\r\n          setZoomedImage={setZoomedImage}\r\n          accountBalance={accountBalance}\r\n          allTrades={trades} /* Pass all trades for tag suggestions */\r\n          deletingTradeIds={deletingTradeIds}\r\n          onOpenGalleryMode={openGalleryMode}\r\n        />\r\n\r\n\r\n        <TradeFormDialog\r\n          open={!!showAddForm?.date && showAddForm?.open || false}\r\n          onClose={() => {\r\n            setSelectedDate(null);\r\n            setShowAddForm(null);\r\n            if (newTrade != null && newTrade.pendingImages) {\r\n              // Release object URLs to avoid memory leaks\r\n              newTrade.pendingImages.forEach(image => {\r\n                URL.revokeObjectURL(image.preview);\r\n              });\r\n              setNewTrade(null);\r\n            }\r\n          }}\r\n          onCancel={() => {\r\n            if (showAddForm?.showDayDialogWhenDone) {\r\n              setSelectedDate(null);\r\n              setSelectedDate(showAddForm?.date!!); // show the day dialog\r\n            }\r\n            setShowAddForm(null);\r\n          }}\r\n          showForm={{ open: showAddForm?.open || false, editTrade: showAddForm?.editTrade || null, createTempTrade: showAddForm?.createTempTrade || false }}\r\n          date={showAddForm?.date || new Date()}\r\n          trades={showAddForm?.date ? tradesForSelectedDay : []}\r\n          onAddTrade={handleAddTrade}\r\n          onTagUpdated={onTagUpdated}\r\n          newMainTrade={newTrade}\r\n          setNewMainTrade={prev => setNewTrade(prev(newTrade!!))}\r\n          onUpdateTradeProperty={onUpdateTradeProperty}\r\n          calendarId={calendarId!!}\r\n          setZoomedImage={setZoomedImage}\r\n          accountBalance={accountBalance}\r\n          onAccountBalanceChange={onAccountBalanceChange}\r\n          allTrades={trades}\r\n          tags={allTags}\r\n          dynamicRiskSettings={dynamicRiskSettings}\r\n          requiredTagGroups={requiredTagGroups}\r\n          onOpenGalleryMode={openGalleryMode}\r\n        />\r\n\r\n        {/* Day Notes Dialog */}\r\n        {isDayNotesDialogOpen && (\r\n          <DayNotesDialog\r\n            open={!!isDayNotesDialogOpen}\r\n            onClose={() => {\r\n              setIsDayNotesDialogOpen(null);\r\n            }}\r\n            notes={calendarDayNotes && isDayNotesDialogOpen ? (calendarDayNotes.get(isDayNotesDialogOpen) || '') : ''}\r\n            day={isDayNotesDialogOpen}\r\n            calendarId={calendarId!!}\r\n            onUpdateCalendarProperty={onUpdateCalendarProperty}\r\n            trades={trades}\r\n            onOpenGalleryMode={openGalleryMode}\r\n          />\r\n        )}\r\n\r\n\r\n        {/* Image Zoom Dialog */}\r\n        {zoomedImages && <ImageZoomDialog\r\n          open={!!zoomedImages}\r\n          onClose={() => setZoomedImagesState(null)}\r\n          imageProp={zoomedImages}\r\n        />}\r\n\r\n        <SelectDateDialog\r\n          open={isMonthSelectorOpen}\r\n          onClose={() => setIsMonthSelectorOpen(false)}\r\n          onDateSelect={handleMonthSelect}\r\n          initialDate={selectedDate || undefined}\r\n          trades={filteredTrades}\r\n          accountBalance={accountBalance}\r\n          monthlyTarget={monthlyTarget}\r\n          yearlyTarget={yearlyTarget}\r\n          onOpenGalleryMode={openGalleryMode}\r\n        />\r\n\r\n\r\n\r\n\r\n        {/* Drawers */}\r\n\r\n        <TagManagementDrawer\r\n          open={isTagManagementDrawerOpen}\r\n          onClose={() => setIsTagManagementDrawerOpen(false)}\r\n          allTags={allTags}\r\n          calendarId={calendarId!!}\r\n          onTagUpdated={onTagUpdated}\r\n          requiredTagGroups={requiredTagGroups}\r\n          onUpdateCalendarProperty={onUpdateCalendarProperty}\r\n        />\r\n\r\n        {/* Snackbar for notifications */}\r\n        <TagManagementDialog\r\n          open={isTagManagementDialogOpen}\r\n          onClose={() => setIsTagManagementDialogOpen(false)}\r\n          allTags={allTags}\r\n          calendarId={calendarId!!}\r\n          onTagUpdated={onTagUpdated}\r\n          requiredTagGroups={requiredTagGroups}\r\n          onUpdateCalendarProperty={onUpdateCalendarProperty}\r\n        />\r\n\r\n        {/* Confirmation Delete Dialog */}\r\n        <ConfirmationDialog\r\n          open={isDeleteDialogOpen}\r\n          title={tradesToDelete.length === 1 ? \"Delete Trade\" : `Delete ${tradesToDelete.length} Trades`}\r\n          message={\r\n            tradesToDelete.length === 1\r\n              ? \"Are you sure you want to delete this trade? This action cannot be undone.\"\r\n              : `Are you sure you want to delete ${tradesToDelete.length} trades? This action cannot be undone.`\r\n          }\r\n          confirmText=\"Delete\"\r\n          cancelText=\"Cancel\"\r\n          onConfirm={handleConfirmDelete}\r\n          onCancel={handleCancelDelete}\r\n          confirmColor=\"error\"\r\n          isSubmitting={deletingTradeIds.some(id => tradesToDelete.includes(id))}\r\n        />\r\n\r\n        <Snackbar\r\n          open={snackbarOpen}\r\n          autoHideDuration={snackbarSeverity === 'success' ? 3000 : deleteError ? 6000 : 4000}\r\n          onClose={handleSnackbarClose}\r\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\r\n        >\r\n          <Alert\r\n            onClose={handleSnackbarClose}\r\n            severity={snackbarSeverity}\r\n            variant=\"filled\"\r\n            sx={{ width: '100%' }}\r\n            action={\r\n              deleteError && tradesToDelete.length > 0 ? (\r\n                <Button\r\n                  color=\"inherit\"\r\n                  size=\"small\"\r\n                  onClick={() => {\r\n                    handleSnackbarClose();\r\n                    retryDeletion();\r\n                  }}\r\n                  sx={{ color: 'inherit' }}\r\n                >\r\n                  Retry\r\n                </Button>\r\n              ) : undefined\r\n            }\r\n          >\r\n            {snackbarMessage}\r\n          </Alert>\r\n        </Snackbar>\r\n\r\n\r\n\r\n        {/* Search & Filter FAB */}\r\n        <Fab\r\n          color=\"primary\"\r\n          aria-label=\"search and filter trades\"\r\n          onClick={() => setIsSearchDrawerOpen(true)}\r\n          sx={{\r\n            position: 'fixed',\r\n            bottom: 24,\r\n            right: 24,\r\n            zIndex: 1200\r\n          }}\r\n        >\r\n          <SearchIcon />\r\n        </Fab>\r\n\r\n        {/* Search & Filter Drawer */}\r\n        <SearchDrawer\r\n          open={isSearchDrawerOpen}\r\n          onClose={() => setIsSearchDrawerOpen(false)}\r\n          trades={trades}\r\n          allTags={allTags}\r\n          selectedTags={selectedTags}\r\n          onTagsChange={handleTagsChange}\r\n          onTradeClick={(trade) => {\r\n            // Close search drawer and open the trade in gallery mode\r\n            setIsSearchDrawerOpen(false);\r\n            openGalleryMode(trades, trade.id, \"Search Results\");\r\n          }}\r\n        />\r\n\r\n        {/* Pinned Trades Drawer */}\r\n        <PinnedTradesDrawer\r\n          open={pinnedTradesDrawerOpen}\r\n          onClose={() => setPinnedTradesDrawerOpen(false)}\r\n          trades={trades}\r\n          onTradeClick={(trade) => {\r\n            // Close drawer and open the trade in gallery mode\r\n            setPinnedTradesDrawerOpen(false);\r\n            const pinnedTrades = trades.filter(t => t.isPinned);\r\n            openGalleryMode(pinnedTrades, trade.id, \"Pinned Trades\");\r\n          }}\r\n        />\r\n\r\n        {/* Trade Gallery Dialog */}\r\n        <TradeGalleryDialog\r\n          open={galleryMode.open}\r\n          onClose={closeGalleryMode}\r\n          trades={galleryMode.trades}\r\n          initialTradeId={galleryMode.initialTradeId}\r\n          onUpdateTradeProperty={onUpdateTradeProperty}\r\n          setZoomedImage={setZoomedImage}\r\n          title={galleryMode.title}\r\n          calendarId={calendarId}\r\n          onOpenGalleryMode={openGalleryMode}\r\n        />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default TradeCalendar;\r\n","import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Box, IconButton, TextField, CircularProgress, Typography, keyframes } from '@mui/material';\nimport { Delete as DeleteIcon } from '@mui/icons-material';\nimport { alpha, useTheme } from '@mui/material/styles';\nimport { PendingImage, TradeImage } from './TradeForm'; // Assuming these are defined elsewhere\n\n// Extended TradeImage interface with grid positioning properties\nexport interface GridImage extends TradeImage {\n  id: string; // Ensure ID is present\n  url: string;\n  caption?: string;\n  width?: number;\n  height?: number;\n  row?: number;\n  column?: number;\n  columnWidth?: number; // Width as percentage (0-100)\n}\n\n// Extended PendingImage interface with grid positioning properties\nexport interface GridPendingImage extends Partial<PendingImage> {\n  id: string; // Ensure ID is present\n  file?: File;\n  preview?: string;\n  caption?: string;\n  width?: number;\n  height?: number;\n  uploadProgress?: number;\n  row?: number;\n  column?: number;\n  columnWidth?: number; // Width as percentage (0-100)\n}\n\ninterface ImageGridProps {\n  pendingImages: Array<PendingImage>;\n  uploadedImages: Array<TradeImage>;\n  editingTrade: boolean; // This prop seems unused in the provided snippet, but kept it\n  onImageCaptionChange: (index: number, caption: string, isPending: boolean) => void;\n  onImageRemove: (index: number, isPending: boolean) => void;\n  onImagesReordered?: (images: Array<GridImage | GridPendingImage>) => void; // Re-using this for layout changes\n}\n\n// --- Default values ---\nconst DEFAULT_COL_WIDTH = 100;\nconst MIN_COL_WIDTH_PERCENT = 10; // Minimum width for a column\n\n// Helper function to organize images into rows\nconst organizeImagesIntoRows = (\n  pendingImages: Array<PendingImage>,\n  uploadedImages: Array<TradeImage>\n): Array<Array<GridImage | GridPendingImage>> => {\n  console.log(\"Input to organizeImagesIntoRows:\",\n    \"Pending:\", pendingImages.map(img => ({ id: img.id, row: img.row, column: img.column, columnWidth: img.columnWidth })),\n    \"Uploaded:\", uploadedImages.map(img => ({ id: img.id, row: img.row, column: img.column, columnWidth: img.columnWidth })));\n\n  // Combine and ensure basic grid properties exist\n  const allImages: Array<GridImage | GridPendingImage> = [\n    ...pendingImages.map((img, i) => {\n      const result = {\n        ...img,\n        id: img.id ?? `pending-${i}`, // Ensure ID is present\n        isPending: true, // Add flag for easier type checking later\n        row: img.row !== undefined ? img.row : undefined,\n        column: img.column !== undefined ? img.column : undefined,\n        columnWidth: img.columnWidth !== undefined ? img.columnWidth : undefined,\n      };\n      console.log(`Processed pending image ${i}:`, result.id, result.row, result.column, result.columnWidth);\n      return result;\n    }),\n    ...uploadedImages.map((img, i) => {\n      const result = {\n        ...img,\n        id: img.id ?? `uploaded-${i}`, // Ensure ID is present\n        isPending: false,\n        row: img.row !== undefined ? img.row : undefined,\n        column: img.column !== undefined ? img.column : undefined,\n        columnWidth: img.columnWidth !== undefined ? img.columnWidth : undefined,\n      };\n      console.log(`Processed uploaded image ${i}:`, result.id, result.row, result.column, result.columnWidth);\n      return result;\n    }),\n  ];\n\n  // Group by row, handling undefined rows\n  const rowMap: { [key: number]: Array<GridImage | GridPendingImage> } = {};\n  let maxDefinedRow = -1;\n  allImages.forEach((image) => {\n    if (image.row !== undefined) {\n      if (!rowMap[image.row]) {\n        rowMap[image.row] = [];\n      }\n      rowMap[image.row].push(image);\n      maxDefinedRow = Math.max(maxDefinedRow, image.row);\n    }\n  });\n\n  // Place images with undefined rows into a vertical layout (one per row)\n  let nextRowIndex = maxDefinedRow + 1;\n\n  // Filter images with undefined rows\n  const unassignedImages = allImages.filter(image => image.row === undefined);\n\n  // Assign rows and columns to unassigned images - always in vertical layout\n  unassignedImages.forEach((image, index) => {\n    // Each image gets its own row in vertical layout\n    const newRow = nextRowIndex + index;\n\n    // Assign row and column\n    image.row = newRow;\n    image.column = 0; // Always place in first column\n    image.columnWidth = 100; // Full width for vertical layout\n\n    // Add to row map\n    if (!rowMap[image.row]) {\n      rowMap[image.row] = [];\n    }\n    rowMap[image.row].push(image);\n  });\n\n   // Convert map to array and sort rows by index\n   const rows: Array<Array<GridImage | GridPendingImage>> = Object.entries(rowMap)\n   .sort(([a], [b]) => Number(a) - Number(b))\n   .map(([rowIndex, images]) => {\n     console.log(`Processing row ${rowIndex} with ${images.length} images`);\n     return images;\n   });\n\n  // Sort images within each row by column, assign defaults if needed\n  rows.forEach((row, rIndex) => {\n     // Assign row index if somehow missing (shouldn't happen with above logic)\n     row.forEach(img => img.row = rIndex);\n\n     // Sort by column, putting undefined columns last\n     row.sort((a, b) => {\n       const colA = a.column ?? Infinity;\n       const colB = b.column ?? Infinity;\n       return colA - colB;\n     });\n\n     // Assign column index and default width if needed\n     let totalDefinedWidth = 0;\n     let undefinedWidthCount = 0;\n     row.forEach((image, cIndex) => {\n       image.column = cIndex; // Ensure column indices are sequential\n       if (image.columnWidth === undefined) {\n         undefinedWidthCount++;\n       } else {\n         totalDefinedWidth += image.columnWidth;\n       }\n     });\n\n     // Distribute remaining width among columns that didn't have it defined\n     if (undefinedWidthCount > 0) {\n       const remainingWidth = Math.max(0, 100 - totalDefinedWidth);\n       const widthPerUndefined = remainingWidth / undefinedWidthCount;\n       row.forEach((image) => {\n         if (image.columnWidth === undefined) {\n           image.columnWidth = widthPerUndefined;\n         }\n       });\n     } else if (row.length > 0 && Math.abs(totalDefinedWidth - 100) > 0.1) {\n        // Adjust existing widths proportionally if they don't add up to 100\n        const scaleFactor = 100 / totalDefinedWidth;\n        row.forEach(image => {\n            image.columnWidth = (image.columnWidth ?? 0) * scaleFactor;\n        });\n     } else if (row.length > 0 && totalDefinedWidth === 0) {\n        // If all widths were 0 somehow, distribute equally\n        const equalWidth = 100 / row.length;\n         row.forEach(image => {\n            image.columnWidth = equalWidth;\n        });\n     }\n  });\n\n  // Remove empty rows just in case\n  const finalRows = rows.filter((row) => row && row.length > 0);\n\n  // Log the final organized rows\n  console.log(\"Final organized rows:\", finalRows.map((row, i) =>\n    `Row ${i}: ` + row.map(img => `(id: ${img.id}, col: ${img.column}, width: ${img.columnWidth}%)`).join(', ')\n  ));\n\n  return finalRows;\n};\n\n\nconst ImageGrid: React.FC<ImageGridProps> = ({\n  pendingImages,\n  uploadedImages,\n  editingTrade, // Used to determine if we should show shimmer for pending images\n  onImageCaptionChange,\n  onImageRemove,\n  onImagesReordered,\n}) => {\n  const theme = useTheme();\n  const [rows, setRows] = useState<Array<Array<GridImage | GridPendingImage>>>([]);\n  const [draggingImage, setDraggingImage] = useState<GridImage | GridPendingImage | null>(null);\n  const [dragOverRow, setDragOverRow] = useState<number | null>(null);\n  const [dragOverColumn, setDragOverColumn] = useState<number | null>(null);\n  // dragDirection state removed as it's no longer needed\n\n  // --- Resizing State ---\n  const [resizingState, setResizingState] = useState<{\n    rowIndex: number;\n    dividerIndex: number; // Index of the divider (0 means between col 0 and 1)\n    startX: number;\n    rowElementWidth: number;\n    initialWidths: number[]; // Initial widths of all items in the row\n  } | null>(null);\n  const gridContainerRef = useRef<HTMLDivElement>(null); // Ref for the main container\n  const dragImageRef = useRef<HTMLElement | null>(null); // Ref to track drag image for cleanup\n\n\n  // Organize images into rows when inputs change\n  useEffect(() => {\n    const newRows = organizeImagesIntoRows(pendingImages, uploadedImages);\n    // Debug the layout information\n    console.log(\"Organizing images with layout info:\",\n      pendingImages.map(img => ({ id: img.id, row: img.row, column: img.column, columnWidth: img.columnWidth })),\n      uploadedImages.map(img => ({ id: img.id, row: img.row, column: img.column, columnWidth: img.columnWidth })));\n    // console.log(\"Organized Rows:\", JSON.stringify(newRows, null, 2)); // Debugging\n    setRows(newRows);\n  }, [pendingImages, uploadedImages]);\n\n  // Helper to check if an image is PendingImage (using the flag added in organize)\n  const isPendingImage = (image: GridImage | GridPendingImage): boolean => {\n    // Check based on the structure or the added flag\n    return 'isPending' in image ? !!(image as any).isPending : 'file' in image;\n  };\n\n  // Helper to check if any image is currently uploading\n  const isAnyImageUploading = (): boolean => {\n    return pendingImages.some(img =>\n      img.uploadProgress !== undefined &&\n      img.uploadProgress >= 0 && // default uploadProgress state is -1 or undefined \n      img.uploadProgress < 100\n    );\n  };\n\n  // --- Drag and Drop (Reordering) Handlers ---\n  const handleDragStart = (\n    e: React.DragEvent<HTMLDivElement>,\n    image: GridImage | GridPendingImage,\n    rowIndex: number,\n    columnIndex: number\n  ) => {\n    // Prevent initiating drag if resize is active or any image is uploading\n    if (resizingState || isAnyImageUploading()) {\n      e.preventDefault();\n      return;\n    }\n    setDraggingImage(image);\n    // console.log(\"Drag Start:\", image.id, `Row: ${rowIndex}`, `Col: ${columnIndex}`); // Debug\n    e.dataTransfer.setData('text/plain', JSON.stringify({\n      id: image.id, // Use image id for identification\n      isPending: isPendingImage(image),\n      sourceRowIndex: rowIndex,\n      sourceColumnIndex: columnIndex\n    }));\n    e.dataTransfer.effectAllowed = \"move\";\n\n    // Custom drag image with improved cleanup\n    const element = e.currentTarget;\n    const rect = element.getBoundingClientRect();\n    const offsetX = e.clientX - rect.left;\n    const offsetY = e.clientY - rect.top;\n    const dragImage = element.cloneNode(true) as HTMLElement;\n\n    // Apply styles to cloned drag image\n    dragImage.style.width = `${rect.width}px`;\n    dragImage.style.height = `${rect.height}px`;\n    dragImage.style.opacity = '0.7';\n    dragImage.style.position = 'absolute';\n    dragImage.style.top = '-1000px';\n    dragImage.style.left = '-1000px';\n    dragImage.style.pointerEvents = 'none';\n    dragImage.style.zIndex = '1000';\n\n    // Store reference for reliable cleanup\n    dragImageRef.current = dragImage;\n    document.body.appendChild(dragImage);\n    e.dataTransfer.setDragImage(dragImage, offsetX, offsetY);\n\n    // Use a longer timeout for more reliable cleanup\n    setTimeout(() => {\n        cleanupDragImage();\n    }, 100);\n  };\n\n  const handleDragOver = (\n    e: React.DragEvent<HTMLDivElement>,\n    rowIndex: number,\n    columnIndex: number | null // Allow null for dropping on row container\n  ) => {\n    e.preventDefault(); // Necessary to allow drop\n    e.dataTransfer.dropEffect = \"move\";\n    if (draggingImage) {\n      // Update target position for visual feedback\n      setDragOverRow(rowIndex);\n      // If columnIndex is null, it means hovering over row gap, target first column\n      setDragOverColumn(columnIndex ?? 0);\n    }\n  };\n\n  const handleDrop = (\n    e: React.DragEvent<HTMLDivElement>,\n    targetRowIndex: number,\n    targetColumnIndex: number | null // Null indicates dropping on row or new row area\n  ) => {\n    e.preventDefault();\n    e.stopPropagation(); // Prevent drop event from bubbling up if needed\n\n    if (!draggingImage) return;\n\n    const sourceData = JSON.parse(e.dataTransfer.getData('text/plain'));\n    const sourceRowIndex = sourceData.sourceRowIndex;\n    const sourceColumnIndex = sourceData.sourceColumnIndex;\n    const imageId = sourceData.id;\n    const isSourcePending = sourceData.isPending;\n\n    // Find the image being dragged using its ID and type\n    let imageToMove: GridImage | GridPendingImage | undefined;\n    let foundAtIndex: number | undefined;\n\n    const sourceCollection = isSourcePending ? pendingImages : uploadedImages;\n    foundAtIndex = sourceCollection.findIndex(img => img.id === imageId);\n\n    if (foundAtIndex === -1) {\n        console.error(\"Could not find dragged image in original collection!\");\n        handleDragEnd(); // Reset state\n        return;\n    }\n    // Get the actual image object from the original props/state before modification\n    imageToMove = rows[sourceRowIndex]?.[sourceColumnIndex];\n\n     if (!imageToMove) {\n        console.error(\"Inconsistency: Dragged image not found in current rows state at source index\");\n         // Fallback: Try finding by ID in flattened rows\n        const flatImages = rows.flat();\n        imageToMove = flatImages.find(img => img.id === imageId && isPendingImage(img) === isSourcePending);\n        if (!imageToMove) {\n            console.error(\"Could not find dragged image anywhere!\");\n            handleDragEnd();\n            return;\n        }\n        // If found via fallback, we might not know the exact sourceRow/Col index *relative to current state*\n        // This indicates a potential logic issue elsewhere, but we can try to proceed\n        console.warn(\"Found image via fallback, drag/drop might be slightly off.\");\n    }\n\n\n    // --- Apply the move ---\n    let newRows = rows.map(row => [...row]); // Deep copy rows\n\n    // 1. Remove image from its original position\n    let actualSourceRowIndex = -1;\n    let actualSourceColumnIndex = -1;\n     for(let r=0; r < newRows.length; r++) {\n         const cIndex = newRows[r].findIndex(img => img.id === imageToMove!.id && isPendingImage(img) === isPendingImage(imageToMove!));\n         if (cIndex !== -1) {\n             actualSourceRowIndex = r;\n             actualSourceColumnIndex = cIndex;\n             break;\n         }\n     }\n\n    if (actualSourceRowIndex === -1) {\n        console.error(\"Cannot find image to remove during drop!\");\n        handleDragEnd();\n        return;\n    }\n\n    newRows[actualSourceRowIndex].splice(actualSourceColumnIndex, 1);\n\n\n    // 2. Determine target position\n    let finalTargetRowIndex = targetRowIndex;\n    let finalTargetColumnIndex = targetColumnIndex ?? 0; // Default to start if null\n\n     // Check if dropping onto the \"new row\" area\n    if (targetRowIndex === newRows.filter(r => r.length > 0).length && targetColumnIndex === null) {\n        finalTargetRowIndex = newRows.length; // Target the next available row index\n        finalTargetColumnIndex = 0;\n    } else if (targetColumnIndex === null) {\n         // Dropping between rows or on row padding? Target start of the row.\n        finalTargetColumnIndex = 0;\n    }\n\n    // 3. Insert image at the target position\n    // Ensure target row exists\n    while (newRows.length <= finalTargetRowIndex) {\n        newRows.push([]);\n    }\n\n    // Insert the image\n    newRows[finalTargetRowIndex].splice(finalTargetColumnIndex, 0, imageToMove);\n\n    // --- Recalculate Layout Properties ---\n    newRows = newRows.filter(row => row.length > 0); // Remove empty rows\n\n    newRows.forEach((row, rIndex) => {\n        const widthPerColumn = 100 / row.length; // Equal width distribution after move\n        row.forEach((img, cIndex) => {\n            img.row = rIndex;\n            img.column = cIndex;\n            // Reset width only if it changed row or if the row now has only one image\n            if (img.id === imageToMove!.id || row.length === 1 || actualSourceRowIndex !== rIndex) {\n               img.columnWidth = widthPerColumn;\n            }\n             // Ensure existing images in the target row also get widths adjusted if needed\n             else if (rIndex === finalTargetRowIndex && row.length > 1) {\n                 // This part needs refinement: Adjust widths proportionally based on *previous* widths?\n                 // For simplicity now, we redistribute equally in the target row upon drop.\n                 // A more complex approach would try to maintain relative proportions.\n                 img.columnWidth = widthPerColumn;\n             }\n             // Adjust widths in the source row if it wasn't emptied\n             else if (rIndex === actualSourceRowIndex && newRows[rIndex]?.length > 0) {\n                 const sourceRowWidth = 100 / newRows[rIndex].length;\n                 img.columnWidth = sourceRowWidth;\n             }\n\n             // Fallback safety check for width\n             if (img.columnWidth === undefined || img.columnWidth === null || isNaN(img.columnWidth) || img.columnWidth <=0) {\n                 img.columnWidth = 100 / row.length;\n             }\n        });\n         // Re-normalize widths for the row to ensure they sum to 100%\n         const currentRowTotalWidth = row.reduce((sum, img) => sum + (img.columnWidth || 0), 0);\n         if (currentRowTotalWidth > 0 && Math.abs(currentRowTotalWidth - 100) > 0.1) {\n             const scale = 100 / currentRowTotalWidth;\n             row.forEach(img => img.columnWidth = (img.columnWidth || 0) * scale);\n         } else if (currentRowTotalWidth === 0 && row.length > 0) {\n              const equalWidth = 100 / row.length;\n              row.forEach(img => img.columnWidth = equalWidth);\n         }\n    });\n\n\n    // Update state and notify parent\n    setRows(newRows);\n    if (onImagesReordered) {\n      const allImages = newRows.flat();\n      onImagesReordered(allImages);\n    }\n\n    // Reset drag state\n    handleDragEnd();\n  };\n\n  // Helper function to clean up drag image\n  const cleanupDragImage = () => {\n    if (dragImageRef.current && document.body.contains(dragImageRef.current)) {\n      document.body.removeChild(dragImageRef.current);\n    }\n    dragImageRef.current = null;\n  };\n\n  const handleDragEnd = () => {\n    setDraggingImage(null);\n    setDragOverRow(null);\n    setDragOverColumn(null);\n    // Clean up any lingering drag image\n    cleanupDragImage();\n  };\n\n  // --- Resizing Handlers ---\n  const handleResizeMouseDown = (\n      e: React.MouseEvent<HTMLDivElement>,\n      rowIndex: number,\n      dividerIndex: number // Index of the divider (between col dividerIndex and dividerIndex + 1)\n  ) => {\n      e.preventDefault();\n      e.stopPropagation(); // Prevent drag-start on the image behind\n\n      // Prevent resizing if any image is uploading\n      if (isAnyImageUploading()) {\n        return;\n      }\n\n      const rowElement = (e.target as HTMLElement).closest('.image-row-container');\n      if (!rowElement) return;\n\n      const rowElementWidth = rowElement.getBoundingClientRect().width;\n      if (rowElementWidth <= 0) return; // Avoid division by zero\n\n      // Store initial state for resizing calculation\n      setResizingState({\n          rowIndex,\n          dividerIndex,\n          startX: e.clientX,\n          rowElementWidth,\n          initialWidths: rows[rowIndex].map(img => img.columnWidth || 0), // Store initial widths of the row\n      });\n  };\n\n  // Helper function to normalize column widths in a row\n  const normalizeRowWidths = useCallback((row: Array<GridImage | GridPendingImage>, minWidth = MIN_COL_WIDTH_PERCENT) => {\n    if (!row || row.length === 0) return row;\n\n    // Calculate total width\n    const totalWidth = row.reduce((sum, img) => sum + (img.columnWidth || 0), 0);\n\n    // If total is already close to 100%, no need to normalize\n    if (Math.abs(totalWidth - 100) < 0.1) return row;\n\n    // If total is 0, distribute equally\n    if (totalWidth === 0) {\n      const equalWidth = 100 / row.length;\n      row.forEach(img => img.columnWidth = equalWidth);\n      return row;\n    }\n\n    // Scale all widths proportionally\n    const scaleFactor = 100 / totalWidth;\n    row.forEach(img => {\n      img.columnWidth = (img.columnWidth || 0) * scaleFactor;\n      // Ensure minimum width\n      img.columnWidth = Math.max(minWidth, img.columnWidth);\n    });\n\n    // Final check - if we're still not at 100% due to min width constraints,\n    // adjust the largest column to compensate\n    const newTotal = row.reduce((sum, img) => sum + (img.columnWidth || 0), 0);\n    if (Math.abs(newTotal - 100) > 0.1) {\n      // Find the largest column\n      const largestColIndex = row.reduce(\n        (maxIndex, img, index, arr) =>\n          (img.columnWidth || 0) > (arr[maxIndex].columnWidth || 0) ? index : maxIndex,\n        0\n      );\n      // Adjust it to make the total 100%\n      row[largestColIndex].columnWidth = (row[largestColIndex].columnWidth || 0) - (newTotal - 100);\n    }\n\n    return row;\n  }, []);\n\n  // Use useCallback for handlers used in effects to prevent unnecessary re-renders/listener attachments\n  const handleResizeMouseMove = useCallback((e: MouseEvent) => {\n    if (!resizingState) return;\n\n    const { rowIndex, dividerIndex, startX, rowElementWidth, initialWidths } = resizingState;\n\n    const currentX = e.clientX;\n    const deltaX = currentX - startX;\n    const deltaPercent = (deltaX / rowElementWidth) * 100;\n\n    // Create a deep copy of the rows for modification\n    const newRows = [...rows.map(row => [...row.map(img => ({ ...img }))])];\n    const targetRow = newRows[rowIndex];\n\n    // Calculate total initial width left and right of the divider\n    let totalInitialLeftWidth = 0;\n    for (let i = 0; i <= dividerIndex; i++) {\n      totalInitialLeftWidth += initialWidths[i];\n    }\n    let totalInitialRightWidth = 0;\n    for (let i = dividerIndex + 1; i < initialWidths.length; i++) {\n      totalInitialRightWidth += initialWidths[i];\n    }\n\n    // Calculate the new target total widths for left/right sections\n    let newTotalLeftWidth = totalInitialLeftWidth + deltaPercent;\n    let newTotalRightWidth = totalInitialRightWidth - deltaPercent;\n\n    // Apply minimum width constraints\n    const numLeftImages = dividerIndex + 1;\n    const numRightImages = initialWidths.length - numLeftImages;\n    const minTotalLeftWidth = numLeftImages * MIN_COL_WIDTH_PERCENT;\n    const minTotalRightWidth = numRightImages * MIN_COL_WIDTH_PERCENT;\n\n    // Clamp totals\n    newTotalLeftWidth = Math.max(minTotalLeftWidth, newTotalLeftWidth);\n    newTotalRightWidth = Math.max(minTotalRightWidth, newTotalRightWidth);\n\n    // Ensure the sum is still 100% after clamping\n    const currentTotal = newTotalLeftWidth + newTotalRightWidth;\n    if (Math.abs(currentTotal - 100) > 0.1) {\n      const scaleFactor = 100 / currentTotal;\n      newTotalLeftWidth *= scaleFactor;\n      newTotalRightWidth *= scaleFactor;\n\n      // Re-check min width constraints after scaling\n      newTotalLeftWidth = Math.max(minTotalLeftWidth, newTotalLeftWidth);\n      newTotalRightWidth = Math.max(minTotalRightWidth, newTotalRightWidth);\n\n      // If one side hit min, give remainder to the other\n      if (newTotalLeftWidth === minTotalLeftWidth) {\n        newTotalRightWidth = 100 - newTotalLeftWidth;\n      } else if (newTotalRightWidth === minTotalRightWidth) {\n        newTotalLeftWidth = 100 - newTotalRightWidth;\n      }\n    }\n\n    // Distribute new total widths proportionally\n    // Left side\n    for (let i = 0; i <= dividerIndex; i++) {\n      let newWidth = 0;\n      if (totalInitialLeftWidth > 0) {\n        const proportion = initialWidths[i] / totalInitialLeftWidth;\n        newWidth = newTotalLeftWidth * proportion;\n      } else {\n        newWidth = newTotalLeftWidth / numLeftImages;\n      }\n      targetRow[i].columnWidth = Math.max(MIN_COL_WIDTH_PERCENT, newWidth);\n    }\n\n    // Right side\n    for (let i = dividerIndex + 1; i < targetRow.length; i++) {\n      let newWidth = 0;\n      if (totalInitialRightWidth > 0) {\n        const proportion = initialWidths[i] / totalInitialRightWidth;\n        newWidth = newTotalRightWidth * proportion;\n      } else {\n        newWidth = newTotalRightWidth / numRightImages;\n      }\n      targetRow[i].columnWidth = Math.max(MIN_COL_WIDTH_PERCENT, newWidth);\n    }\n\n    // Final normalization to ensure total is exactly 100%\n    normalizeRowWidths(targetRow);\n\n    // Update the state visually during drag\n    setRows(newRows);\n  }, [resizingState, rows, normalizeRowWidths]); // Added normalizeRowWidths to dependencies\n\n  const handleResizeMouseUp = useCallback(() => {\n      if (!resizingState) return;\n\n      // Persist the final state\n      if (onImagesReordered) {\n           // Find the updated row state (rows state should be current from mouseMove)\n           const finalRowIndex = resizingState.rowIndex;\n           if (rows[finalRowIndex]) {\n                const allImages = rows.flat(); // Flatten the current state\n                onImagesReordered(allImages); // Send the updated layout\n           }\n      }\n      setResizingState(null); // End resizing\n  }, [resizingState, rows, onImagesReordered]); // Include rows and callback\n\n\n  // Effect to add/remove global listeners for resizing\n  useEffect(() => {\n      if (resizingState) {\n          window.addEventListener('mousemove', handleResizeMouseMove);\n          window.addEventListener('mouseup', handleResizeMouseUp);\n          // Optional: Add cursor style to body\n          document.body.style.cursor = 'col-resize';\n      } else {\n          window.removeEventListener('mousemove', handleResizeMouseMove);\n          window.removeEventListener('mouseup', handleResizeMouseUp);\n          // Optional: Reset cursor style\n          document.body.style.cursor = '';\n      }\n\n      // Cleanup function\n      return () => {\n          window.removeEventListener('mousemove', handleResizeMouseMove);\n          window.removeEventListener('mouseup', handleResizeMouseUp);\n          // Optional: Ensure cursor is reset if component unmounts during resize\n          document.body.style.cursor = '';\n      };\n  }, [resizingState, handleResizeMouseMove, handleResizeMouseUp]); // Add handlers to dependency array\n\n\n  return (\n    <Box sx={{ width: '100%' }} ref={gridContainerRef}>\n      {rows.map((row, rowIndex) => (\n        <Box\n          key={`row-${rowIndex}`}\n          className=\"image-row-container\" // Add class for easy selection\n          sx={{\n            display: 'flex',\n            width: '100%',\n            marginBottom: 3, // Use full property name to avoid conflicts\n            position: 'relative',\n            gap: 1, // Add small gap between columns (8px)\n            // All directional drop indicators removed\n          }}\n          // Add DragOver handler for dropping between rows (targets column 0)\n          onDragOver={(e) => handleDragOver(e, rowIndex, 0)}\n           // Add drop handler here too if needed for row-level drops (currently handled by image drop)\n           // onDrop={(e) => handleDrop(e, rowIndex, 0)} // Example if needed\n        >\n          {row.map((image, columnIndex) => {\n            const isPending = isPendingImage(image);\n            const pendingImg = isPending ? image as GridPendingImage : null;\n            const uploadedImg = !isPending ? image as GridImage : null;\n            const imageId = isPending ? pendingImg!.id : uploadedImg!.id;\n            const isLastColumn = columnIndex === row.length - 1;\n\n            return (\n              <React.Fragment key={`image-frag-${imageId}-${rowIndex}-${columnIndex}`}>\n                {/* Image Container */}\n                <Box\n                    key={`image-${imageId}-${rowIndex}-${columnIndex}`}\n                    sx={{\n                        position: 'relative',\n                        // Simplified width calculation - use percentage width directly\n                        width: `${image.columnWidth || DEFAULT_COL_WIDTH}%`,\n                        // No margin needed since we're using flex gap\n                        height: 'auto',\n                        borderRadius: 1,\n                        overflow: 'visible', // Allow potential overflow for captions if needed, adjust styling\n\n                        display: 'flex',\n                        flexDirection: 'column',\n                        opacity: draggingImage === image ? 0.5 : 1,\n                        backgroundColor: 'transparent',\n                        transition: 'border-color 0.2s, background-color 0.2s, opacity 0.2s, box-shadow 0.2s',\n                        // All directional drop indicators removed\n                        ...(draggingImage && dragOverRow === rowIndex && dragOverColumn === columnIndex && {\n                            backgroundColor: alpha(theme.palette.primary.main, 0.1),\n                        }),\n                        '&:hover .resize-handle': { // Show resize handle on hover of image container\n                            opacity: isAnyImageUploading() ? 0.2 : 1, // Dim resize handle during uploads\n                        },\n                        // Visual indication that dragging is disabled during uploads\n                        cursor: isAnyImageUploading() ? 'not-allowed' : 'grab',\n                        filter: isAnyImageUploading() ? 'grayscale(0.2)' : 'none',\n                    }}\n                    draggable={!isAnyImageUploading()} // Disable draggable attribute during uploads\n                    onDragStart={(e) => handleDragStart(e, image, rowIndex, columnIndex)}\n                    onDragOver={(e) => handleDragOver(e, rowIndex, columnIndex)}\n                    onDrop={(e) => handleDrop(e, rowIndex, columnIndex)}\n                    onDragEnd={handleDragEnd}\n                >\n                  {/* Image and Caption Content (mostly unchanged) */}\n                  <Box sx={{ overflow: 'hidden', borderRadius: '4px 4px 0 0' }}> {/* Inner box for image clipping */}\n                        {isPending ? (\n                            // Pending image structure (unchanged)\n                             <>\n                                <Box\n                                    sx={{\n                                        width: '100%',\n                                        height: 'auto',\n                                        // Only apply maxHeight when there are multiple images in a row\n                                        maxHeight: row.length > 1 ? 300 : 'none',\n                                        overflow: 'hidden',\n                                        position: 'relative',\n                                        backgroundColor: alpha(theme.palette.divider, 0.1), // Placeholder bg\n                                        aspectRatio: pendingImg?.width && pendingImg?.height ? `${pendingImg.width}/${pendingImg.height}` : '16/9', // Default aspect ratio\n                                    }}\n                                >\n                                {/* Progress Indicator.uploadProgress == 0 means preparing, > 0 means uploading, -1 or undefined means default  */}\n                                {pendingImg?.uploadProgress !== undefined && pendingImg.uploadProgress >= 0 && pendingImg.uploadProgress < 100 && (\n                                    <Box sx={{ position: 'absolute', top: 0, left: 0, right: 0, bottom: 0, display: 'flex', alignItems: 'center', justifyContent: 'center', backgroundColor: 'rgba(0, 0, 0, 0.5)', zIndex: 2 }}>\n                                        <Box sx={{ position: 'relative', display: 'inline-flex' }}>\n                                            <CircularProgress variant={pendingImg.uploadProgress === 0 ? 'indeterminate' : 'determinate'} value={pendingImg.uploadProgress} size={80} sx={{ color: 'white' }} />\n                                            <Box\n                                                sx={{\n                                                    top: 0,\n                                                    left: 0,\n                                                    bottom: 0,\n                                                    right: 0,\n                                                    position: 'absolute',\n                                                    display: 'flex',\n                                                    alignItems: 'center',\n                                                    justifyContent: 'center',\n                                                }}\n                                            >\n                                                <Typography variant=\"caption\" component=\"div\" sx={{ color: 'white', fontSize: `${pendingImg.uploadProgress === 0 ? '0.55rem' : undefined}`, fontWeight: 'bold' }}>\n                                                    {pendingImg.uploadProgress === 0 ? 'Preparing...' : `${Math.round(pendingImg.uploadProgress)}%`}\n                                                </Typography>\n                                            </Box>\n                                        </Box>\n                                    </Box>\n                                )}\n                                {/* Image Preview */}\n                                <img\n                                    src={pendingImg?.preview}\n                                    alt=\"Pending Upload\"\n                                    style={{ display: 'block', width: '100%', height: '100%', objectFit: 'contain' }}\n                                />\n                                {/* Delete Button */}\n                                {(!pendingImg?.uploadProgress || pendingImg.uploadProgress === 100 || pendingImg.uploadProgress === -1) && (\n                                     <IconButton size=\"small\" onClick={() => onImageRemove(pendingImages.findIndex(img => img.id === image.id), true)}\n                                         sx={{ position: 'absolute', top: 4, right: 4, backgroundColor: 'rgba(0, 0, 0, 0.5)', color: 'white', zIndex: 10, '&:hover': { backgroundColor: 'rgba(0, 0, 0, 0.7)' } }}>\n                                         <DeleteIcon fontSize=\"small\" />\n                                     </IconButton>\n                                 )}\n                                </Box>\n                                {/* Caption Field - Multiline with smaller font */}\n                                <TextField\n                                    placeholder=\"Add a caption...\"\n                                    value={pendingImg?.caption || ''}\n                                    onChange={(e) => onImageCaptionChange(pendingImages.findIndex(img => img.id === image.id), e.target.value, true)}\n                                    variant=\"standard\"\n                                    multiline\n                                    minRows={1}\n                                    maxRows={20} // Large number to effectively disable scrolling\n                                    fullWidth\n                                    // Disable the field when image is uploading\n                                    disabled={pendingImg?.uploadProgress !== undefined && pendingImg.uploadProgress >= 0 && pendingImg.uploadProgress < 100}\n                                    sx={{\n                                        px: 1,\n                                        py: 0.5,\n                                        backgroundColor: theme.palette.background.paper,\n                                        fontSize: '0.75rem', // Smaller font size\n                                        '& .MuiInput-underline:before': { borderBottomColor: 'transparent' },\n                                        '& .MuiInput-underline:after': { borderBottomColor: 'transparent' },\n                                        '& .MuiInput-underline:hover:not(.Mui-disabled):before': { borderBottomColor: 'transparent' },\n                                        '& .MuiInputBase-input': { fontSize: '0.75rem' }, // Ensure input text is also smaller\n                                        '& .MuiInputBase-root': { overflow: 'visible' }, // Prevent scrollbars\n                                        // Style for disabled state\n                                        '&.Mui-disabled': {\n                                            opacity: 0.7,\n                                            '& .MuiInputBase-input': { color: 'text.disabled' }\n                                        }\n                                    }}\n                                />\n                            </>\n                        ) : (\n                            // Uploaded image structure (unchanged)\n                            <>\n                                <Box\n                                    sx={{\n                                        width: '100%',\n                                        height: 'auto',\n                                        // Only apply maxHeight when there are multiple images in a row\n                                        maxHeight: row.length > 1 ? 300 : 'none',\n                                        overflow: 'hidden',\n                                        position: 'relative',\n                                        backgroundColor: alpha(theme.palette.divider, 0.1), // Placeholder bg\n                                        aspectRatio: uploadedImg?.width && uploadedImg?.height ? `${uploadedImg.width}/${uploadedImg.height}` : '16/9', // Default aspect ratio\n                                    }}\n                                >\n                                {/* Loading Placeholder (optional, could use skeleton) */}\n                                {/* <CircularProgress size={24} sx={{ position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)', opacity: 0.5, zIndex: 0 }} /> */}\n                                {/* Show shimmer for pending images when editing a trade */}\n                                {editingTrade && uploadedImg?.pending ? (\n                                    <ShimmerImageBox image={uploadedImg} theme={theme} />\n                                ) : (\n                                    /* Actual Image */\n                                    <img\n                                        src={uploadedImg?.url}\n                                        alt={uploadedImg?.caption || \"Uploaded image\"}\n                                        style={{ display: 'block', width: '100%', height: '100%', objectFit: 'contain', position: 'relative', zIndex: 1 }}\n                                        // onLoad/onError handlers could be added here\n                                    />\n                                )}\n                                 {/* Delete Button */}\n                                <IconButton size=\"small\" onClick={() => onImageRemove(uploadedImages.findIndex(img => img.id === image.id), false)}\n                                    sx={{ position: 'absolute', top: 4, right: 4, backgroundColor: 'rgba(0, 0, 0, 0.5)', color: 'white', zIndex: 10, '&:hover': { backgroundColor: 'rgba(0, 0, 0, 0.7)'} }}>\n                                    <DeleteIcon fontSize=\"small\" />\n                                </IconButton>\n                                </Box>\n                                {/* Caption Field - Multiline with smaller font */}\n                                <TextField\n                                    placeholder=\"Add a caption...\"\n                                    value={uploadedImg?.caption || ''}\n                                    onChange={(e) => onImageCaptionChange(uploadedImages.findIndex(img => img.id === image.id), e.target.value, false)}\n                                    variant=\"standard\"\n                                    multiline\n                                    minRows={1}\n                                    maxRows={20} // Large number to effectively disable scrolling\n                                    fullWidth\n                                    // Disable the field when any image is uploading\n                                    disabled={isAnyImageUploading() || (uploadedImg?.pending === true)}\n                                    sx={{\n                                        px: 1,\n                                        py: 0.5,\n                                        backgroundColor: theme.palette.background.paper,\n                                        fontSize: '0.75rem', // Smaller font size\n                                        '& .MuiInput-underline:before': { borderBottomColor: 'transparent' },\n                                        '& .MuiInput-underline:after': { borderBottomColor: 'transparent' },\n                                        '& .MuiInput-underline:hover:not(.Mui-disabled):before': { borderBottomColor: 'transparent' },\n                                        '& .MuiInputBase-input': { fontSize: '0.75rem' }, // Ensure input text is also smaller\n                                        '& .MuiInputBase-root': { overflow: 'visible' }, // Prevent scrollbars\n                                        // Style for disabled state\n                                        '&.Mui-disabled': {\n                                            opacity: 0.7,\n                                            '& .MuiInputBase-input': { color: 'text.disabled' }\n                                        }\n                                    }}\n                                />\n                            </>\n                        )}\n                  </Box> {/* End inner box for image clipping */}\n\n                </Box>\n\n                {/* Resize Handle (Divider) - Render between images */}\n                {!isLastColumn && row.length > 1 && (\n                  <Box\n                    className=\"resize-handle\"\n                    sx={{\n                      width: '8px', // Wider clickable area\n                      position: 'relative', // Position relative to the flex flow\n                      cursor: isAnyImageUploading() ? 'not-allowed' : 'col-resize',\n                      display: 'flex',\n                      alignItems: 'center',\n                      justifyContent: 'center',\n                      flexShrink: 0, // Don't allow the handle itself to shrink\n                      zIndex: 10, // Higher z-index to ensure it's above images\n                      // Visual divider line\n                      '&::before': {\n                        content: '\"\"',\n                        position: 'absolute',\n                        top: '5%', // Extend more of the height\n                        bottom: '5%',\n                        left: '3px', // Center the visual line within the 8px handle\n                        width: '2px',\n                        backgroundColor: resizingState && resizingState.rowIndex === rowIndex && resizingState.dividerIndex === columnIndex\n                          ? theme.palette.primary.main // Highlight when dragging this handle\n                          : isAnyImageUploading()\n                            ? alpha(theme.palette.divider, 0.4) // Dimmed when uploads in progress\n                            : alpha(theme.palette.divider, 0.8), // Normal color\n                        // Initially invisible, only visible on hover or when resizing\n                        opacity: resizingState && resizingState.rowIndex === rowIndex && resizingState.dividerIndex === columnIndex ? 1 : 0,\n                        transition: 'opacity 0.2s, background-color 0.2s, width 0.2s',\n                      },\n                      // Hover effect - make visible when hovered\n                      '&:hover::before': {\n                        opacity: isAnyImageUploading() ? 0.3 : 1,\n                        width: isAnyImageUploading() ? '2px' : '3px',\n                        backgroundColor: isAnyImageUploading()\n                          ? alpha(theme.palette.divider, 0.4)\n                          : theme.palette.primary.light,\n                      },\n                      // Active state during resize\n                      ...(resizingState && resizingState.rowIndex === rowIndex && resizingState.dividerIndex === columnIndex && {\n                        '&::before': {\n                          opacity: 1,\n                          width: '3px',\n                          backgroundColor: theme.palette.primary.main,\n                        }\n                      }),\n                    }}\n                    onMouseDown={(e) => handleResizeMouseDown(e, rowIndex, columnIndex)}\n                  />\n                )}\n              </React.Fragment>\n            );\n          })}\n        </Box>\n      ))}\n\n      {/* Drop area for creating a new row at the end */}\n      {draggingImage && !isAnyImageUploading() && (\n        <Box\n          sx={{\n            width: '100%',\n            height: 80,\n            border: `2px dashed ${dragOverRow === rows.length && dragOverColumn === 0 ? theme.palette.primary.main : alpha(theme.palette.divider, 0.5)}`,\n            borderRadius: 1,\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            backgroundColor: dragOverRow === rows.length && dragOverColumn === 0 ? alpha(theme.palette.primary.main, 0.1) : 'transparent',\n            color: theme.palette.text.secondary,\n            transition: 'all 0.2s ease-in-out',\n            marginBottom: 2,\n            position: 'relative',\n            // Visual feedback when dragging over with New Row label\n            ...(dragOverRow === rows.length && dragOverColumn === 0 && {\n              backgroundColor: alpha(theme.palette.primary.main, 0.1),\n              border: `2px solid ${theme.palette.primary.main}`,\n              '&::after': {\n                content: '\"New Row\"',\n                position: 'absolute',\n                top: '-10px',\n                right: '10px',\n                backgroundColor: theme.palette.primary.main,\n                color: theme.palette.primary.contrastText,\n                padding: '2px 8px',\n                borderRadius: '4px',\n                fontSize: '0.7rem',\n                fontWeight: 'bold',\n                zIndex: 10,\n                boxShadow: `0 2px 4px ${alpha(theme.palette.common.black, 0.2)}`\n              }\n            })\n          }}\n          onDragOver={(e) => handleDragOver(e, rows.length, 0)} // Target next row index, column 0\n          onDragLeave={() => { /* Reset specific visual state if needed */ }}\n          onDrop={(e) => handleDrop(e, rows.length, null)} // Use null for columnIndex to indicate new row area\n        >\n          Drop here to create a new row\n        </Box>\n      )}\n    </Box>\n  );\n};\n\n// ShimmerImageBox component for displaying a shimmer effect during image upload\nconst ShimmerImageBox: React.FC<{\n  image: GridImage;\n  theme: any; // Theme is used inside the background function\n}> = ({ image, theme }) => {\n  // Define shimmer animation\n  const shimmer = keyframes`\n    0% {\n      background-position: -200% 0;\n    }\n    100% {\n      background-position: 200% 0;\n    }\n  `;\n\n  return (\n    <Box\n      sx={{\n        width: '100%',\n        height: 'auto',\n        maxHeight: 300,\n        overflow: 'hidden',\n        position: 'relative',\n        ...(image.width && image.height ? {\n          paddingTop: `${(image.height / image.width) * 100}%`\n        } : {})\n      }}\n    >\n      <Box\n        sx={{\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%',\n          background: () => {\n            // Use slightly more pronounced colors for better visibility\n            const baseColor = theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.04)';\n            const shimmerColor = theme.palette.mode === 'dark' ? 'rgba(255, 255, 255, 0.15)' : 'rgba(0, 0, 0, 0.1)';\n            return `linear-gradient(90deg, ${baseColor} 25%, ${shimmerColor} 50%, ${baseColor} 75%)`;\n          },\n          backgroundSize: '200% 100%',\n          animation: `${shimmer} 1.5s infinite linear`,\n          willChange: 'background-position', // Optimize animation performance\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n          zIndex: 1\n        }}\n      >\n        <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: 1 }}>\n          <CircularProgress size={24} color=\"primary\" />\n          <Typography variant=\"caption\" sx={{ color: 'text.secondary', fontWeight: 500 }}>\n            Uploading...\n          </Typography>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default ImageGrid;\n","import React, { useRef, useEffect, useState } from 'react';\nimport {\n  Box,\n  Typography,\n  Button,\n  IconButton,\n  Tooltip\n} from '@mui/material';\nimport { AddPhotoAlternate, ViewList, GridView } from '@mui/icons-material';\n\nimport { PendingImage, TradeImage } from './TradeForm';\nimport ImageGrid, { GridImage, GridPendingImage } from './ImageGrid';\n\ninterface ImageUploaderProps {\n  pendingImages: Array<PendingImage>;\n  uploadedImages: Array<TradeImage>;\n  editingTrade: boolean\n  onImageUpload: (files: FileList) => void;\n  onImageCaptionChange: (index: number, caption: string, isPending: boolean) => void;\n  onImageRemove: (index: number, isPending: boolean) => void;\n  onImagesReordered?: (images: Array<GridImage | GridPendingImage>) => void;\n}\n\n\n\ntype LayoutMode = 'vertical' | 'grid';\n\nconst ImageUploader: React.FC<ImageUploaderProps> = ({\n  pendingImages,\n  uploadedImages,\n  editingTrade,\n  onImageUpload,\n  onImageCaptionChange,\n  onImageRemove,\n  onImagesReordered\n}) => {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length > 0) {\n      onImageUpload(e.target.files);\n      // Reset the input value so the same file can be selected again\n      e.target.value = '';\n    }\n  };\n\n  const handleAddImageClick = () => {\n    fileInputRef.current?.click();\n  };\n\n  // Check if any images are currently uploading\n  const isAnyImageUploading = (): boolean => {\n    return pendingImages.some(img =>\n      img.uploadProgress !== undefined &&\n      img.uploadProgress >= 0 &&\n      img.uploadProgress < 100\n    );\n  };\n\n  const organizeImagesVertically = () => {\n    if (!onImagesReordered || isAnyImageUploading()) return;\n\n    const allImages = [...pendingImages, ...uploadedImages];\n\n    // Sort images by their existing row and column values to maintain relative order\n    const sortedImages = [...allImages].sort((a, b) => {\n      const aRow = a.row ?? 0;\n      const bRow = b.row ?? 0;\n      const aCol = a.column ?? 0;\n      const bCol = b.column ?? 0;\n\n      if (aRow === bRow) return aCol - bCol;\n      return aRow - bRow;\n    });\n\n    // Reorganize images vertically (one per row)\n    const reorganizedImages = sortedImages.map((image, index) => ({\n      ...image,\n      row: index,\n      column: 0,\n      columnWidth: 100 // Full width for vertical layout\n    }));\n\n    // Split back into pending and uploaded images\n    const newPendingImages = reorganizedImages.filter(img => 'file' in img) as GridPendingImage[];\n    const newUploadedImages = reorganizedImages.filter(img => !('file' in img)) as GridImage[];\n\n    // Update the layout\n    onImagesReordered([...newPendingImages, ...newUploadedImages]);\n  };\n\n  const organizeImagesInGrid = () => {\n    if (!onImagesReordered || isAnyImageUploading()) return;\n\n    const allImages = [...pendingImages, ...uploadedImages];\n\n    // Sort images by their existing row and column values to maintain relative order\n    const sortedImages = [...allImages].sort((a, b) => {\n      const aRow = a.row ?? 0;\n      const bRow = b.row ?? 0;\n      const aCol = a.column ?? 0;\n      const bCol = b.column ?? 0;\n\n      if (aRow === bRow) return aCol - bCol;\n      return aRow - bRow;\n    });\n\n    // Calculate grid layout with max 3 columns\n    const maxColumns = 3;\n    const columnWidth = 100 / maxColumns;\n\n    const reorganizedImages = sortedImages.map((image, index) => {\n      const row = Math.floor(index / maxColumns);\n      const column = index % maxColumns;\n\n      return {\n        ...image,\n        row,\n        column,\n        columnWidth\n      };\n    });\n\n    // Split back into pending and uploaded images\n    const newPendingImages = reorganizedImages.filter(img => 'file' in img) as GridPendingImage[];\n    const newUploadedImages = reorganizedImages.filter(img => !('file' in img)) as GridImage[];\n\n    // Update the layout\n    onImagesReordered([...newPendingImages, ...newUploadedImages]);\n   \n  };\n\n  const handlePaste = (event: ClipboardEvent) => {\n    const items = event.clipboardData?.items;\n    if (!items) return;\n\n    const imageFiles: File[] = [];\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n      if (item.type.indexOf('image') !== -1) {\n        const file = item.getAsFile();\n        if (file) {\n          imageFiles.push(file);\n        }\n      }\n    }\n\n    if (imageFiles.length > 0) {\n      const dataTransfer = new DataTransfer();\n      imageFiles.forEach(file => dataTransfer.items.add(file));\n      onImageUpload(dataTransfer.files);\n    }\n  };\n\n  useEffect(() => {\n    // Add paste event listener to the document\n    document.addEventListener('paste', handlePaste);\n\n    // Clean up the event listener when the component unmounts\n    return () => {\n      document.removeEventListener('paste', handlePaste);\n    };\n  }, [onImageUpload]); // Add onImageUpload to the dependency array\n\n  return (\n    <Box sx={{ mt: 2 }}>\n      <Typography variant=\"subtitle1\" sx={{ mb: 1 }}>\n        Images\n      </Typography>\n\n      <input\n        type=\"file\"\n        accept=\"image/*\"\n        multiple\n        ref={fileInputRef}\n        style={{ display: 'none' }}\n        onChange={handleFileInputChange}\n      />\n\n      <Box sx={{ mb: 2 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>\n          <Button\n            variant=\"outlined\"\n            startIcon={<AddPhotoAlternate />}\n            onClick={handleAddImageClick}\n          >\n            Add Images\n          </Button>\n          <Box sx={{ flex: 1 }} />  {/* This will push the buttons to the right */}\n\n          <Tooltip title=\"Arrange images vertically (one per row)\">\n            <span> {/* Wrapper needed for disabled Tooltip */}\n              <IconButton\n                onClick={organizeImagesVertically}\n                color={'default'}\n                disabled={pendingImages.length + uploadedImages.length < 2 || isAnyImageUploading()}\n              >\n                <ViewList />\n              </IconButton>\n            </span>\n          </Tooltip>\n\n          <Tooltip title=\"Arrange images in a grid (max 3 columns)\">\n            <span> {/* Wrapper needed for disabled Tooltip */}\n              <IconButton\n                onClick={organizeImagesInGrid}\n                color={'default'}\n                disabled={pendingImages.length + uploadedImages.length < 2 || isAnyImageUploading()}\n              >\n                <GridView />\n              </IconButton>\n            </span>\n          </Tooltip>\n        </Box>\n        <Typography variant=\"caption\" color=\"text.secondary\" display=\"block\">\n          You can also paste images directly (Ctrl+V)\n        </Typography>\n      </Box>\n\n      {(pendingImages.length > 0 || uploadedImages.length > 0) && (\n        <ImageGrid\n          pendingImages={pendingImages}\n          uploadedImages={uploadedImages}\n          editingTrade={editingTrade}\n          onImageCaptionChange={onImageCaptionChange}\n          onImageRemove={onImageRemove}\n          onImagesReordered={onImagesReordered}\n        />\n      )}\n    </Box>\n  );\n};\n\n\nexport default ImageUploader;\n","import React, { useState } from 'react';\nimport {\n  Autocomplete,\n  TextField,\n  Chip,\n  Box,\n  Tooltip,\n  Button,\n  Snackbar,\n  Alert\n} from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\nimport {\n  getTagChipStyles,\n  formatTagForDisplay,\n  isGroupedTag,\n  getTagGroup\n} from '../../utils/tagColors';\nimport TagEditDialog from '../TagEditDialog';\nimport { scrollbarStyles } from '../../styles/scrollbarStyles';\n\ninterface TagsInputProps {\n  tags: string[];\n  allTags: string[];\n  onTagsChange: (event: React.SyntheticEvent, value: string[]) => void;\n  calendarId: string;\n  onTagUpdated?: (oldTag: string, newTag: string) => void;\n}\n\nconst TagsInput: React.FC<TagsInputProps> = ({\n  tags,\n  allTags,\n  onTagsChange,\n  calendarId,\n  onTagUpdated\n}) => {\n  const theme = useTheme();\n  const [tagToEdit, setTagToEdit] = useState<string | null>(null);\n  const [showWarning, setShowWarning] = useState(false);\n\n  const handleTagEditSuccess = (oldTag: string, newTag: string, tradesUpdated: number) => {\n    if (onTagUpdated) {\n      onTagUpdated(oldTag, newTag);\n    }\n  };\n\n  // Validate and filter tags to prevent multiple colons\n  const handleTagsChangeWithValidation = (event: React.SyntheticEvent, value: string[]) => {\n    const validTags: string[] = [];\n    let hasInvalidTags = false;\n\n    value.forEach(tag => {\n      // Count colons in the tag\n      const colonCount = (tag.match(/:/g) || []).length;\n\n      if (colonCount <= 1) {\n        validTags.push(tag);\n      } else {\n        hasInvalidTags = true;\n      }\n    });\n\n    // Show warning if invalid tags were filtered out\n    if (hasInvalidTags) {\n      setShowWarning(true);\n    }\n\n    // Call the original handler with filtered tags\n    onTagsChange(event, validTags);\n  };\n\n  return (\n    <>\n      <Autocomplete\n        multiple\n        freeSolo\n        options={allTags}\n        value={tags}\n        onChange={handleTagsChangeWithValidation}\n        slotProps={{\n          listbox: {\n            sx: {\n              ...scrollbarStyles(theme)\n            }\n          }\n        }}\n        renderTags={(value, getTagProps) =>\n          value.map((option, index) => (\n            <Chip\n              label={formatTagForDisplay(option, false)}\n              {...getTagProps({ index })}\n              sx={getTagChipStyles(option, theme)}\n              title={isGroupedTag(option) ? `Group: ${getTagGroup(option)}` : undefined}\n            />\n          ))\n        }\n        renderOption={(props, option) => (\n          <li {...props}>\n            <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', width: '100%' }}>\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                {isGroupedTag(option) && (\n                  <Chip\n                    label={getTagGroup(option)}\n                    size=\"small\"\n                    sx={{\n                      ...getTagChipStyles(option, theme),\n                      height: '18px',\n                      fontSize: '0.7rem'\n                    }}\n                  />\n                )}\n                {formatTagForDisplay(option, true)}\n              </Box>\n              <Tooltip title=\"Edit this tag across all trades\">\n                <Button\n                  size=\"small\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setTagToEdit(option);\n                  }}\n                  sx={{ \n                    color: theme.palette.text.secondary,\n                    '&:hover': {\n                      color: theme.palette.primary.main\n                    }\n                  }}\n                >\n                  Edit\n                </Button>\n              </Tooltip>\n            </Box>\n          </li>\n        )}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label=\"Tags\"\n            placeholder=\"Add tags\"\n            slotProps={{\n              htmlInput: {\n                ...params.inputProps,\n                id: 'trade-tags-input'\n              }\n            }}\n          />\n        )}\n      />\n\n      {tagToEdit && (\n        <TagEditDialog\n          open={!!tagToEdit}\n          onClose={() => setTagToEdit(null)}\n          tag={tagToEdit}\n          calendarId={calendarId}\n          onSuccess={handleTagEditSuccess}\n        />\n      )}\n\n      <Snackbar\n        open={showWarning}\n        autoHideDuration={4000}\n        onClose={() => setShowWarning(false)}\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n      >\n        <Alert\n          onClose={() => setShowWarning(false)}\n          severity=\"warning\"\n          sx={{ width: '100%' }}\n        >\n          Tags can only contain one colon (:) for category formatting. Invalid tags were removed.\n        </Alert>\n      </Snackbar>\n    </>\n  );\n};\n\nexport default TagsInput;\n","import { Trade } from '../types/trade';\n\n/**\n * Generate trade name suggestions based on past trades\n * @param allTrades Array of all trades\n * @param currentInput Current input value to filter suggestions\n * @param maxSuggestions Maximum number of suggestions to return\n * @returns Array of suggested trade names\n */\nexport const generateTradeNameSuggestions = (\n  allTrades: Trade[],\n  currentInput: string = '',\n  maxSuggestions: number = 10\n): string[] => {\n  if (!allTrades || allTrades.length === 0) {\n    return [];\n  }\n\n  // Extract all unique trade names from past trades\n  const tradeNames = allTrades\n    .map(trade => trade.name)\n    .filter((name): name is string => Boolean(name && name.trim()))\n    .map(name => name.trim())\n    .filter(name => name !== 'New Trade') // Exclude default temporary names\n    .filter((name, index, array) => array.indexOf(name) === index); // Remove duplicates\n\n  // If no input, return most frequently used names\n  if (!currentInput.trim()) {\n    // Count frequency of each trade name\n    const nameFrequency = new Map<string, number>();\n    tradeNames.forEach(name => {\n      nameFrequency.set(name, (nameFrequency.get(name) || 0) + 1);\n    });\n\n    // Sort by frequency (most used first) and return top suggestions\n    return Array.from(nameFrequency.entries())\n      .sort((a, b) => b[1] - a[1])\n      .map(([name]) => name)\n      .slice(0, maxSuggestions);\n  }\n\n  // Filter names that match the current input (case-insensitive)\n  const inputLower = currentInput.toLowerCase();\n  const matchingNames = tradeNames.filter(name =>\n    name.toLowerCase().includes(inputLower)\n  );\n\n  // Sort matching names by relevance:\n  // 1. Exact matches first\n  // 2. Names that start with the input\n  // 3. Names that contain the input\n  const exactMatches = matchingNames.filter(name => \n    name.toLowerCase() === inputLower\n  );\n  \n  const startsWithMatches = matchingNames.filter(name => \n    name.toLowerCase().startsWith(inputLower) && \n    name.toLowerCase() !== inputLower\n  );\n  \n  const containsMatches = matchingNames.filter(name => \n    name.toLowerCase().includes(inputLower) && \n    !name.toLowerCase().startsWith(inputLower)\n  );\n\n  // Combine and limit results\n  const suggestions = [\n    ...exactMatches,\n    ...startsWithMatches,\n    ...containsMatches\n  ].slice(0, maxSuggestions);\n\n  return suggestions;\n};\n\n/**\n * Generate smart trade name suggestions based on current trade context\n * @param allTrades Array of all trades\n * @param currentTags Current trade tags\n * @param currentSession Current trade session\n * @param currentInput Current input value\n * @param maxSuggestions Maximum number of suggestions to return\n * @returns Array of contextual trade name suggestions\n */\nexport const generateContextualTradeNameSuggestions = (\n  allTrades: Trade[],\n  currentTags: string[] = [],\n  currentSession?: string,\n  currentInput: string = '',\n  maxSuggestions: number = 8\n): string[] => {\n  if (!allTrades || allTrades.length === 0) {\n    return generateTradeNameSuggestions(allTrades, currentInput, maxSuggestions);\n  }\n\n  // Find trades with similar context (same tags or session)\n  const contextualTrades = allTrades.filter(trade => {\n    if (!trade.name || trade.name.trim() === '' || trade.name === 'New Trade') {\n      return false;\n    }\n\n    // Check for matching tags\n    const hasMatchingTags = currentTags.length > 0 && trade.tags && \n      trade.tags.some(tag => currentTags.includes(tag));\n\n    // Check for matching session\n    const hasMatchingSession = currentSession && trade.session === currentSession;\n\n    return hasMatchingTags || hasMatchingSession;\n  });\n\n  // If we have contextual trades, prioritize their names\n  if (contextualTrades.length > 0) {\n    const contextualNames = generateTradeNameSuggestions(\n      contextualTrades, \n      currentInput, \n      Math.ceil(maxSuggestions * 0.7) // 70% of suggestions from contextual trades\n    );\n\n    // Fill remaining slots with general suggestions\n    const remainingSlots = maxSuggestions - contextualNames.length;\n    if (remainingSlots > 0) {\n      const generalNames = generateTradeNameSuggestions(\n        allTrades, \n        currentInput, \n        remainingSlots\n      ).filter(name => !contextualNames.includes(name)); // Avoid duplicates\n\n      return [...contextualNames, ...generalNames];\n    }\n\n    return contextualNames;\n  }\n\n  // Fallback to general suggestions\n  return generateTradeNameSuggestions(allTrades, currentInput, maxSuggestions);\n};\n\n/**\n * Generate common trade name patterns based on currency pairs and strategies\n * @param currentInput Current input value\n * @returns Array of common trade name patterns\n */\nexport const generateCommonTradeNamePatterns = (currentInput: string = ''): string[] => {\n  const commonPatterns = [\n    // Currency pairs\n    'EURUSD Long',\n    'EURUSD Short',\n    'GBPUSD Long',\n    'GBPUSD Short',\n    'USDJPY Long',\n    'USDJPY Short',\n    'AUDUSD Long',\n    'AUDUSD Short',\n    'USDCAD Long',\n    'USDCAD Short',\n    'NZDUSD Long',\n    'NZDUSD Short',\n    'EURJPY Long',\n    'EURJPY Short',\n    'GBPJPY Long',\n    'GBPJPY Short',\n    \n    // Strategy patterns\n    'Breakout Trade',\n    'Reversal Trade',\n    'Trend Following',\n    'Support Bounce',\n    'Resistance Rejection',\n    'News Trade',\n    'Scalp Trade',\n    'Swing Trade',\n    'Range Trade',\n    'Momentum Trade'\n  ];\n\n  if (!currentInput.trim()) {\n    return commonPatterns.slice(0, 5); // Return first 5 if no input\n  }\n\n  const inputLower = currentInput.toLowerCase();\n  return commonPatterns\n    .filter(pattern => pattern.toLowerCase().includes(inputLower))\n    .slice(0, 5);\n};","import React, { useMemo } from 'react';\nimport {\n  TextField,\n  FormControl,\n  FormLabel,\n  RadioGroup,\n  FormControlLabel,\n  Radio,\n  Select,\n  MenuItem,\n  InputLabel,\n  Box,\n  FormControlLabel as MuiFormControlLabel,\n  Checkbox,\n  Typography,\n  Chip,\n  alpha,\n  useTheme,\n  Autocomplete\n} from '@mui/material';\nimport { DatePicker } from '@mui/x-date-pickers';\nimport { Trade } from '../../types/trade';\nimport { FormField } from '../StyledComponents';\nimport ImageUploader from './ImageUploader';\nimport { GridImage, GridPendingImage } from './ImageGrid';\nimport { formatCurrency } from '../../utils/formatters';\nimport TagsInput from './TagsInput';\nimport { isGroupedTag, getTagGroup } from '../../utils/tagColors';\nimport { DynamicRiskSettings } from '../../utils/dynamicRiskUtils';\nimport RichTextEditor from '../common/RichTextEditor';\nimport {\n  generateContextualTradeNameSuggestions,\n  generateCommonTradeNamePatterns\n}\n  from '../../utils/tradeNameSuggestions';\nexport interface NewTradeForm {\n  id: string;\n  name: string;\n  amount: string;\n  type: 'win' | 'loss' | 'breakeven';\n  entry: string;\n  exit: string;\n  date?: Date | null;\n  tags: string[];\n  riskToReward: string;\n  partialsTaken: boolean;\n  session: 'Asia' | 'London' | 'NY AM' | 'NY PM' | '';\n  notes: string;\n  pendingImages: Array<PendingImage>;\n  uploadedImages: Array<TradeImage>;\n  isTemporary?: boolean;\n}\n\nexport interface PendingImage {\n  id?: string;\n  file: File;\n  preview: string;\n  caption?: string;\n  width?: number;\n  height?: number;\n  row?: number;\n  column?: number;\n  columnWidth?: number; // Width as percentage (0-100)\n  uploadProgress?: number;\n}\n\nexport interface TradeImage {\n  url: string;\n  id: string;\n  calendarId: string;\n  pending?: boolean;\n  caption?: string;\n  width?: number;\n  height?: number;\n  row?: number;\n  column?: number;\n  columnWidth?: number; // Width as percentage (0-100)\n}\ninterface TradeFormProps {\n  newTrade: NewTradeForm;\n  editingTrade: Trade | null;\n  allTags: string[];\n  allTrades?: Trade[];\n  isSubmitting: boolean;\n  accountBalance: number;\n  dynamicRiskSettings: DynamicRiskSettings;\n  calculateCumulativePnl(newTrade?: NewTradeForm): number;\n  calculateAmountFromRiskToReward: (rr: number, cumulativePnL: number) => number;\n  calendarId: string;\n  requiredTagGroups?: string[];\n  onTagUpdated?: (oldTag: string, newTag: string) => void;\n  onNameChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onAmountChange: (amount: string) => void;\n  onTypeChange: (e: any) => void;\n  onEntryChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onExitChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onRiskToRewardChange: (riskToReward: string) => void;\n  onPartialsTakenChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onSessionChange: (e: any) => void;\n  onNotesChange: (value: string) => void;\n  onTagsChange: (event: React.SyntheticEvent, newValue: string[]) => void;\n  onDateChange?: (date: Date | null) => void;\n  onImageUpload: (files: FileList) => void;\n  onImageCaptionChange: (index: number, caption: string, isPending: boolean) => void;\n  onImageRemove: (index: number, isPending: boolean) => void;\n  onImagesReordered?: (images: Array<GridImage | GridPendingImage>) => void;\n  onSubmit: (e: React.FormEvent) => void;\n  // Optional props for trade link navigation in notes\n  trades?: Array<{ id: string; [key: string]: any }>;\n  onOpenGalleryMode?: (trades: any[], initialTradeId?: string, title?: string) => void;\n}\n\nconst TradeForm: React.FC<TradeFormProps> = ({\n  newTrade,\n  editingTrade,\n  allTags,\n  allTrades = [],\n  isSubmitting,\n  accountBalance,\n  dynamicRiskSettings,\n  calculateAmountFromRiskToReward,\n  calculateCumulativePnl,\n  calendarId,\n  requiredTagGroups = [],\n  onTagUpdated,\n  onNameChange,\n  onAmountChange,\n  onTypeChange,\n  onEntryChange,\n  onExitChange,\n  onRiskToRewardChange,\n  onPartialsTakenChange,\n  onSessionChange,\n  onNotesChange,\n  onTagsChange,\n  onDateChange,\n  onImageUpload,\n  onImageCaptionChange,\n  onImageRemove,\n  onImagesReordered,\n  onSubmit,\n  trades,\n  onOpenGalleryMode\n}) => {\n  const theme = useTheme();\n\n  // Calculate which required tag groups are still missing\n  const missingRequiredGroups = useMemo(() => {\n    if (!requiredTagGroups || requiredTagGroups.length === 0) return [];\n\n    // Get the groups that are already satisfied by current tags\n    const satisfiedGroups = new Set<string>();\n    newTrade.tags.forEach(tag => {\n      if (isGroupedTag(tag)) {\n        const group = getTagGroup(tag);\n        satisfiedGroups.add(group);\n      }\n    });\n\n    // Return groups that are required but not satisfied\n    return requiredTagGroups.filter(group => !satisfiedGroups.has(group));\n  }, [requiredTagGroups, newTrade.tags]);\n\n  const cumulativePnl = calculateCumulativePnl(newTrade);\n\n  // Calculate and update the amount based on risk\n  const calculateAmountFromRisk = (): string => {\n    if (!dynamicRiskSettings.riskPerTrade || !newTrade.riskToReward) return '';\n\n    const rr = parseFloat(newTrade.riskToReward);\n    if (isNaN(rr)) return '';\n\n    const amount = calculateAmountFromRiskToReward(rr, cumulativePnl);\n\n    // Ensure the amount is updated in the form state\n    // This is important to make sure the amount is saved correctly\n    if (!newTrade.partialsTaken && amount > 0) {\n      // Only update if we're not in manual mode and have a valid amount\n      setTimeout(() => onAmountChange(amount.toString()), 0);\n    }\n\n    return amount.toString();\n  };\n\n  // Add trade name suggestions logic\n  const tradeNameSuggestions = useMemo(() => {\n    if (!allTrades || allTrades.length === 0) {\n      return generateCommonTradeNamePatterns(newTrade.name);\n    }\n\n    const contextualSuggestions = generateContextualTradeNameSuggestions(\n      allTrades,\n      newTrade.tags,\n      newTrade.session || undefined,\n      newTrade.name,\n      8\n    );\n\n    // If no contextual suggestions, add some common patterns\n    if (contextualSuggestions.length < 5) {\n      const commonPatterns = generateCommonTradeNamePatterns(newTrade.name);\n      const uniquePatterns = commonPatterns.filter(pattern =>\n        !contextualSuggestions.includes(pattern)\n      );\n      return [...contextualSuggestions, ...uniquePatterns].slice(0, 8);\n    }\n\n    return contextualSuggestions;\n  }, [allTrades, newTrade.name, newTrade.tags, newTrade.session]);\n\n\n\n\n  const handleRiskToRewardChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    if (value === '' || /^\\d*\\.?\\d*$/.test(value)) {\n      onRiskToRewardChange(value)\n\n      // If risk per trade is set and partials are not taken, automatically calculate and update the amount\n      if (dynamicRiskSettings.riskPerTrade && value && !newTrade.partialsTaken) {\n        const rr = parseFloat(value);\n        if (!isNaN(rr)) {\n          const calculatedAmount = calculateAmountFromRiskToReward(rr, cumulativePnl);\n          onAmountChange(calculatedAmount.toString())\n        }\n      }\n    }\n  };\n\n\n  return (\n    <form onSubmit={onSubmit}>\n      <FormField>\n        <Autocomplete\n          freeSolo\n          options={tradeNameSuggestions}\n          value={newTrade.name}\n          onInputChange={(event, newValue) => {\n            // Create a synthetic event for compatibility with existing handler\n            const syntheticEvent = {\n              target: { value: newValue || '' }\n            } as React.ChangeEvent<HTMLInputElement>;\n            onNameChange(syntheticEvent);\n          }}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              label=\"Trade Name\"\n              placeholder=\"Enter a name for this trade\"\n              fullWidth\n            />\n          )}\n          renderOption={(props, option) => (\n            <Box component=\"li\" {...props}>\n              <Typography variant=\"body2\">{option}</Typography>\n            </Box>\n          )}\n          sx={{\n            '& .MuiAutocomplete-option': {\n              fontSize: '0.875rem',\n            }\n          }}\n        />\n      </FormField>\n      <Box sx={{ display: 'flex', gap: 2, width: '100%' }}>\n        <FormField sx={{ flex: 1 }}>\n          <TextField\n            label=\"Entry Price\"\n            value={newTrade.entry}\n            onChange={onEntryChange}\n            fullWidth\n            placeholder=\"Optional entry price\"\n          />\n        </FormField>\n        <FormField sx={{ flex: 1 }}>\n          <TextField\n            label=\"Exit Price\"\n            value={newTrade.exit}\n            onChange={onExitChange}\n            fullWidth\n            placeholder=\"Optional exit price\"\n          />\n        </FormField>\n      </Box>\n\n      {/* Date picker - only show when editing a trade */}\n      {editingTrade && onDateChange && (\n        <FormField>\n          <DatePicker\n            label=\"Trade Date\"\n            value={newTrade.date}\n            onChange={onDateChange}\n            slotProps={{\n              textField: {\n                fullWidth: true,\n                helperText: 'Change the date of this trade'\n              }\n            }}\n          />\n        </FormField>\n      )}\n      <FormControl component=\"fieldset\" sx={{ mb: 2 }}>\n        <FormLabel component=\"legend\">Trade Type</FormLabel>\n        <RadioGroup\n          row\n          name=\"type\"\n          value={newTrade.type}\n          onChange={onTypeChange}\n        >\n          <FormControlLabel\n            value=\"win\"\n            control={<Radio />}\n            label=\"Win\"\n          />\n          <FormControlLabel\n            value=\"loss\"\n            control={<Radio />}\n            label=\"Loss\"\n          />\n          <FormControlLabel\n            value=\"breakeven\"\n            control={<Radio />}\n            label=\"Breakeven\"\n          />\n        </RadioGroup>\n      </FormControl>\n      {(!dynamicRiskSettings.riskPerTrade || (dynamicRiskSettings.riskPerTrade && newTrade.partialsTaken)) ? (\n        <FormField>\n          <TextField\n            label=\"Amount\"\n            type=\"number\"\n            value={newTrade.amount}\n            onChange={(e) => onAmountChange(e.target.value)}\n            fullWidth\n            required\n            helperText={dynamicRiskSettings.riskPerTrade && newTrade.partialsTaken ? \"Manual entry for partial profits\" : undefined}\n          />\n        </FormField>\n      ) : (\n        <FormField>\n          <TextField\n            label=\"Amount (Calculated from Risk)\"\n            type=\"number\"\n            value={calculateAmountFromRisk()}\n            sx={{\n              '& .MuiInputBase-input': { pointerEvents: 'none' }\n            }}\n            fullWidth\n            disabled\n            helperText={\n              dynamicRiskSettings?.dynamicRiskEnabled &&\n                dynamicRiskSettings.increasedRiskPercentage &&\n                dynamicRiskSettings.profitThresholdPercentage &&\n                (cumulativePnl / accountBalance * 100) >= dynamicRiskSettings.profitThresholdPercentage\n                ? `Based on ${dynamicRiskSettings.increasedRiskPercentage}% of account balance (INCREASED from ${dynamicRiskSettings.riskPerTrade}%)`\n                : `Based on ${dynamicRiskSettings.riskPerTrade}% of account balance (${formatCurrency((accountBalance * (dynamicRiskSettings.riskPerTrade || 0)) / 100)})`\n            }\n          />\n        </FormField>\n      )}\n\n\n      {dynamicRiskSettings.riskPerTrade !== undefined && (\n        <FormField>\n          <MuiFormControlLabel\n            control={\n              <Checkbox\n                checked={newTrade.partialsTaken}\n                onChange={onPartialsTakenChange}\n              />\n            }\n            label={\n              <Typography variant=\"body2\">\n                Partials taken (allows manual amount entry)\n              </Typography>\n            }\n          />\n        </FormField>\n      )}\n      <FormField>\n        <TextField\n          label=\"Risk to Reward\"\n          value={newTrade.riskToReward}\n          onChange={handleRiskToRewardChange}\n          fullWidth\n          type=\"number\"\n          sx={{\n            '& input': { min: 0, step: 0.1 }\n          }}\n        />\n      </FormField>\n      <FormField>\n        <FormControl fullWidth>\n          <InputLabel id=\"session-label\">Session</InputLabel>\n          <Select\n            labelId=\"session-label\"\n            value={newTrade.session}\n            onChange={onSessionChange}\n            label=\"Session\"\n          >\n            <MenuItem value=\"\">None</MenuItem>\n            <MenuItem value=\"Asia\">Asia</MenuItem>\n            <MenuItem value=\"London\">London</MenuItem>\n            <MenuItem value=\"NY AM\">NY AM</MenuItem>\n            <MenuItem value=\"NY PM\">NY PM</MenuItem>\n          </Select>\n        </FormControl>\n      </FormField>\n      <FormField>\n        {/* Required Tag Groups Indicator */}\n        {missingRequiredGroups.length > 0 && (\n          <Box sx={{\n            mb: 2,\n            p: 2,\n            borderRadius: 1,\n            bgcolor: alpha(theme.palette.warning.main, 0.1),\n            border: `1px solid ${alpha(theme.palette.warning.main, 0.3)}`\n          }}>\n            <Typography variant=\"body2\" color=\"warning.main\" sx={{ fontWeight: 600, mb: 1 }}>\n              Required Tag Groups\n            </Typography>\n            <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mb: 1, display: 'block' }}>\n              Please add at least one tag from each required group:\n            </Typography>\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n              {missingRequiredGroups.map(group => (\n                <Chip\n                  key={group}\n                  label={group}\n                  size=\"small\"\n                  color=\"warning\"\n                  variant=\"outlined\"\n                  sx={{\n                    fontWeight: 500,\n                    '& .MuiChip-label': {\n                      fontSize: '0.75rem'\n                    }\n                  }}\n                />\n              ))}\n            </Box>\n          </Box>\n        )}\n\n        <TagsInput\n          tags={newTrade.tags}\n          allTags={allTags}\n          onTagsChange={onTagsChange}\n          calendarId={calendarId}\n          onTagUpdated={onTagUpdated}\n        />\n        <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mt: 0.5, display: 'block' }}>\n          Pro tip: Categorize tags using the format \"Category:Tag\" (e.g., \"Strategy:Breakout\", \"Setup:Double Top\").\n          Categorized tags are grouped together in charts, making it easier to filter and analyze your trading patterns\n          and identify which strategies and setups are most profitable. Note: Only one colon (:) is allowed per tag.\n        </Typography>\n      </FormField>\n\n\n      {/* Debug layout information */}\n      {/* {(() => {\n        console.log(\"TradeForm rendering with images:\",\n          \"Pending:\", newTrade.pendingImages.map(img => ({ id: img.id, row: img.row, column: img.column, columnWidth: img.columnWidth })),\n          \"Uploaded:\", newTrade.uploadedImages.map(img => ({ id: img.id, row: img.row, column: img.column, columnWidth: img.columnWidth })));\n        return null;\n      })()} */}\n\n      <ImageUploader\n        pendingImages={newTrade.pendingImages}\n        uploadedImages={newTrade.uploadedImages}\n        editingTrade={editingTrade !== null}\n        onImageUpload={onImageUpload}\n        onImageCaptionChange={onImageCaptionChange}\n        onImageRemove={onImageRemove}\n        onImagesReordered={onImagesReordered}\n      />\n\n      <FormField>\n        <RichTextEditor\n          label=\"Notes\"\n          value={newTrade.notes}\n          onChange={onNotesChange}\n          placeholder=\"Add notes for this trade...\"\n          minHeight={150}\n          maxHeight={400}\n          maxLength={1024}\n          calendarId={calendarId}\n          trades={trades}\n          onOpenGalleryMode={onOpenGalleryMode}\n        />\n      </FormField>\n\n      <Box sx={{ display: 'flex', justifyContent: 'flex-end', mt: 2, gap: 1 }}>\n        <button\n          type=\"submit\"\n          style={{ display: 'none' }}\n          disabled={isSubmitting}\n        />\n      </Box>\n    </form>\n  );\n};\n\nexport default TradeForm;\n","import React, { useEffect } from 'react';\nimport {\n  Box,\n  Typography,\n  IconButton,\n  useTheme\n} from '@mui/material';\nimport { ChevronLeft, ChevronRight } from '@mui/icons-material';\nimport { format } from 'date-fns';\nimport { alpha } from '@mui/material/styles';\n\ninterface DayHeaderProps {\n  formInputVisible: boolean;\n  accountBalance: number;\n  title:string,\n  totalPnL: number;\n  onPrevDay: () => void;\n  onNextDay: () => void;\n}\n\nconst DayHeader: React.FC<DayHeaderProps> = ({\n  accountBalance,\n  formInputVisible,\n  totalPnL,\n  title,\n  onPrevDay,\n  onNextDay\n}) => {\n  const theme = useTheme();\n  \n   \n  \n  return (\n    <Box sx={{ mb: 3 }}>\n      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>\n        {!formInputVisible && <IconButton onClick={onPrevDay} size=\"small\">\n          <ChevronLeft />\n        </IconButton>}\n        \n        \n        {title && <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n          {title}\n        </Typography>}\n        \n        {!formInputVisible && <IconButton onClick={onNextDay} size=\"small\">\n          <ChevronRight />\n        </IconButton>\n        }\n      </Box>\n      \n      <Box sx={{ display: 'flex', gap: 2 }}>\n       \n        \n        <Box\n          sx={{\n            flex: 1,\n            p: 2,\n            borderRadius: 1,\n            bgcolor: totalPnL >= 0\n              ? alpha(theme.palette.success.main, 0.1)\n              : alpha(theme.palette.error.main, 0.1),\n            border: '1px solid',\n            borderColor: totalPnL >= 0\n              ? alpha(theme.palette.success.main, 0.2)\n              : alpha(theme.palette.error.main, 0.2)\n          }}\n        >\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Day P&L\n          </Typography>\n          <Typography\n            variant=\"h6\"\n            sx={{\n              fontWeight: 600,\n              color: totalPnL >= 0\n                ? theme.palette.success.main\n                : theme.palette.error.main\n            }}\n          >\n            {totalPnL >= 0 ? '+' : ''}{totalPnL.toLocaleString()}\n          </Typography>\n        </Box>\n\n        <Box\n          sx={{\n            flex: 1,\n            p: 2,\n            borderRadius: 1,\n            bgcolor: alpha(theme.palette.primary.main, 0.1),\n            border: '1px solid',\n            borderColor: alpha(theme.palette.primary.main, 0.2)\n          }}\n        >\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Balance Of The Day\n          </Typography>\n          <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\n            ${accountBalance.toLocaleString()}\n          </Typography>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default DayHeader;\n"],"names":["_ref","progress","isMet","tooltipText","theme","useTheme","badgeContent","_jsxs","Box","sx","display","alignItems","justifyContent","bgcolor","alpha","palette","success","main","primary","color","borderRadius","width","height","ml","px","border","children","_jsx","CheckCircle","fontSize","mr","Flag","Typography","variant","fontWeight","Math","max","toFixed","Tooltip","title","arrow","placement","CustomYAxisTick","props","x","y","payload","value","formattedValue","formatValue","transform","dy","textAnchor","fill","CustomTooltip","active","label","type","length","data","Paper","p","boxShadow","shadows","mb","dailyChange","cumulativePnL","trades","mt","_ref2","chartData","targetValue","monthlyTarget","setMultipleTradesDialog","timePeriod","COLORS","py","ResponsiveContainer","AreaChart","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","CartesianGrid","strokeDasharray","vertical","XAxis","dataKey","axisLine","tickLine","tick","text","secondary","YAxis","content","_Fragment","ReferenceLine","stroke","strokeWidth","Area","fillOpacity","baseValue","name","style","cursor","activeDot","cx","cy","index","r","background","paper","onClick","console","log","dataPoint","formattedDate","format","fullDate","open","date","expandedTradeId","dot","CustomDailyPnLYAxisTick","isWin","isLoss","pnl","drawdownViolationValue","BarChart","error","position","Bar","radius","map","entry","Cell","TabPanel","role","hidden","activeTab","setActiveTab","useState","pt","Tabs","onChange","handleTabChange","_","newValue","minHeight","backgroundColor","mode","padding","gap","Tab","my","textTransform","pb","CumulativePnLChart","DailyPnLChart","onClose","allTags","selectedTags","onTagsChange","showClearButton","showApplyButton","selectedTagGroup","setSelectedTagGroup","tagGroups","useMemo","getUniqueTagGroups","filteredTags","filterTagsByGroup","dialogTitle","dialogActions","Button","handleClearTags","undefined","BaseDialog","actions","maxWidth","fullWidth","flexDirection","SelectInput","e","target","options","group","size","Autocomplete","multiple","slotProps","listbox","scrollbarStyles","renderInput","params","TextField","placeholder","renderTags","getTagProps","option","Chip","formatTagForDisplay","getTagChipStyles","isGroupedTag","getTagGroup","renderOption","winLossData","comparisonWinLossData","comparisonTags","setComparisonTags","onPieClick","tagStats","comparisonTagsDialogOpen","setComparisonTagsDialogOpen","React","document","createElement","innerHTML","head","appendChild","removeChild","win","loss","zero","breakEven","chartStyle","generateTagDistributionData","some","d","tagCounts","Map","filteredTagStats","filter","stat","includes","tag","forEach","set","totalTrades","split","reduce","acc","char","charCodeAt","Array","from","entries","count","elevation","TagFilterDialog","tags","flex","className","PieChart","outline","tabIndex","margin","top","right","bottom","left","_ref3","getTagColor","sum","item","Pie","labelLine","outerRadius","innerRadius","_ref4","percent","paddingAngle","cornerRadius","fillColor","transition","Legend","verticalAlign","align","layout","iconSize","iconType","wrapperStyle","paddingTop","marginTop","winLossStats","onTradeClick","bestWin","winTrades","trade","best","current","amount","worstLoss","lossTrades","worst","winners","total","losers","Stack","spacing","InfoOutlined","opacity","formatCurrency","avgAmount","maxConsecutive","avgConsecutive","abs","selectedDate","primaryTags","secondaryTags","setPrimaryTags","setSecondaryTags","primaryTagsDialogOpen","setPrimaryTagsDialogOpen","secondaryTagsDialogOpen","setSecondaryTagsDialogOpen","MuiTooltip","borderColor","maxBarSize","wins","losses","winRate","totalPnL","stackId","filteredTrades","_trade$tags","isSameMonth","Date","getFullYear","_trade$tags2","DAYS_OF_WEEK","selectedMetric","setSelectedMetric","neutral","grey","sunday","monday","tuesday","wednesday","thursday","friday","saturday","tagDayOfWeekData","every","day","dayTrades","tradeDate","getDay","dayIndex","dayData","substring","fullDay","toLowerCase","lineHeight","Infinity","domain","tickFormatter","replace","dailySummaryData","TrendingUp","TrendingDown","TrendingFlat","TableContainer","overflow","Table","stickyHeader","TableHead","TableRow","TableCell","borderBottom","divider","TableBody","row","session","fontStyle","sessionStats","SESSION_COLORS","flexWrap","sessionTrades","gutterBottom","averagePnL","pnlPercentage","info","sessionsWithTrades","mostProfitable","prev","highestWinRate","bestAverage","leastLosing","onTradeExpand","onZoomImage","accountBalance","allTrades","onUpdateTradeProperty","onEditClick","onDeleteClick","onDeleteMultiple","onOpenGalleryMode","calendarId","startIcon","GalleryIcon","handleGalleryModeClick","DayHeader","calculateCumulativePnL","startOfNextDay","formInputVisible","onPrevDay","onNextDay","TradeList","onZoomedImage","hideActions","enableBulkSelection","riskRewardStats","average","toLocaleString","minimumFractionDigits","maximumFractionDigits","deletingTradeIds","selectedTradeIds","setSelectedTradeIds","isTradeBeingDeleted","tradeId","isTradeSelected","minWidth","SelectAllIcon","handleSelectAll","DeleteMultipleIcon","handleBulkDelete","TradeListItem","$type","isTemporary","pointerEvents","stopPropagation","Checkbox","checked","handleTradeSelection","selected","disabled","TradeInfo","images","ImageIcon","notes","NoteIcon","riskToReward","RiskIcon","warning","SessionIcon","startsWith","ungroupedTags","push","Object","groupTags","tagIndex","CollapseIcon","ExpandIcon","TradeActions","IconButton","EditIcon","CircularProgress","DeleteIcon","TradeDetailExpanded","tradeData","isExpanded","setZoomedImage","DEFAULT_SCORE_SETTINGS","weights","consistency","riskManagement","performance","discipline","thresholds","minTradesForScore","lookbackPeriod","consistencyTolerance","targets","profitFactor","maxDrawdown","avgRiskReward","excludedTagsFromPatterns","tagPatternService","constructor","minTradesForAnalysis","minTradesForCombination","recentPeriodDays","historicalPeriodDays","analyzeTagPatterns","targetDate","arguments","settings","recentCutoff","subDays","this","historicalCutoff","recentTrades","isAfter","historicalTrades","analyzedCombinations","generateTagCombinations","combo","analyzeTagCombination","topCombinations","sort","a","b","winRateDiff","slice","decliningCombinations","trend","recentWinRate","historicalWinRate","insights","generateInsights","marketConditionAlerts","generateMarketConditionAlerts","excludedTags","Set","tagPairs","tagTriples","add","i","j","pair","join","k","triple","combinations","matchingTrades","recentMatchingTrades","historicalMatchingTrades","avgPnL","recentWins","recentTotal","historicalWins","historicalTotal","description","tagCombination","confidence","min","recommendation","severity","winRateDecline","alerts","sessionTag","find","t","getTagCombinationStats","scoreService","dynamicRiskSettings","updateDynamicRiskSettings","calculateScore","period","scoreSettings","periodTrades","getTradesForPeriod","Promise","resolve","setTimeout","pattern","lookbackDays","preferredSessions","commonTags","avgTradesPerDay","avgTradesPerWeek","avgPositionSize","tradingDays","cutoffDate","sessionCounts","_ref5","_ref6","normalizeTradeAmount","riskRewardTrades","calculateWinRate","normalizedTrades","calculateProfitFactor","peak","runningPnL","tradeAmount","drawdown","dayOfWeekCounts","dayOfWeek","tradingDaysArray","_ref7","_ref8","parseInt","calculateTradingPattern","getHistoricalTrades","calculateConsistencyScore","score","factors","sessionConsistency","tagConsistency","timingConsistency","sizeConsistency","tagTrades","avgTradeSize","sizeDeviation","isNaN","calculateRiskManagementScore","riskRewardRatio","positionSizing","maxDrawdownAdherence","stopLossUsage","rrTrades","avgRR","rrDeviation","tradeSizes","avgSize","sizeVariance","pow","sizeStdDev","sqrt","avgLoss","avgWin","calculatePerformanceScore","winRateConsistency","profitFactorStability","returnsConsistency","volatilityControl","currentWinRate","currentProfitFactor","winRateDeviation","pfDeviation","dailyReturns","avgReturn","ret","returnVariance","returnStdDev","calculateDisciplineScore","tradingPlanAdherence","emotionalControl","overtrading","ruleFollowing","sessionAdherence","sizeCoeffVar","currentFrequency","expectedFrequency","frequencyRatio","rulesFollowed","overall","finalOverall","currentScore","breakdown","calculateTrend","tagPatternAnalysis","recommendations","strengths","weaknesses","generateRecommendations","insight","getScoreHistory","periodsBack","history","today","subWeeks","subMonths","subYears","analysis","metrics","tradeCount","reverse","isSameDay","isSameWeek","weekStartsOn","isSameYear","now","isCurrentPeriod","currentTrades","previousDate","setDate","getDate","setMonth","getMonth","setFullYear","previousTrades","calculateSimpleScore","scoreDifference","threshold","updateSettings","newSettings","getSettings","calculateMultiPeriodScore","daily","weekly","monthly","yearly","all","getScoreSummary","weeklyAnalysis","lowestScore","keyMetric","currentWeekly","compact","recommendedScore","getScoreColor","getTrendIcon","getTrendColor","isScoreMeetingTarget","getTargetStatus","difference","status","message","ProgressWithTarget","showTarget","LinearProgress","common","white","getDetailedTooltip","componentName","scoreComponents","icon","Rule","Shield","Timeline","Psychology","Card","black","CardContent","direction","charAt","toUpperCase","textAlign","component","whiteSpace","HelpOutline","expanded","setExpanded","scoreCategories","formatFactorName","factorKey","str","trim","getScoreTooltip","categoryName","getFactorTooltip","Alert","List","dense","rec","ListItem","ListItemText","strength","Warning","weakness","category","Accordion","panel","AccordionSummary","expandIcon","ExpandMore","flexGrow","Error","AccordionDetails","factorValue","onPeriodChange","dateLabel","backdropFilter","averageScore","latestScore","scoreChange","newPeriod","LineChart","Line","onExcludedTagsChange","propAllTags","searchTerm","setSearchTerm","tagSet","term","availableTags","groupedAvailableTags","groups","input","startAdornment","InputAdornment","SearchIcon","keys","maxHeight","categoryTags","newExcludedTags","handleAddAllInCategory","Divider","disablePadding","secondaryAction","handleAddTag","useFlexGap","onDelete","handleRemoveTag","tagToRemove","deleteIcon","Close","stats","percentage","round","newSelectedTags","handleClearAll","onSettingsChange","onSave","isSaving","localSettings","setLocalSettings","hasChanges","setHasChanges","handleWeightChange","event","isArray","newWeights","values","weight","otherComponents","key","remaining","otherTotal","handleThresholdChange","parseFloat","handleTargetChange","weightTotal","RestoreRounded","handleReset","SaveRounded","handleSave","dark","FormLabel","Slider","step","marks","gridTemplateColumns","xs","sm","helperText","inputProps","TagSelector","ExcludedTagsSelector","getInsightIcon","Info","getSeverityColor","getWinRateColor","formatWinRate","defaultExpanded","other","onUpdateCalendarProperty","scorePeriod","historyPeriod","setHistoryPeriod","setSettings","setSelectedTags","setIsSaving","isCalculating","setIsCalculating","riskMgmtTarget","performanceTarget","calculateRecommendedScore","scoreAnalysis","setScoreAnalysis","scoreHistory","setScoreHistory","multiPeriodScores","setMultiPeriodScores","breakdownModalOpen","setBreakdownModalOpen","selectedBreakdownData","setSelectedBreakdownData","useEffect","updatedSettings","riskPerTrade","dynamicRiskEnabled","increasedRiskPercentage","profitThresholdPercentage","async","calculateScoreAnalysis","calculateScoreHistory","scores","calculateMultiPeriodScores","handleScoreCardClick","handleCloseBreakdownModal","handleSettingsSave","tagsOverride","calendar","savedSettings","localStorage","getItem","parsedSettings","JSON","parse","md","ScoreCard","ScoreHistory","TagPatternAnalysis","ScoreSettingsComponent","Dialog","DialogTitle","DialogContent","ScoreBreakdown","grossProfit","grossLoss","calculateTargetProgress","startDate","calculateTotalPnL","baselineAccountValue","targetAmount","calculateDayStats","maxDailyDrawdown","dayDate","netAmount","calculatePercentageOfValueAtDate","startOfDay","effectiveMaxDailyDrawdown","calculateEffectiveMaxDailyDrawdown","percentageValue","isDrawdownViolation","onDateSelect","initialDate","yearlyTarget","currentDate","setCurrentDate","currentYear","months","currentMonth","yearTrades","yearlyPnL","yearlyWinCount","yearlyLossCount","yearlyWinRate","startOfYear","tradesBeforeYear","accountValueAtStartOfYear","yearlyGrowthPercentage","getMonthPnL","monthIndex","bestMonth","getBestMonth","bestMonthIndex","bestMonthPnL","monthPnL","yearlyTargetProgress","getYearlyTargetProgress","rawProgress","CalendarToday","handleToday","handlePrevYear","ChevronLeft","letterSpacing","handleNextYear","addYears","ChevronRight","handleYearlyGalleryMode","hideFooterCancelButton","default","pl","TargetBadge","light","EmojiEvents","CalendarMonth","month","hasEntries","targetProgress","monthTrades","startOfMonth","tradesBeforeMonth","accountValueAtStartOfMonth","getMonthTargetProgress","growthPercentage","getMonthGrowthPercentage","newDate","handleMonthSelect","onTimePeriodChange","onPrimaryTagsChange","onSecondaryTagsChange","onEditTrade","onDeleteTrade","setTimePeriod","tagAnalysisTab","setTagAnalysisTab","multipleTradesDialog","updatedDialogTrades","dialogTrade","isDeleted","stringify","zoomedImages","setZoomedImages","setChartData","isCalculatingChartData","setIsCalculatingChartData","calculateChartData","calculateChartDataAsync","getFilteredTrades","utilGetFilteredTrades","getTime","riskRewardValues","rr","breakevens","totalWins","totalLosses","totalBreakevens","winRateDenominator","totalWinAmount","totalLossAmount","totalBreakevenAmount","avgBreakeven","currentWinStreak","maxWinStreak","totalWinStreaks","winStreakCount","currentLossStreak","maxLossStreak","totalLossStreaks","lossStreakCount","tradesByDate","dateKey","mostCommonSession","highestCount","parseISO","tagMap","get","totalTradesForWinRate","sessionName","_trade$tags$includes","secondaryTag","_trade$tags$includes2","handleTradeExpand","ImageZoomDialog","imageProp","TradesListDialog","handleZoomImage","imageUrl","allImages","initialIndex","selectetdImageIndex","handleTimePeriodChange","RiskRewardChart","WinLossStats","PnLChartsWrapper","WinLossDistribution","categoryTrades","dateText","_trade$tags3","DailySummaryTable","handleTagAnalysisTabChange","TagPerformanceAnalysis","TagDayOfWeekAnalysis","SessionPerformanceAnalysis","ScoreSection","processTagsForSubmission","tagInput","getElementById","pendingTag","calculateCumulativePnLToDate","nextDay","createEditTradeData","_trade$riskToReward","toString","exit","partialsTaken","pendingImages","uploadedImages","img","column","columnWidth","newMainTrade","setNewMainTrade","showForm","onCancel","onAddTrade","onTagUpdated","requiredTagGroups","editingTrade","setEditingTrade","isSubmitting","setIsSubmitting","isCreatingEmptyTrade","setIsCreatingEmptyTrade","snackbarOpen","setSnackbarOpen","snackbarMessage","setSnackbarMessage","newTrade","setNewTrade","prevShowFormRef","useRef","createEmptyTrade","useCallback","createNewTradeData","createFinalTradeData","showErrorSnackbar","_prevShowFormRef$curr","_prevShowFormRef$curr2","shouldCreateTempTrade","createTempTrade","prevShouldCreateTempTrade","editTrade","handleSnackbarClose","resetForm","image","URL","revokeObjectURL","preview","handleUpdateTradeProperty","updateCallback","createIfNotExists","calculateFinalAmount","calculatedAmount","calculateAmountFromRiskToReward","endOfDay","finalAmount","finalTags","uuidv4","getHours","getMinutes","getSeconds","isDeleting","effectiveRiskPercentage","calculateEffectiveRiskPercentage","riskAmount","calculateRiskAmount","startImageUpload","uploadProgress","uploadedImage","calendarService","file","caption","originalPendingImage","updatedImage","indexOf","newPendingImages","imageIndex","findIndex","splice","newUploadedImages","pending","_trade$images","existingImage","finalUpdatedImage","updateError","hasPendingUploads","validateRequiredTagGroups","valid","missingGroups","presentGroups","has","handleSubmit","preventDefault","dbError","cleanupError","handleEditSubmit","updatedImages","url","updatedDate","editError","hideCloseButton","primaryButtonText","primaryButtonAction","cancelButtonAction","TradeForm","calculateCumulativePnl","handleTagUpdated","oldTag","newTag","onNameChange","onAmountChange","onTypeChange","onEntryChange","onExitChange","onRiskToRewardChange","onPartialsTakenChange","onSessionChange","onNotesChange","handleTagsChange","_event","onDateChange","onImageUpload","files","createObjectURL","dimensions","Image","onload","src","existingPendingImages","existingUploadedImages","maxRow","newImagesWithLayout","existingImages","newImages","newRow","tradeid","onImageCaptionChange","isPending","warn","onImageRemove","deleteError","onImagesReordered","onSubmit","Snackbar","autoHideDuration","anchorOrigin","horizontal","endDate","endOfMonth","sortedTrades","days","eachDayOfInterval","start","end","cumulative","prevCumulative","result","chunk","chunkResult","dailyPnL","isIncreasing","isDecreasing","isBreakEven","calculateSessionStats","calculateTargetValue","calculateDrawdownViolationValue","onSuccess","setNewTag","setError","isGrouped","tagName","match","tradesUpdated","getTagNamePart","fullTag","setTagName","tagGroup","setTagGroup","safeOnClose","cancelButtonText","newGroupName","autoFocus","newTagName","calendarNote","isEditable","emptyStateText","editedData","setEditedData","saveStatus","setSaveStatus","saveTimeout","clearTimeout","note","WebkitBackgroundClip","WebkitTextFillColor","CheckIcon","ErrorIcon","handleToggleExpand","ExpandLessIcon","ExpandMoreIcon","Collapse","in","onKeyDown","ctrlKey","metaKey","RichTextEditor","onDeleteMultipleTrades","showAddForm","setExpandedTradeId","handleAddClick","handlePrevDay","prevDay","handleNextDay","tagToEdit","setTagToEdit","localRequiredGroups","setLocalRequiredGroups","filtered","groupedTags","InputProps","endAdornment","FilterListIcon","typography","body2","FormControlLabel","control","Switch","updatedGroups","g","InfoIcon","TagEditDialog","handleTagEditSuccess","oldGroup","newGroup","updatedRequiredGroups","Drawer","anchor","zIndex","TagIcon","CloseIcon","searchQuery","setSearchQuery","isSearching","setIsSearching","setFilteredTrades","suggestedTags","setSuggestedTags","isFilterExpanded","setIsFilterExpanded","isDateFilterExpanded","setIsDateFilterExpanded","dateFilter","setDateFilter","filteredTagOptions","debouncedSearchQuery","useDebounce","delay","debouncedValue","setDebouncedValue","handler","results","query","filterDate","endOfFilterDate","isBefore","startFilterDate","endFilterDate","searchTerms","performSearch","suggestions","getSuggestedTags","_terms","terms","lastTerm","existingTags","lowerTag","displayTag","existing","performBackgroundSearch","handleDateFilterChange","handleStartDateChange","handleEndDateChange","handleClearDateFilter","getTradeTypeIcon","WinIcon","LossIcon","BreakevenIcon","getTradeTypeColor","handleTagClick","currentTerms","newTerms","handleTradeClick","FilterIcon","DateRangeIcon","FormControl","RadioGroup","Radio","DatePicker","textField","minDate","clickable","ListItemButton","textOverflow","DateIcon","mx","styled","shape","alignContent","CalendarCell","aspectRatio","WeekdayHeader","currentNotes","setCurrentNotes","dayFullName","EventNoteIcon","daysNotesMap","daysNotes","dayKey","contentSx","exportTrades","initialBalance","fileFormat","exportData","currentBalance","Name","Type","Amount","Tags","Session","Notes","prepareTradeDataForExport","fileName","exportToExcel","wb","XLSX","book_new","ws","json_to_sheet","wch","book_append_sheet","exportToCsv","headers","csvRows","header","escaped","String","csvContent","blob","Blob","link","setAttribute","visibility","body","click","knownTradeProperties","DATE_FORMATS","parseTradeData","jsonData","dateStr","normalizedDateStr","parsedDate","monthNameMatch","year","directDate","parseDate","tradeType","Boolean","trimmedValue","typeStr","crypto","randomUUID","importTrades","reject","_file$name$split$pop","reader","FileReader","fileType","pop","_e$target","rows","inQuotes","currentValue","obj","parseError","importFromCsv","_e$target2","workbook","Uint8Array","SheetNames","worksheet","Sheets","sheet_to_json","importFromExcel","errorMessage","onerror","readAsText","readAsArrayBuffer","onImportTrades","onClearMonthTrades","showClearConfirm","setShowClearConfirm","netAmountForThisMonth","winCount","lossCount","startOfCurrentMonth","isTargetMet","exportFormat","setExportFormat","isImporting","setIsImporting","snackbarSeverity","setSnackbarSeverity","accept","_event$target$files","importedTrades","htmlFor","FileUpload","FileDownload","handleExport","toggleExportFormat","handleClearClick","DialogActions","handleClearConfirm","balance","totalProfit","onPerformanceClick","onToggleDynamicRisk","isDynamicRiskToggled","isEditing","setIsEditing","tempBalance","setTempBalance","profitPercentage","totalAccountValue","newBalance","test","onBlur","SecurityIcon","m","convertRichTextToHtml","rawContent","contentState","convertFromRaw","inlineStyles","fromEntries","colorHex","padStart","TEXT_COLOR_FF0000","TEXT_COLOR_00FF00","TEXT_COLOR_0000FF","TEXT_COLOR_FFFF00","TEXT_COLOR_FF00FF","TEXT_COLOR_00FFFF","TEXT_COLOR_000000","TEXT_COLOR_FFFFFF","TEXT_COLOR_808080","TEXT_COLOR_FFA500","TEXT_COLOR_800080","TEXT_COLOR_008000","TEXT_COLOR_800000","TEXT_COLOR_000080","TEXT_COLOR_808000","TEXT_COLOR_008080","blockStyleFn","block","getType","element","html","stateToHTML","parsed","blocks","_calendarNotes$get","calendarNotes","setIsDayNotesDialogOpen","isContentOverflowing","setIsContentOverflowing","currentDayOfWeek","hasNoteForToday","checkOverflow","contentElement","containerElement","tempDiv","clientWidth","actualContentHeight","offsetHeight","isOverflowing","clientHeight","paperStyles","AddIcon","boxSizing","animationPlayState","animation","paddingBottom","ref","el","container","parentElement","_el$textContent","contentLength","textContent","duration","setProperty","dangerouslySetInnerHTML","__html","NoteAddIcon","pinnedTrades","isPinned","sortedPinnedTrades","PinIcon","initialTradeId","currentIndex","setCurrentIndex","currentTrade","navigateNext","navigatePrevious","handleKeyDown","window","addEventListener","removeEventListener","PaperProps","ArrowBackIcon","CalendarIcon","ArrowForwardIcon","isPerformanceDialogOpen","setIsPerformanceDialogOpen","AnalyticsIcon","PerformanceCharts","isVisible","onPrevMonth","onNextMonth","onMonthClick","WeeklyPnL","monthStart","weekIndex","weeklyTarget","weekStart","startOfWeek","weekTrades","endOfWeek","TagFilter","onOpenDrawer","FilterAlt","Clear","TradeCalendar","onAccountBalanceChange","calendarName","calendarDayNotes","onToggleTheme","isLoadingTrades","setSelectedDate","isDayNotesDialogOpen","isMonthSelectorOpen","setIsMonthSelectorOpen","setShowAddForm","setZoomedImagesState","tradesToDelete","setTradesToDelete","isDeleteDialogOpen","setIsDeleteDialogOpen","setDeletingTradeIds","setDeleteError","isTagManagementDialogOpen","setIsTagManagementDialogOpen","isTagManagementDrawerOpen","setIsTagManagementDrawerOpen","isSearchDrawerOpen","setIsSearchDrawerOpen","setIsDynamicRiskToggled","showFloatingMonthNav","setShowFloatingMonthNav","pinnedTradesDrawerOpen","setPinnedTradesDrawerOpen","galleryMode","setGalleryMode","useParams","handleScroll","section","querySelector","rect","getBoundingClientRect","innerHeight","tradesForSelectedDay","handlePrevMonth","firstDay","lastDay","handleNextMonth","addMonths","hasPinnedTrades","handleDeleteClick","handleDeleteMultipleTrades","tradeIds","handleConfirmDelete","deletePromises","successMessage","showSnackbar","handleAddTrade","handleMonthClick","openGalleryMode","FloatingMonthNavigation","AppHeader","showBackButton","backButtonPath","Toolbar","CalendarNote","AccountStats","useActualAmounts","DayNoteCard","MonthlyStats","Today","handleTodayClick","handleMonthlyGalleryMode","_calendarDayNotes$get","hasNotes","eachWeekOfInterval","weekDays","dayStats","isCurrentMonth","isCurrentDay","isToday","StyledCalendarDay","showDayDialogWhenDone","handleDayClick","$isCurrentMonth","$dayStatus","borderWidth","DayNumber","AnimatedPulse","TradeAmount","TradeCount","toISOString","MonthlyStatisticsSection","DayDialog","TradeFormDialog","DayNotesDialog","SelectDateDialog","TagManagementDrawer","TagManagementDialog","ConfirmationDialog","confirmText","cancelText","onConfirm","handleCancelDelete","confirmColor","action","retryDeletion","Fab","SearchDrawer","PinnedTradesDrawer","TradeGalleryDialog","closeGalleryMode","ShimmerImageBox","shimmer","keyframes","baseColor","backgroundSize","willChange","setRows","draggingImage","setDraggingImage","dragOverRow","setDragOverRow","dragOverColumn","setDragOverColumn","resizingState","setResizingState","gridContainerRef","dragImageRef","newRows","organizeImagesIntoRows","_img$id","_img$id2","rowMap","maxDefinedRow","nextRowIndex","Number","rowIndex","rIndex","_a$column","_b$column","totalDefinedWidth","undefinedWidthCount","cIndex","widthPerUndefined","scaleFactor","_image$columnWidth","equalWidth","finalRows","isPendingImage","isAnyImageUploading","handleDragOver","columnIndex","dataTransfer","dropEffect","handleDrop","targetRowIndex","targetColumnIndex","_rows$sourceRowIndex","sourceData","getData","sourceRowIndex","sourceColumnIndex","imageId","isSourcePending","imageToMove","foundAtIndex","handleDragEnd","flatImages","flat","actualSourceRowIndex","actualSourceColumnIndex","finalTargetRowIndex","finalTargetColumnIndex","widthPerColumn","_newRows$rIndex","sourceRowWidth","currentRowTotalWidth","scale","cleanupDragImage","contains","normalizeRowWidths","totalWidth","newTotal","largestColIndex","maxIndex","arr","handleResizeMouseMove","dividerIndex","startX","rowElementWidth","initialWidths","deltaPercent","clientX","targetRow","totalInitialLeftWidth","totalInitialRightWidth","newTotalLeftWidth","newTotalRightWidth","numLeftImages","numRightImages","minTotalLeftWidth","minTotalRightWidth","currentTotal","newWidth","handleResizeMouseUp","finalRowIndex","marginBottom","onDragOver","pendingImg","uploadedImg","isLastColumn","draggable","onDragStart","handleDragStart","setData","effectAllowed","currentTarget","offsetX","offsetY","clientY","dragImage","cloneNode","setDragImage","onDrop","onDragEnd","alt","objectFit","multiline","minRows","maxRows","borderBottomColor","flexShrink","onMouseDown","handleResizeMouseDown","rowElement","closest","contrastText","onDragLeave","fileInputRef","handlePaste","_event$clipboardData","items","clipboardData","imageFiles","getAsFile","DataTransfer","AddPhotoAlternate","handleAddImageClick","_fileInputRef$current","organizeImagesVertically","reorganizedImages","_a$row","_b$row","aRow","bRow","aCol","bCol","ViewList","organizeImagesInGrid","sortedImages","_a$row2","_b$row2","_a$column2","_b$column2","floor","GridView","ImageGrid","showWarning","setShowWarning","freeSolo","handleTagsChangeWithValidation","validTags","hasInvalidTags","htmlInput","generateTradeNameSuggestions","currentInput","maxSuggestions","tradeNames","array","nameFrequency","inputLower","matchingNames","generateCommonTradeNamePatterns","commonPatterns","missingRequiredGroups","satisfiedGroups","cumulativePnl","tradeNameSuggestions","contextualSuggestions","currentTags","currentSession","contextualTrades","hasMatchingTags","hasMatchingSession","contextualNames","ceil","remainingSlots","generalNames","generateContextualTradeNameSuggestions","uniquePatterns","FormField","onInputChange","required","calculateAmountFromRisk","MuiFormControlLabel","InputLabel","Select","labelId","MenuItem","TagsInput","ImageUploader","maxLength"],"sourceRoot":""}