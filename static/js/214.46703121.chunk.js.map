{"version":3,"file":"static/js/214.46703121.chunk.js","mappings":"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","sources":["components/CalendarFormDialog.tsx","components/CalendarHome.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Button,\r\n  TextField,\r\n  Stack,\r\n  Box,\r\n  CircularProgress,\r\n  Typography,\r\n  FormControlLabel,\r\n  Switch\r\n} from '@mui/material';\r\nimport { Calendar } from '../types/calendar';\r\nimport { BaseDialog } from './common';\r\n\r\nexport interface CalendarFormData {\r\n  name: string;\r\n  accountBalance: number;\r\n  maxDailyDrawdown: number;\r\n  weeklyTarget?: number;\r\n  monthlyTarget?: number;\r\n  yearlyTarget?: number;\r\n  riskPerTrade?: number;\r\n  dynamicRiskEnabled?: boolean;\r\n  increasedRiskPercentage?: number;\r\n  profitThresholdPercentage?: number;\r\n}\r\n\r\ninterface CalendarFormDialogProps {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  onSubmit: (calendarData: CalendarFormData) => Promise<void>;\r\n  initialData?: Partial<Calendar>;\r\n  isSubmitting: boolean;\r\n  mode: 'create' | 'edit';\r\n  title: string;\r\n  submitButtonText: string;\r\n}\r\n\r\nexport const CalendarFormDialog: React.FC<CalendarFormDialogProps> = ({\r\n  open,\r\n  onClose,\r\n  onSubmit,\r\n  initialData,\r\n  isSubmitting,\r\n  mode,\r\n  title,\r\n  submitButtonText\r\n}) => {\r\n  // Form state\r\n  const [name, setName] = useState('');\r\n  const [accountBalance, setAccountBalance] = useState('');\r\n  const [maxDailyDrawdown, setMaxDailyDrawdown] = useState('');\r\n  const [weeklyTarget, setWeeklyTarget] = useState('');\r\n  const [monthlyTarget, setMonthlyTarget] = useState('');\r\n  const [yearlyTarget, setYearlyTarget] = useState('');\r\n  const [riskPerTrade, setRiskPerTrade] = useState('');\r\n  const [dynamicRiskEnabled, setDynamicRiskEnabled] = useState(false);\r\n  const [increasedRiskPercentage, setIncreasedRiskPercentage] = useState('');\r\n  const [profitThresholdPercentage, setProfitThresholdPercentage] = useState('');\r\n\r\n  // Initialize form with initial data when in edit mode or reset when dialog opens/closes\r\n  useEffect(() => {\r\n    if (open) {\r\n      if (initialData && mode === 'edit') {\r\n        setName(initialData.name || '');\r\n        setAccountBalance(initialData.accountBalance?.toString() || '');\r\n        setMaxDailyDrawdown(initialData.maxDailyDrawdown?.toString() || '');\r\n        setWeeklyTarget(initialData.weeklyTarget?.toString() || '');\r\n        setMonthlyTarget(initialData.monthlyTarget?.toString() || '');\r\n        setYearlyTarget(initialData.yearlyTarget?.toString() || '');\r\n        setRiskPerTrade(initialData.riskPerTrade?.toString() || '');\r\n        setDynamicRiskEnabled(initialData.dynamicRiskEnabled || false);\r\n        setIncreasedRiskPercentage(initialData.increasedRiskPercentage?.toString() || '');\r\n        setProfitThresholdPercentage(initialData.profitThresholdPercentage?.toString() || '');\r\n      } else {\r\n        // Reset form for create mode\r\n        resetForm();\r\n      }\r\n    }\r\n  }, [open, initialData, mode]);\r\n\r\n  const resetForm = () => {\r\n    setName('');\r\n    setAccountBalance('');\r\n    setMaxDailyDrawdown('');\r\n    setWeeklyTarget('');\r\n    setMonthlyTarget('');\r\n    setYearlyTarget('');\r\n    setRiskPerTrade('');\r\n    setDynamicRiskEnabled(false);\r\n    setIncreasedRiskPercentage('');\r\n    setProfitThresholdPercentage('');\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (name.trim() && accountBalance.trim() && maxDailyDrawdown.trim()) {\r\n      const balance = parseFloat(accountBalance);\r\n      const maxDrawdown = parseFloat(maxDailyDrawdown);\r\n      const weeklyTargetValue = weeklyTarget.trim() ? parseFloat(weeklyTarget) : undefined;\r\n      const monthlyTargetValue = monthlyTarget.trim() ? parseFloat(monthlyTarget) : undefined;\r\n      const yearlyTargetValue = yearlyTarget.trim() ? parseFloat(yearlyTarget) : undefined;\r\n      const riskPerTradeValue = riskPerTrade.trim() ? parseFloat(riskPerTrade) : undefined;\r\n      const increasedRiskValue = increasedRiskPercentage.trim() ? parseFloat(increasedRiskPercentage) : undefined;\r\n      const profitThresholdValue = profitThresholdPercentage.trim() ? parseFloat(profitThresholdPercentage) : undefined;\r\n\r\n      if (!isNaN(balance) && balance >= 0 && !isNaN(maxDrawdown) && maxDrawdown > 0 &&\r\n          (weeklyTargetValue === undefined || (!isNaN(weeklyTargetValue) && weeklyTargetValue > 0)) &&\r\n          (monthlyTargetValue === undefined || (!isNaN(monthlyTargetValue) && monthlyTargetValue > 0)) &&\r\n          (yearlyTargetValue === undefined || (!isNaN(yearlyTargetValue) && yearlyTargetValue > 0)) &&\r\n          (riskPerTradeValue === undefined || (!isNaN(riskPerTradeValue) && riskPerTradeValue > 0)) &&\r\n          (increasedRiskValue === undefined || (!isNaN(increasedRiskValue) && increasedRiskValue > 0)) &&\r\n          (profitThresholdValue === undefined || (!isNaN(profitThresholdValue) && profitThresholdValue > 0))) {\r\n\r\n        await onSubmit({\r\n          name: name.trim(),\r\n          accountBalance: balance,\r\n          maxDailyDrawdown: maxDrawdown,\r\n          weeklyTarget: weeklyTargetValue,\r\n          monthlyTarget: monthlyTargetValue,\r\n          yearlyTarget: yearlyTargetValue,\r\n          riskPerTrade: riskPerTradeValue,\r\n          dynamicRiskEnabled,\r\n          increasedRiskPercentage: increasedRiskValue,\r\n          profitThresholdPercentage: profitThresholdValue\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const isFormValid = name.trim() && accountBalance.trim() && maxDailyDrawdown.trim();\r\n\r\n  const dialogTitle = title;\r\n\r\n  const dialogActions = (\r\n    <>\r\n      <Button\r\n        onClick={onClose}\r\n        disabled={isSubmitting}\r\n      >\r\n        Cancel\r\n      </Button>\r\n      <Button\r\n        onClick={handleSubmit}\r\n        variant=\"contained\"\r\n        disabled={!isFormValid || isSubmitting}\r\n        sx={{\r\n          minWidth: 100,\r\n          display: 'flex',\r\n          alignItems: 'center',\r\n          gap: 1\r\n        }}\r\n      >\r\n        {submitButtonText}\r\n        {isSubmitting && (\r\n          <CircularProgress\r\n            size={20}\r\n            color=\"inherit\"\r\n          />\r\n        )}\r\n      </Button>\r\n    </>\r\n  );\r\n\r\n  return (\r\n    <BaseDialog\r\n      open={open}\r\n      onClose={() => !isSubmitting && onClose()}\r\n      maxWidth=\"xs\"\r\n      fullWidth\r\n      title={dialogTitle}\r\n      actions={dialogActions}\r\n    >\r\n      <Stack spacing={2} sx={{ mt: 1 }}>\r\n          <TextField\r\n            label=\"Calendar Name\"\r\n            fullWidth\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n            autoFocus\r\n          />\r\n          <TextField\r\n            label={mode === 'create' ? \"Initial Account Balance\" : \"Account Balance\"}\r\n            fullWidth\r\n            value={accountBalance}\r\n            onChange={(e) => {\r\n              const value = e.target.value;\r\n              if (value === '' || /^\\d*\\.?\\d*$/.test(value)) {\r\n                setAccountBalance(value);\r\n              }\r\n            }}\r\n            type=\"number\"\r\n            InputProps={{\r\n              startAdornment: <Box component=\"span\" sx={{ mr: 1 }}>$</Box>\r\n            }}\r\n          />\r\n          <TextField\r\n            label=\"Max Daily Drawdown (%)\"\r\n            fullWidth\r\n            value={maxDailyDrawdown}\r\n            onChange={(e) => {\r\n              const value = e.target.value;\r\n              if (value === '' || /^\\d*\\.?\\d*$/.test(value)) {\r\n                setMaxDailyDrawdown(value);\r\n              }\r\n            }}\r\n            type=\"number\"\r\n            InputProps={{\r\n              endAdornment: <Box component=\"span\" sx={{ ml: 1 }}>%</Box>\r\n            }}\r\n            helperText=\"Maximum allowed loss percentage per day\"\r\n          />\r\n          <TextField\r\n            label=\"Weekly Target (%)\"\r\n            fullWidth\r\n            value={weeklyTarget}\r\n            onChange={(e) => {\r\n              const value = e.target.value;\r\n              if (value === '' || /^\\d*\\.?\\d*$/.test(value)) {\r\n                setWeeklyTarget(value);\r\n              }\r\n            }}\r\n            type=\"number\"\r\n            InputProps={{\r\n              endAdornment: <Box component=\"span\" sx={{ ml: 1 }}>%</Box>\r\n            }}\r\n            helperText=\"Target profit percentage per week\"\r\n          />\r\n          <TextField\r\n            label=\"Monthly Target (%)\"\r\n            fullWidth\r\n            value={monthlyTarget}\r\n            onChange={(e) => {\r\n              const value = e.target.value;\r\n              if (value === '' || /^\\d*\\.?\\d*$/.test(value)) {\r\n                setMonthlyTarget(value);\r\n              }\r\n            }}\r\n            type=\"number\"\r\n            InputProps={{\r\n              endAdornment: <Box component=\"span\" sx={{ ml: 1 }}>%</Box>\r\n            }}\r\n            helperText=\"Target profit percentage per month\"\r\n          />\r\n          <TextField\r\n            label=\"Yearly Target (%)\"\r\n            fullWidth\r\n            value={yearlyTarget}\r\n            onChange={(e) => {\r\n              const value = e.target.value;\r\n              if (value === '' || /^\\d*\\.?\\d*$/.test(value)) {\r\n                setYearlyTarget(value);\r\n              }\r\n            }}\r\n            type=\"number\"\r\n            InputProps={{\r\n              endAdornment: <Box component=\"span\" sx={{ ml: 1 }}>%</Box>\r\n            }}\r\n            helperText=\"Target profit percentage per year\"\r\n          />\r\n          <TextField\r\n            label=\"Risk Per Trade (%)\"\r\n            fullWidth\r\n            value={riskPerTrade}\r\n            onChange={(e) => {\r\n              const value = e.target.value;\r\n              if (value === '' || /^\\d*\\.?\\d*$/.test(value)) {\r\n                setRiskPerTrade(value);\r\n              }\r\n            }}\r\n            type=\"number\"\r\n            InputProps={{\r\n              endAdornment: <Box component=\"span\" sx={{ ml: 1 }}>%</Box>\r\n            }}\r\n            helperText=\"Percentage of account balance to risk per trade (optional)\"\r\n          />\r\n\r\n          {riskPerTrade && (\r\n            <Box sx={{ border: '1px solid', borderColor: 'divider', borderRadius: 1, p: 2, mt: 1 }}>\r\n              <Typography variant=\"subtitle2\" sx={{ mb: 1.5, fontWeight: 600 }}>\r\n                Dynamic Risk Settings\r\n              </Typography>\r\n\r\n              <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                    checked={dynamicRiskEnabled}\r\n                    onChange={(e) => setDynamicRiskEnabled(e.target.checked)}\r\n                    color=\"primary\"\r\n                  />\r\n                }\r\n                label=\"Enable Dynamic Risk\"\r\n                sx={{ mb: 1.5 }}\r\n              />\r\n\r\n              {dynamicRiskEnabled && (\r\n                <Stack spacing={2}>\r\n                  <TextField\r\n                    label=\"Profit Threshold (%)\"\r\n                    fullWidth\r\n                    value={profitThresholdPercentage}\r\n                    onChange={(e) => {\r\n                      const value = e.target.value;\r\n                      if (value === '' || /^\\d*\\.?\\d*$/.test(value)) {\r\n                        setProfitThresholdPercentage(value);\r\n                      }\r\n                    }}\r\n                    type=\"number\"\r\n                    InputProps={{\r\n                      endAdornment: <Box component=\"span\" sx={{ ml: 1 }}>%</Box>\r\n                    }}\r\n                    helperText=\"Increase risk when profit exceeds this percentage\"\r\n                    size=\"small\"\r\n                  />\r\n\r\n                  <TextField\r\n                    label=\"Increased Risk (%)\"\r\n                    fullWidth\r\n                    value={increasedRiskPercentage}\r\n                    onChange={(e) => {\r\n                      const value = e.target.value;\r\n                      if (value === '' || /^\\d*\\.?\\d*$/.test(value)) {\r\n                        setIncreasedRiskPercentage(value);\r\n                      }\r\n                    }}\r\n                    type=\"number\"\r\n                    InputProps={{\r\n                      endAdornment: <Box component=\"span\" sx={{ ml: 1 }}>%</Box>\r\n                    }}\r\n                    helperText=\"New risk percentage when profit threshold is exceeded\"\r\n                    size=\"small\"\r\n                  />\r\n                </Stack>\r\n              )}\r\n            </Box>\r\n          )}\r\n        </Stack>\r\n    </BaseDialog>\r\n  );\r\n};\r\n\r\nexport default CalendarFormDialog;\r\n","import React, { useState, useMemo } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  CardActions,\r\n  IconButton,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  useTheme,\r\n  alpha,\r\n  Container,\r\n  Stack,\r\n  Divider,\r\n  Tooltip,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  AppBar,\r\n  Toolbar,\r\n  Avatar\r\n} from '@mui/material';\r\nimport CalendarFormDialog, { CalendarFormData } from './CalendarFormDialog';\r\nimport {\r\n  Add as AddIcon,\r\n  CalendarToday as CalendarIcon,\r\n  Delete as DeleteIcon,\r\n  TrendingUp,\r\n  CalendarMonth,\r\n  Edit as EditIcon,\r\n  TrendingDown,\r\n  InfoOutlined,\r\n  BarChart as ChartIcon,\r\n  Google as GoogleIcon,\r\n  Logout as LogoutIcon,\r\n  Brightness4 as DarkModeIcon,\r\n  Brightness7 as LightModeIcon\r\n} from '@mui/icons-material';\r\nimport { format } from 'date-fns';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Calendar } from '../types/calendar';\r\nimport { formatCurrency } from '../utils/formatters';\r\nimport { dialogProps } from '../styles/dialogStyles';\r\nimport PerformanceCharts from './PerformanceCharts';\r\nimport SelectDateDialog from './SelectDateDialog';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { keyframes } from '@mui/system';\r\nimport { getCalendarStats } from '../services/calendarService';\r\n// TradeDetailDialog has been removed\r\n\r\ninterface CalendarHomeProps {\r\n  calendars: Calendar[];\r\n  onCreateCalendar: (name: string, accountBalance: number, maxDailyDrawdown: number, weeklyTarget?: number, monthlyTarget?: number, yearlyTarget?: number, riskPerTrade?: number, dynamicRiskEnabled?: boolean, increasedRiskPercentage?: number, profitThresholdPercentage?: number) => void;\r\n  onDeleteCalendar: (id: string) => void;\r\n  onUpdateCalendar: (id: string, updates: Partial<Calendar>) => void;\r\n  onToggleTheme: () => void;\r\n  mode: 'light' | 'dark';\r\n  isLoading?: boolean;\r\n  loadAllTrades?: (calendarId: string) => Promise<void>;\r\n}\r\n\r\nconst shimmer = keyframes`\r\n  0% {\r\n    background-position: -200% 0;\r\n  }\r\n  100% {\r\n    background-position: 200% 0;\r\n  }\r\n`;\r\n\r\nconst CalendarSkeleton = () => {\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <Card sx={{ height: '100%' }}>\r\n      <CardContent sx={{ p: 3 }}>\r\n        <Box sx={{ mb: 2.5 }}>\r\n          {/* Title shimmer */}\r\n          <Box\r\n            sx={{\r\n              height: 28,\r\n              width: '60%',\r\n              borderRadius: 1,\r\n              mb: 1,\r\n              background: `linear-gradient(90deg,\r\n                ${alpha(theme.palette.background.paper, 0.1)} 25%,\r\n                ${alpha(theme.palette.background.paper, 0.2)} 50%,\r\n                ${alpha(theme.palette.background.paper, 0.1)} 75%)`,\r\n              backgroundSize: '200% 100%',\r\n              animation: `${shimmer} 1.5s infinite linear`\r\n            }}\r\n          />\r\n          {/* Date shimmer */}\r\n          <Stack direction=\"row\" spacing={2} sx={{ mb: 1 }}>\r\n            <Box\r\n              sx={{\r\n                height: 20,\r\n                width: '30%',\r\n                borderRadius: 0.5,\r\n                background: `linear-gradient(90deg,\r\n                  ${alpha(theme.palette.background.paper, 0.1)} 25%,\r\n                  ${alpha(theme.palette.background.paper, 0.2)} 50%,\r\n                  ${alpha(theme.palette.background.paper, 0.1)} 75%)`,\r\n                backgroundSize: '200% 100%',\r\n                animation: `${shimmer} 1.5s infinite linear`\r\n              }}\r\n            />\r\n            <Box\r\n              sx={{\r\n                height: 20,\r\n                width: '30%',\r\n                borderRadius: 0.5,\r\n                background: `linear-gradient(90deg,\r\n                  ${alpha(theme.palette.background.paper, 0.1)} 25%,\r\n                  ${alpha(theme.palette.background.paper, 0.2)} 50%,\r\n                  ${alpha(theme.palette.background.paper, 0.1)} 75%)`,\r\n                backgroundSize: '200% 100%',\r\n                animation: `${shimmer} 1.5s infinite linear`\r\n              }}\r\n            />\r\n          </Stack>\r\n        </Box>\r\n        <Divider sx={{ my: 2, opacity: 0.6 }} />\r\n        {/* Stats shimmer */}\r\n        <Stack spacing={2}>\r\n          {[1, 2, 3].map((i) => (\r\n            <Box key={i}\r\n              sx={{\r\n                height: 24,\r\n                width: i === 2 ? '70%' : '85%',\r\n                borderRadius: 0.5,\r\n                background: `linear-gradient(90deg,\r\n                  ${alpha(theme.palette.background.paper, 0.1)} 25%,\r\n                  ${alpha(theme.palette.background.paper, 0.2)} 50%,\r\n                  ${alpha(theme.palette.background.paper, 0.1)} 75%)`,\r\n                backgroundSize: '200% 100%',\r\n                animation: `${shimmer} 1.5s infinite linear`\r\n              }}\r\n            />\r\n          ))}\r\n        </Stack>\r\n      </CardContent>\r\n      <CardActions sx={{\r\n        justifyContent: 'flex-end',\r\n        p: 2,\r\n        pt: 1,\r\n        borderTop: `1px solid ${alpha(theme.palette.divider, 0.1)}`\r\n      }}>\r\n        {/* Action buttons shimmer */}\r\n        <Stack direction=\"row\" spacing={1}>\r\n          {[1, 2, 3].map((i) => (\r\n            <Box key={i}\r\n              sx={{\r\n                height: 32,\r\n                width: 80,\r\n                borderRadius: 1,\r\n                background: `linear-gradient(90deg,\r\n                  ${alpha(theme.palette.background.paper, 0.1)} 25%,\r\n                  ${alpha(theme.palette.background.paper, 0.2)} 50%,\r\n                  ${alpha(theme.palette.background.paper, 0.1)} 75%)`,\r\n                backgroundSize: '200% 100%',\r\n                animation: `${shimmer} 1.5s infinite linear`\r\n              }}\r\n            />\r\n          ))}\r\n        </Stack>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport const CalendarHome: React.FC<CalendarHomeProps> = ({\r\n  calendars,\r\n  onCreateCalendar,\r\n  onDeleteCalendar,\r\n  onUpdateCalendar,\r\n  onToggleTheme,\r\n  mode,\r\n  isLoading: externalLoading,\r\n  loadAllTrades\r\n}) => {\r\n  const { user, signInWithGoogle, signOut } = useAuth();\r\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\r\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\r\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\r\n  const [calendarToDelete, setCalendarToDelete] = useState<string | null>(null);\r\n  const [calendarToEdit, setCalendarToEdit] = useState<Calendar | null>(null);\r\n  const [isCreating, setIsCreating] = useState(false);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const theme = useTheme();\r\n  const navigate = useNavigate();\r\n  const [selectedCalendarForCharts, setSelectedCalendarForCharts] = useState<Calendar | null>(null);\r\n  const [selectedMonth, setSelectedMonth] = useState<Date>(new Date());\r\n  const [isDateDialogOpen, setIsDateDialogOpen] = useState(false);\r\n  const [currentTimePeriod, setCurrentTimePeriod] = useState<'month' | 'year' | 'all'>('month');\r\n  // Track which calendars we've attempted to load trades for\r\n  const [loadAttempted, setLoadAttempted] = useState<{[key: string]: boolean}>({});\r\n  // We no longer need selectedTrade state since TradeDetailDialog has been removed\r\n\r\n  // Use external loading state if provided, otherwise use internal loading state\r\n  const isLoading = externalLoading !== undefined ? externalLoading : false;\r\n\r\n  const handleCreateCalendarSubmit = async (data: CalendarFormData) => {\r\n    setIsCreating(true);\r\n    try {\r\n      await onCreateCalendar(\r\n        data.name,\r\n        data.accountBalance,\r\n        data.maxDailyDrawdown,\r\n        data.weeklyTarget,\r\n        data.monthlyTarget,\r\n        data.yearlyTarget,\r\n        data.riskPerTrade,\r\n        data.dynamicRiskEnabled,\r\n        data.increasedRiskPercentage,\r\n        data.profitThresholdPercentage\r\n      );\r\n      setIsCreateDialogOpen(false);\r\n    } catch (error) {\r\n      console.error('Error creating calendar:', error);\r\n    } finally {\r\n      setIsCreating(false);\r\n    }\r\n  };\r\n\r\n  const handleEditCalendarSubmit = async (data: CalendarFormData) => {\r\n    if (!calendarToEdit) return;\r\n\r\n    setIsEditing(true);\r\n    try {\r\n      const updates: Partial<Calendar> = {\r\n        name: data.name,\r\n        accountBalance: data.accountBalance,\r\n        maxDailyDrawdown: data.maxDailyDrawdown,\r\n        weeklyTarget: data.weeklyTarget,\r\n        monthlyTarget: data.monthlyTarget,\r\n        yearlyTarget: data.yearlyTarget,\r\n        riskPerTrade: data.riskPerTrade,\r\n        dynamicRiskEnabled: data.dynamicRiskEnabled,\r\n        increasedRiskPercentage: data.increasedRiskPercentage,\r\n        profitThresholdPercentage: data.profitThresholdPercentage\r\n      };\r\n\r\n      await onUpdateCalendar(calendarToEdit.id, updates);\r\n      setIsEditDialogOpen(false);\r\n    } catch (error) {\r\n      console.error('Error updating calendar:', error);\r\n    } finally {\r\n      setIsEditing(false);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const handleCalendarClick = async (calendarId: string) => {\r\n    // Load all trades for the calendar if loadAllTrades is provided\r\n    if (loadAllTrades) {\r\n      const calendar = calendars.find(c => c.id === calendarId);\r\n      if (calendar && calendar.loadedYears.length === 0 && !loadAttempted[calendarId]) {\r\n        // Mark that we've attempted to load trades for this calendar\r\n        setLoadAttempted(prev => ({ ...prev, [calendarId]: true }));\r\n        await loadAllTrades(calendarId);\r\n      }\r\n    }\r\n\r\n    navigate(`/calendar/${calendarId}`);\r\n  };\r\n\r\n  const handleDeleteClick = (e: React.MouseEvent, calendarId: string) => {\r\n    e.stopPropagation();\r\n    setCalendarToDelete(calendarId);\r\n    setIsDeleteDialogOpen(true);\r\n  };\r\n\r\n  const handleEditClick = (e: React.MouseEvent, calendar: Calendar) => {\r\n    e.stopPropagation();\r\n    setCalendarToEdit(calendar);\r\n    setIsEditDialogOpen(true);\r\n  };\r\n\r\n  const handleDeleteConfirm = () => {\r\n    if (calendarToDelete) {\r\n      onDeleteCalendar(calendarToDelete);\r\n      setCalendarToDelete(null);\r\n    }\r\n    setIsDeleteDialogOpen(false);\r\n  };\r\n\r\n  const handleViewCharts = async (e: React.MouseEvent, calendar: Calendar) => {\r\n    e.stopPropagation();\r\n\r\n    // Load all trades for the calendar if loadAllTrades is provided\r\n    if (loadAllTrades && calendar.loadedYears.length === 0 && !loadAttempted[calendar.id]) {\r\n      // Mark that we've attempted to load trades for this calendar\r\n      setLoadAttempted(prev => ({ ...prev, [calendar.id]: true }));\r\n      await loadAllTrades(calendar.id);\r\n\r\n      // Find the updated calendar with loaded trades\r\n      const updatedCalendar = calendars.find(c => c.id === calendar.id);\r\n      if (updatedCalendar) {\r\n        setSelectedCalendarForCharts(updatedCalendar);\r\n      } else {\r\n        setSelectedCalendarForCharts(calendar);\r\n      }\r\n    } else {\r\n      setSelectedCalendarForCharts(calendar);\r\n    }\r\n  };\r\n\r\n  const handleCloseCharts = () => {\r\n    setSelectedCalendarForCharts(null);\r\n  };\r\n\r\n  const handleMonthChange = (event: any) => {\r\n    setSelectedMonth(new Date(event.target.value));\r\n  };\r\n\r\n  const handleTimePeriodChange = (period: 'month' | 'year' | 'all') => {\r\n    setCurrentTimePeriod(period);\r\n  };\r\n\r\n  const handleYearChange = (year: number) => {\r\n    const newDate = new Date(year, selectedMonth.getMonth(), 1);\r\n    setSelectedMonth(newDate);\r\n  };\r\n\r\n  // Get available months for the selected calendar\r\n  const availableMonths = useMemo(() => {\r\n    if (!selectedCalendarForCharts) return [];\r\n\r\n    const trades = selectedCalendarForCharts.cachedTrades || [];\r\n    if (trades.length === 0) return [new Date()];\r\n\r\n    const dates = trades.map(trade => new Date(trade.date));\r\n    const minDate = new Date(Math.min(...dates.map(d => d.getTime())));\r\n    const maxDate = new Date(Math.max(...dates.map(d => d.getTime())));\r\n\r\n    // Create an array of months between min and max date\r\n    const months: Date[] = [];\r\n    let currentDate = new Date(minDate.getFullYear(), minDate.getMonth(), 1);\r\n    const endDate = new Date(maxDate.getFullYear(), maxDate.getMonth(), 1);\r\n\r\n    while (currentDate <= endDate) {\r\n      months.push(new Date(currentDate));\r\n      currentDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1);\r\n    }\r\n\r\n    return months;\r\n  }, [selectedCalendarForCharts]);\r\n\r\n\r\n\r\n  const handleSignIn = async () => {\r\n    try {\r\n      await signInWithGoogle();\r\n    } catch (error) {\r\n      console.error('Failed to sign in:', error);\r\n    }\r\n  };\r\n\r\n  const handleSignOut = async () => {\r\n    try {\r\n      await signOut();\r\n    } catch (error) {\r\n      console.error('Failed to sign out:', error);\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <Box>\r\n\r\n      <AppBar position=\"static\" color=\"transparent\"\r\n        elevation={1}\r\n        sx={{\r\n          backdropFilter: 'blur(8px)',\r\n          backgroundColor:  alpha(mode === 'light' ? '#ffffff' : theme.palette.background.default, 0.9),\r\n          borderBottom: `1px solid ${theme.palette.divider}`\r\n        }}>\r\n        <Toolbar>\r\n          <Typography variant=\"h5\" component=\"h1\" sx={{ flexGrow: 1 }}>\r\n            Trade Tracker\r\n          </Typography>\r\n          {user ? (\r\n            <Stack direction=\"row\" spacing={2} alignItems=\"center\">\r\n              <IconButton\r\n                onClick={onToggleTheme}\r\n                color=\"inherit\"\r\n                size=\"small\"\r\n                sx={{\r\n                  '&:hover': {\r\n                    bgcolor: alpha(theme.palette.primary.main, 0.1),\r\n                  }\r\n                }}\r\n              >\r\n                {mode === 'dark' ? <LightModeIcon /> : <DarkModeIcon />}\r\n              </IconButton>\r\n              <Stack direction=\"row\" spacing={1} alignItems=\"center\">\r\n                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                  {user.email}\r\n                </Typography>\r\n                <Avatar\r\n                  src={user.photoURL || undefined}\r\n                  sx={{\r\n                    width: 32,\r\n                    height: 32,\r\n                    bgcolor: theme.palette.primary.main,\r\n                    fontSize: '0.875rem'\r\n                  }}\r\n                >\r\n                  {user.email ? user.email[0].toUpperCase() : 'U'}\r\n                </Avatar>\r\n              </Stack>\r\n              <Button\r\n                variant=\"outlined\"\r\n                color=\"inherit\"\r\n                startIcon={<LogoutIcon />}\r\n                onClick={handleSignOut}\r\n                size=\"small\"\r\n              >\r\n                Sign Out\r\n              </Button>\r\n            </Stack>\r\n          ) : (\r\n            <Stack direction=\"row\" spacing={2} alignItems=\"center\">\r\n              <IconButton\r\n                onClick={onToggleTheme}\r\n                color=\"inherit\"\r\n                size=\"small\"\r\n                sx={{\r\n                  '&:hover': {\r\n                    bgcolor: alpha(theme.palette.primary.main, 0.1),\r\n                  }\r\n                }}\r\n              >\r\n                {mode === 'dark' ? <LightModeIcon /> : <DarkModeIcon />}\r\n              </IconButton>\r\n              <Button\r\n                variant=\"contained\"\r\n                startIcon={<GoogleIcon />}\r\n                onClick={handleSignIn}\r\n                sx={{\r\n                  bgcolor: '#4285F4',\r\n                  '&:hover': {\r\n                    bgcolor: '#3367D6'\r\n                  }\r\n                }}\r\n              >\r\n                Sign in with Google\r\n              </Button>\r\n            </Stack>\r\n          )}\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      <Container maxWidth=\"lg\" sx={{ mt: 4 }}>\r\n        {user ? (\r\n          <>\r\n            <Box sx={{ mb: 4, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n              <Typography variant=\"h4\" component=\"h2\">\r\n                Your Calendars\r\n              </Typography>\r\n              <Button\r\n                variant=\"contained\"\r\n                startIcon={<AddIcon />}\r\n                onClick={() => setIsCreateDialogOpen(true)}\r\n              >\r\n                Create Calendar\r\n              </Button>\r\n            </Box>\r\n\r\n            {calendars.length === 0 && !isLoading ? (\r\n              <Box\r\n                sx={{\r\n                  display: 'flex',\r\n                  flexDirection: 'column',\r\n                  alignItems: 'center',\r\n                  justifyContent: 'center',\r\n                  py: 8,\r\n                  bgcolor: 'background.paper',\r\n                  borderRadius: 2,\r\n                  boxShadow: 1\r\n                }}\r\n              >\r\n                <CalendarIcon sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />\r\n                <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\r\n                  No calendars yet\r\n                </Typography>\r\n                <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" sx={{ mb: 3 }}>\r\n                  Create your first trading calendar to start tracking your trades\r\n                </Typography>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  startIcon={<AddIcon />}\r\n                  onClick={() => setIsCreateDialogOpen(true)}\r\n                >\r\n                  Create Calendar\r\n                </Button>\r\n              </Box>\r\n            ) : (\r\n              <Box sx={{\r\n                display: 'grid',\r\n                gridTemplateColumns: {\r\n                  xs: '1fr',\r\n                  sm: 'repeat(2, 1fr)',\r\n                  md: 'repeat(3, 1fr)'\r\n                },\r\n                gap: 2\r\n              }}>\r\n                {isLoading ? (\r\n                  // Show shimmer skeletons while loading\r\n                  Array.from({ length: 3 }).map((_, index) => (\r\n                    <CalendarSkeleton key={index} />\r\n                  ))\r\n                ) : (\r\n                  // Show actual calendars\r\n                  calendars.map(calendar => {\r\n                    // Use the imported getCalendarStats function from calendarService\r\n                    const stats = getCalendarStats(calendar);\r\n                    return (\r\n                      <Card\r\n                        key={calendar.id}\r\n                        sx={{\r\n                          cursor: 'pointer',\r\n                          transition: 'all 0.3s ease',\r\n                          position: 'relative',\r\n                          overflow: 'hidden',\r\n                          '&:hover': {\r\n                            transform: 'translateY(-4px)',\r\n                            boxShadow: theme.shadows[8],\r\n                            '& .calendar-gradient': {\r\n                              opacity: 1\r\n                            }\r\n                          },\r\n                          '&::before': {\r\n                            content: '\"\"',\r\n                            position: 'absolute',\r\n                            top: 0,\r\n                            left: 0,\r\n                            right: 0,\r\n                            height: '4px',\r\n                          }\r\n                        }}\r\n                        onClick={() => handleCalendarClick(calendar.id)}\r\n                      >\r\n                        <Box\r\n                          className=\"calendar-gradient\"\r\n                          sx={{\r\n                            position: 'absolute',\r\n                            top: 0,\r\n                            left: 0,\r\n                            right: 0,\r\n                            bottom: 0,\r\n                            background: `linear-gradient(135deg, ${alpha(theme.palette.primary.main, 0.05)}, ${alpha(theme.palette.primary.light, 0.02)})`,\r\n                            opacity: 0,\r\n                            transition: 'opacity 0.3s ease',\r\n                            pointerEvents: 'none'\r\n                          }}\r\n                        />\r\n                        <CardContent sx={{ p: 3 }}>\r\n                          <Box sx={{ mb: 2.5 }}>\r\n                            <Typography\r\n                              variant=\"h6\"\r\n                              gutterBottom\r\n                              sx={{\r\n                                fontWeight: 600,\r\n                                color: 'text.primary',\r\n                                display: 'flex',\r\n                                alignItems: 'center',\r\n                                gap: 1\r\n                              }}\r\n                            >\r\n                              {calendar.name}\r\n                              {stats.totalPnL > 0 && (\r\n                                <TrendingUp sx={{ fontSize: '1.2rem', color: 'success.main' }} />\r\n                              )}\r\n                              {stats.totalPnL < 0 && (\r\n                                <TrendingDown sx={{ fontSize: '1.2rem', color: 'error.main' }} />\r\n                              )}\r\n                            </Typography>\r\n                            <Stack direction=\"row\" spacing={2} sx={{ mb: 1 }}>\r\n                              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\r\n                                <CalendarIcon sx={{ fontSize: '1rem' }} />\r\n                                {format(calendar.createdAt, 'MMM d, yyyy')}\r\n                              </Typography>\r\n                              <Typography variant=\"body2\" color=\"text.secondary\" sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\r\n                                <EditIcon sx={{ fontSize: '1rem' }} />\r\n                                {format(calendar.lastModified, 'MMM d, yyyy')}\r\n                              </Typography>\r\n                            </Stack>\r\n                          </Box>\r\n                          <Divider sx={{ my: 2, opacity: 0.6 }} />\r\n\r\n                          <Stack spacing={2}>\r\n                            <Box\r\n                              sx={{\r\n                                display: 'flex',\r\n                                alignItems: 'center',\r\n                                gap: 1.5,\r\n                                p: 1.5,\r\n                                borderRadius: 1,\r\n                                bgcolor: alpha(theme.palette.background.default, 0.6)\r\n                              }}\r\n                            >\r\n                              <Box\r\n                                sx={{\r\n                                  width: 40,\r\n                                  height: 40,\r\n                                  borderRadius: '50%',\r\n                                  display: 'flex',\r\n                                  alignItems: 'center',\r\n                                  justifyContent: 'center',\r\n                                  bgcolor: stats.totalPnL > 0\r\n                                    ? alpha(theme.palette.success.main, 0.1)\r\n                                    : stats.totalPnL < 0\r\n                                    ? alpha(theme.palette.error.main, 0.1)\r\n                                    : alpha(theme.palette.grey[500], 0.1)\r\n                                }}\r\n                              >\r\n                                <TrendingUp sx={{\r\n                                  fontSize: '1.2rem',\r\n                                  color: stats.totalPnL > 0\r\n                                    ? theme.palette.success.main\r\n                                    : stats.totalPnL < 0\r\n                                    ? theme.palette.error.main\r\n                                    : theme.palette.grey[500]\r\n                                }} />\r\n                              </Box>\r\n                              <Box>\r\n                                <Typography variant=\"h6\" sx={{\r\n                                  color: stats.totalPnL > 0\r\n                                    ? 'success.main'\r\n                                    : stats.totalPnL < 0\r\n                                    ? 'error.main'\r\n                                    : 'text.secondary',\r\n                                  fontWeight: 600\r\n                                }}>\r\n                                  {formatCurrency(stats.totalPnL)}\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                  Growth: {stats.growthPercentage.toFixed(2)}%\r\n                                </Typography>\r\n                              </Box>\r\n                            </Box>\r\n\r\n                            <Box sx={{\r\n                              display: 'grid',\r\n                              gridTemplateColumns: 'repeat(2, 1fr)',\r\n                              gap: 2\r\n                            }}>\r\n                              <Box sx={{\r\n                                p: 1.5,\r\n                                borderRadius: 1,\r\n                                bgcolor: alpha(theme.palette.background.default, 0.6)\r\n                              }}>\r\n                                <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                                  Initial Balance\r\n                                </Typography>\r\n                                <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\r\n                                  {formatCurrency(stats.initialBalance)}\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                  Current: {formatCurrency(stats.initialBalance + stats.totalPnL)}\r\n                                </Typography>\r\n                              </Box>\r\n\r\n                              <Box sx={{\r\n                                p: 1.5,\r\n                                borderRadius: 1,\r\n                                bgcolor: alpha(theme.palette.background.default, 0.6)\r\n                              }}>\r\n                                <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                                  Win Rate\r\n                                </Typography>\r\n                                <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\r\n                                  {stats.winRate.toFixed(1)}%\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                  {stats.winCount}W - {stats.lossCount}L\r\n                                </Typography>\r\n                              </Box>\r\n                            </Box>\r\n\r\n                            <Box sx={{\r\n                              display: 'grid',\r\n                              gridTemplateColumns: 'repeat(2, 1fr)',\r\n                              gap: 2\r\n                            }}>\r\n                              <Box sx={{\r\n                                p: 1.5,\r\n                                borderRadius: 1,\r\n                                bgcolor: alpha(theme.palette.background.default, 0.6)\r\n                              }}>\r\n                                <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                                  Profit Factor\r\n                                </Typography>\r\n                                <Tooltip\r\n                                  title={\r\n                                    <Box sx={{ p: 1, maxWidth: 300 }}>\r\n                                      <Typography variant=\"body2\" gutterBottom>\r\n                                        Profit Factor is the ratio of gross profit to gross loss. A value greater than 1 indicates profitable trading.\r\n                                      </Typography>\r\n                                      <Typography variant=\"body2\" sx={{ mt: 1 }}>\r\n                                        • Value &gt; 3: Excellent\r\n                                      </Typography>\r\n                                      <Typography variant=\"body2\">\r\n                                        • Value 2-3: Very Good\r\n                                      </Typography>\r\n                                      <Typography variant=\"body2\">\r\n                                        • Value 1.5-2: Good\r\n                                      </Typography>\r\n                                      <Typography variant=\"body2\">\r\n                                        • Value 1-1.5: Marginal\r\n                                      </Typography>\r\n                                      <Typography variant=\"body2\">\r\n                                        • Value &lt; 1: Unprofitable\r\n                                      </Typography>\r\n                                    </Box>\r\n                                  }\r\n                                  arrow\r\n                                  placement=\"top\"\r\n                                >\r\n                                  <Typography variant=\"h6\" sx={{ fontWeight: 600, cursor: 'help' }}>\r\n                                  <InfoOutlined sx={{ fontSize: '1rem', mr: 0.5 }} />\r\n                                    {stats.profitFactor.toFixed(2)}\r\n                                  </Typography>\r\n                                </Tooltip>\r\n                                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ fontSize: '0.75rem' }}>\r\n                                  Avg Win: {formatCurrency(stats.avgWin)}\r\n                                </Typography>\r\n\r\n                              </Box>\r\n\r\n                              <Box sx={{\r\n                                p: 1.5,\r\n                                borderRadius: 1,\r\n                                bgcolor: alpha(theme.palette.background.default, 0.6)\r\n                              }}>\r\n                                <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                                  Max Drawdown\r\n                                </Typography>\r\n\r\n\r\n                                <Tooltip\r\n                                  title={\r\n                                    <Box sx={{ p: 1, maxWidth: 300 }}>\r\n                                      <Typography variant=\"body2\" gutterBottom>\r\n                                        Maximum drawdown represents the largest peak-to-trough decline in your account balance.\r\n                                      </Typography>\r\n                                      {stats.maxDrawdown > 0 && (\r\n                                        <>\r\n                                          <Typography variant=\"body2\" sx={{ mt: 1 }}>\r\n                                            Recovery needed: {stats.drawdownRecoveryNeeded.toFixed(1)}%\r\n                                          </Typography>\r\n                                          <Typography variant=\"body2\" sx={{ mt: 1 }}>\r\n                                            Duration: {stats.drawdownDuration} days\r\n                                          </Typography>\r\n                                          {stats.drawdownStartDate && stats.drawdownEndDate && (\r\n                                            <Typography variant=\"body2\" sx={{ mt: 1 }}>\r\n                                              Period: {format(stats.drawdownStartDate, 'MMM d')} - {format(stats.drawdownEndDate, 'MMM d')}\r\n                                            </Typography>\r\n                                          )}\r\n                                        </>\r\n                                      )}\r\n                                    </Box>\r\n                                  }\r\n                                  arrow\r\n                                  placement=\"top\"\r\n                                >\r\n                                 <Typography variant=\"h6\" sx={{ fontWeight: 600, cursor: 'help' }}>\r\n                                 <InfoOutlined sx={{ fontSize: '1rem', mr: 0.5 }} />\r\n                                  {stats.maxDrawdown.toFixed(1)}%\r\n                                </Typography>\r\n                                </Tooltip>\r\n                                <Typography variant=\"body2\" color=\"text.secondary\" sx={{ fontSize: '0.75rem', mt: 0.5 }}>\r\n                                  Avg Loss: {formatCurrency(stats.avgLoss)}\r\n                                </Typography>\r\n\r\n                              </Box>\r\n                            </Box>\r\n\r\n                            {(calendar.weeklyTarget || calendar.monthlyTarget || calendar.yearlyTarget) && (\r\n                              <Box sx={{\r\n                                p: 1.5,\r\n                                borderRadius: 1,\r\n                                bgcolor: alpha(theme.palette.background.default, 0.6)\r\n                              }}>\r\n                                <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                                  Target Progress\r\n                                </Typography>\r\n                                <Box sx={{\r\n                                  display: 'grid',\r\n                                  gridTemplateColumns: calendar.weeklyTarget && calendar.monthlyTarget && calendar.yearlyTarget\r\n                                    ? 'repeat(3, 1fr)'\r\n                                    : calendar.weeklyTarget && calendar.monthlyTarget || calendar.weeklyTarget && calendar.yearlyTarget || calendar.monthlyTarget && calendar.yearlyTarget\r\n                                      ? 'repeat(2, 1fr)'\r\n                                      : '1fr',\r\n                                  gap: 2\r\n                                }}>\r\n                                  {calendar.weeklyTarget && (\r\n                                    <Box>\r\n                                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                        Weekly\r\n                                      </Typography>\r\n                                      <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\r\n                                        {stats.weeklyProgress.toFixed(1)}%\r\n                                      </Typography>\r\n                                    </Box>\r\n                                  )}\r\n                                  {calendar.monthlyTarget && (\r\n                                    <Box>\r\n                                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                        Monthly\r\n                                      </Typography>\r\n                                      <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\r\n                                        {stats.monthlyProgress.toFixed(1)}%\r\n                                      </Typography>\r\n                                    </Box>\r\n                                  )}\r\n                                  {calendar.yearlyTarget && (\r\n                                    <Box>\r\n                                      <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                        Yearly\r\n                                      </Typography>\r\n                                      <Typography variant=\"h6\" sx={{ fontWeight: 600 }}>\r\n                                        {stats.yearlyProgress.toFixed(1)}%\r\n                                      </Typography>\r\n                                    </Box>\r\n                                  )}\r\n                                </Box>\r\n                              </Box>\r\n                            )}\r\n\r\n                            <Box sx={{\r\n                              p: 1.5,\r\n                              borderRadius: 1,\r\n                              bgcolor: alpha(theme.palette.background.default, 0.6)\r\n                            }}>\r\n                              <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\r\n                                PnL Performance\r\n                              </Typography>\r\n                              <Box sx={{\r\n                                display: 'grid',\r\n                                gridTemplateColumns: 'repeat(3, 1fr)',\r\n                                gap: 2\r\n                              }}>\r\n                                <Box>\r\n                                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                    Weekly\r\n                                  </Typography>\r\n                                  <Typography\r\n                                    variant=\"h6\"\r\n                                    sx={{\r\n                                      fontWeight: 600,\r\n                                      color: parseFloat(String(stats.weeklyPnLPercentage)) > 0\r\n                                        ? 'success.main'\r\n                                        : parseFloat(String(stats.weeklyPnLPercentage)) < 0\r\n                                        ? 'error.main'\r\n                                        : 'text.primary'\r\n                                    }}\r\n                                  >\r\n                                    {parseFloat(String(stats.weeklyPnLPercentage)) > 0 ? '+' : ''}{parseFloat(String(stats.weeklyPnLPercentage)).toFixed(1)}%\r\n                                  </Typography>\r\n                                </Box>\r\n                                <Box>\r\n                                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                    Monthly\r\n                                  </Typography>\r\n                                  <Typography\r\n                                    variant=\"h6\"\r\n                                    sx={{\r\n                                      fontWeight: 600,\r\n                                      color: parseFloat(String(stats.monthlyPnLPercentage)) > 0\r\n                                        ? 'success.main'\r\n                                        : parseFloat(String(stats.monthlyPnLPercentage)) < 0\r\n                                        ? 'error.main'\r\n                                        : 'text.primary'\r\n                                    }}\r\n                                  >\r\n                                    {parseFloat(String(stats.monthlyPnLPercentage)) > 0 ? '+' : ''}{parseFloat(String(stats.monthlyPnLPercentage)).toFixed(1)}%\r\n                                  </Typography>\r\n                                </Box>\r\n                                <Box>\r\n                                  <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                    Yearly\r\n                                  </Typography>\r\n                                  <Typography\r\n                                    variant=\"h6\"\r\n                                    sx={{\r\n                                      fontWeight: 600,\r\n                                      color: parseFloat(String(stats.yearlyPnLPercentage)) > 0\r\n                                        ? 'success.main'\r\n                                        : parseFloat(String(stats.yearlyPnLPercentage)) < 0\r\n                                        ? 'error.main'\r\n                                        : 'text.primary'\r\n                                    }}\r\n                                  >\r\n                                    {parseFloat(String(stats.yearlyPnLPercentage)) > 0 ? '+' : ''}{parseFloat(String(stats.yearlyPnLPercentage)).toFixed(1)}%\r\n                                  </Typography>\r\n                                </Box>\r\n                              </Box>\r\n                            </Box>\r\n                          </Stack>\r\n                        </CardContent>\r\n                        <CardActions sx={{\r\n                          justifyContent: 'flex-end',\r\n                          p: 2,\r\n                          pt: 1,\r\n                          borderTop: `1px solid ${alpha(theme.palette.divider, 0.1)}`\r\n                        }}>\r\n                          <Button\r\n                            size=\"small\"\r\n                            startIcon={<ChartIcon />}\r\n                            onClick={(e) => handleViewCharts(e, calendar)}\r\n                            sx={{\r\n                              color: 'primary.main',\r\n                              '&:hover': {\r\n                                bgcolor: alpha(theme.palette.primary.main, 0.1)\r\n                              }\r\n                            }}\r\n                          >\r\n                            View Charts\r\n                          </Button>\r\n                          <Button\r\n                            size=\"small\"\r\n                            onClick={(e) => handleEditClick(e, calendar)}\r\n                            sx={{\r\n                              color: 'primary.main',\r\n                              '&:hover': {\r\n                                bgcolor: alpha(theme.palette.primary.main, 0.1)\r\n                              }\r\n                            }}\r\n                          >\r\n                            Edit\r\n                          </Button>\r\n                          <Button\r\n                            size=\"small\"\r\n                            onClick={(e) => handleDeleteClick(e, calendar.id)}\r\n                            sx={{\r\n                              color: 'error.main',\r\n                              '&:hover': {\r\n                                bgcolor: alpha(theme.palette.error.main, 0.1)\r\n                              }\r\n                            }}\r\n                          >\r\n                            Delete\r\n                          </Button>\r\n                        </CardActions>\r\n                      </Card>\r\n                    );\r\n                  })\r\n                )}\r\n              </Box>\r\n            )}\r\n\r\n            <CalendarFormDialog\r\n              open={isCreateDialogOpen}\r\n              onClose={() => setIsCreateDialogOpen(false)}\r\n              onSubmit={handleCreateCalendarSubmit}\r\n              isSubmitting={isCreating}\r\n              mode=\"create\"\r\n              title=\"Create New Calendar\"\r\n              submitButtonText=\"Create\"\r\n            />\r\n\r\n            <CalendarFormDialog\r\n              open={isEditDialogOpen}\r\n              onClose={() => setIsEditDialogOpen(false)}\r\n              onSubmit={handleEditCalendarSubmit}\r\n              initialData={calendarToEdit || undefined}\r\n              isSubmitting={isEditing}\r\n              mode=\"edit\"\r\n              title=\"Edit Calendar\"\r\n              submitButtonText=\"Save Changes\"\r\n            />\r\n\r\n            <Dialog\r\n              open={isDeleteDialogOpen}\r\n              onClose={() => setIsDeleteDialogOpen(false)}\r\n              maxWidth=\"xs\"\r\n              fullWidth\r\n              {...dialogProps}\r\n            >\r\n              <DialogTitle sx={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                gap: 1,\r\n                color: 'error.main'\r\n              }}>\r\n                <DeleteIcon fontSize=\"small\" />\r\n                Delete Calendar\r\n              </DialogTitle>\r\n              <DialogContent>\r\n                <Typography>\r\n                  Are you sure you want to delete this calendar? This action cannot be undone.\r\n                </Typography>\r\n              </DialogContent>\r\n              <DialogActions>\r\n                <Button\r\n                  onClick={() => setIsDeleteDialogOpen(false)}\r\n                  sx={{ color: 'text.secondary' }}\r\n                >\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  onClick={handleDeleteConfirm}\r\n                  sx={{\r\n                    color: 'error.main',\r\n                  }}\r\n                >\r\n                  Delete\r\n                </Button>\r\n              </DialogActions>\r\n            </Dialog>\r\n\r\n            {/* Performance Charts Dialog */}\r\n            <Dialog\r\n              open={selectedCalendarForCharts !== null}\r\n              onClose={handleCloseCharts}\r\n              maxWidth=\"lg\"\r\n              fullWidth\r\n              {...dialogProps}\r\n              PaperProps={{\r\n                sx: {\r\n                  minHeight: '80vh',\r\n                  maxHeight: '90vh',\r\n                  bgcolor: 'background.paper',\r\n                  backgroundImage: 'none'\r\n                }\r\n              }}\r\n            >\r\n              <DialogTitle sx={{\r\n                borderBottom: `1px solid ${alpha(theme.palette.divider, 0.1)}`,\r\n                pb: 2,\r\n                height: '60px',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'space-between',\r\n                gap: 1\r\n              }}>\r\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                  <ChartIcon color=\"primary\" />\r\n                  <Typography variant=\"h6\">\r\n                    Performance Charts - {selectedCalendarForCharts?.name}\r\n                  </Typography>\r\n                </Box>\r\n                {currentTimePeriod === 'month' ? (\r\n                  <Button\r\n                    onClick={() => setIsDateDialogOpen(true)}\r\n                    startIcon={<CalendarMonth />}\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                  >\r\n                    {format(selectedMonth, 'MMMM yyyy')}\r\n                  </Button>\r\n                ) : currentTimePeriod === 'year' ? (\r\n                  <FormControl size=\"small\" variant=\"outlined\">\r\n                    <Select\r\n                      value={selectedMonth.getFullYear()}\r\n                      onChange={(e) => handleYearChange(e.target.value as number)}\r\n                      sx={{ minWidth: 120 }}\r\n                    >\r\n                      {Array.from(\r\n                        { length: 10 },\r\n                        (_, i) => new Date().getFullYear() - i\r\n                      ).map((year) => (\r\n                        <MenuItem key={year} value={year}>\r\n                          {year}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  </FormControl>\r\n                ) : null}\r\n              </DialogTitle>\r\n              <DialogContent sx={{\r\n                p: 3,\r\n                backgroundColor: theme.palette.mode === 'dark' ? alpha(theme.palette.background.paper, 0.6) : '#f0f0f0',\r\n                '&::-webkit-scrollbar': {\r\n                  width: '8px',\r\n                },\r\n                '&::-webkit-scrollbar-track': {\r\n                  background: alpha(theme.palette.background.default, 0.5),\r\n                  borderRadius: '4px',\r\n                },\r\n                '&::-webkit-scrollbar-thumb': {\r\n                  background: alpha(theme.palette.primary.main, 0.2),\r\n                  borderRadius: '4px',\r\n                  '&:hover': {\r\n                    background: alpha(theme.palette.primary.main, 0.3),\r\n                  },\r\n                },\r\n              }}>\r\n                {selectedCalendarForCharts && (\r\n                  <PerformanceCharts\r\n                    trades={selectedCalendarForCharts.cachedTrades || []}\r\n                    selectedDate={selectedMonth}\r\n                    accountBalance={selectedCalendarForCharts.accountBalance}\r\n                    monthlyTarget={selectedCalendarForCharts.monthlyTarget ?? undefined}\r\n                    maxDailyDrawdown={selectedCalendarForCharts.maxDailyDrawdown}\r\n                    onTimePeriodChange={handleTimePeriodChange}\r\n                  />\r\n                )}\r\n\r\n                 {/* TradeDetailDialog has been removed */}\r\n              </DialogContent>\r\n              <DialogActions sx={{\r\n                p: 2,\r\n                borderTop: `1px solid ${alpha(theme.palette.divider, 0.1)}`,\r\n                gap: 1\r\n              }}>\r\n                <Button\r\n                  onClick={handleCloseCharts}\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                >\r\n                  Close\r\n                </Button>\r\n              </DialogActions>\r\n            </Dialog>\r\n\r\n            {/* Date Selection Dialog */}\r\n            {selectedCalendarForCharts && currentTimePeriod === 'month' && (\r\n              <SelectDateDialog\r\n                open={isDateDialogOpen}\r\n                onClose={() => setIsDateDialogOpen(false)}\r\n                onDateSelect={(date) => {\r\n                  setSelectedMonth(date);\r\n                  setIsDateDialogOpen(false);\r\n                }}\r\n                initialDate={selectedMonth}\r\n                trades={selectedCalendarForCharts.cachedTrades || []}\r\n                accountBalance={selectedCalendarForCharts.accountBalance}\r\n                monthlyTarget={selectedCalendarForCharts.monthlyTarget ?? undefined}\r\n                yearlyTarget={selectedCalendarForCharts.yearlyTarget}\r\n              />\r\n            )}\r\n\r\n\r\n          </>\r\n        ) : (\r\n          <Box sx={{ textAlign: 'center', mt: 8 }}>\r\n            <Typography variant=\"h5\" gutterBottom>\r\n              Welcome to Trade Tracker\r\n            </Typography>\r\n            <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 4 }}>\r\n              Sign in to start managing your trades\r\n            </Typography>\r\n          </Box>\r\n        )}\r\n      </Container>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CalendarHome;"],"names":["_ref","open","onClose","onSubmit","initialData","isSubmitting","mode","title","submitButtonText","name","setName","useState","accountBalance","setAccountBalance","maxDailyDrawdown","setMaxDailyDrawdown","weeklyTarget","setWeeklyTarget","monthlyTarget","setMonthlyTarget","yearlyTarget","setYearlyTarget","riskPerTrade","setRiskPerTrade","dynamicRiskEnabled","setDynamicRiskEnabled","increasedRiskPercentage","setIncreasedRiskPercentage","profitThresholdPercentage","setProfitThresholdPercentage","useEffect","_initialData$accountB","_initialData$maxDaily","_initialData$weeklyTa","_initialData$monthlyT","_initialData$yearlyTa","_initialData$riskPerT","_initialData$increase","_initialData$profitTh","toString","resetForm","isFormValid","trim","dialogTitle","dialogActions","_jsxs","_Fragment","children","_jsx","Button","onClick","disabled","async","balance","parseFloat","maxDrawdown","weeklyTargetValue","undefined","monthlyTargetValue","yearlyTargetValue","riskPerTradeValue","increasedRiskValue","profitThresholdValue","isNaN","variant","sx","minWidth","display","alignItems","gap","CircularProgress","size","color","BaseDialog","maxWidth","fullWidth","actions","Stack","spacing","mt","TextField","label","value","onChange","e","target","autoFocus","test","type","InputProps","startAdornment","Box","component","mr","endAdornment","ml","helperText","border","borderColor","borderRadius","p","Typography","mb","fontWeight","FormControlLabel","control","Switch","checked","shimmer","keyframes","CalendarSkeleton","theme","useTheme","Card","height","CardContent","width","background","alpha","palette","paper","backgroundSize","animation","direction","Divider","my","opacity","map","i","CardActions","justifyContent","pt","borderTop","divider","CalendarHome","_selectedCalendarForC","_selectedCalendarForC2","calendars","onCreateCalendar","onDeleteCalendar","onUpdateCalendar","onToggleTheme","isLoading","externalLoading","loadAllTrades","user","signInWithGoogle","signOut","useAuth","isCreateDialogOpen","setIsCreateDialogOpen","isDeleteDialogOpen","setIsDeleteDialogOpen","isEditDialogOpen","setIsEditDialogOpen","calendarToDelete","setCalendarToDelete","calendarToEdit","setCalendarToEdit","isCreating","setIsCreating","isEditing","setIsEditing","navigate","useNavigate","selectedCalendarForCharts","setSelectedCalendarForCharts","selectedMonth","setSelectedMonth","Date","isDateDialogOpen","setIsDateDialogOpen","currentTimePeriod","setCurrentTimePeriod","loadAttempted","setLoadAttempted","handleCloseCharts","useMemo","trades","cachedTrades","length","dates","trade","date","minDate","Math","min","d","getTime","maxDate","max","months","currentDate","getFullYear","getMonth","endDate","push","AppBar","position","elevation","backdropFilter","backgroundColor","default","borderBottom","Toolbar","flexGrow","IconButton","bgcolor","primary","main","LightModeIcon","DarkModeIcon","email","Avatar","src","photoURL","fontSize","toUpperCase","startIcon","LogoutIcon","error","console","GoogleIcon","Container","AddIcon","gridTemplateColumns","xs","sm","md","Array","from","_","index","calendar","stats","getCalendarStats","cursor","transition","overflow","transform","boxShadow","shadows","content","top","left","right","find","c","id","calendarId","loadedYears","prev","handleCalendarClick","className","bottom","light","pointerEvents","gutterBottom","totalPnL","TrendingUp","TrendingDown","CalendarIcon","format","createdAt","EditIcon","lastModified","success","grey","formatCurrency","growthPercentage","toFixed","initialBalance","winRate","winCount","lossCount","Tooltip","arrow","placement","InfoOutlined","profitFactor","avgWin","drawdownRecoveryNeeded","drawdownDuration","drawdownStartDate","drawdownEndDate","avgLoss","weeklyProgress","monthlyProgress","yearlyProgress","String","weeklyPnLPercentage","monthlyPnLPercentage","yearlyPnLPercentage","ChartIcon","stopPropagation","updatedCalendar","handleViewCharts","handleEditClick","handleDeleteClick","flexDirection","py","align","CalendarFormDialog","data","updates","Dialog","dialogProps","DialogTitle","DeleteIcon","DialogContent","DialogActions","handleDeleteConfirm","PaperProps","minHeight","maxHeight","backgroundImage","pb","CalendarMonth","FormControl","Select","year","newDate","handleYearChange","MenuItem","PerformanceCharts","selectedDate","onTimePeriodChange","period","SelectDateDialog","onDateSelect","initialDate","textAlign"],"sourceRoot":""}