{"version":3,"file":"static/js/782.017a0f59.chunk.js","mappings":"uOAgBA,MAAMA,EAAuB,YAahBC,EAAsBC,MAAOC,EAAoBC,KAC5D,IACE,MAAMC,GAAcC,EAAAA,EAAAA,IAAIC,EAAAA,GAAIP,EAAsBG,GAC5CK,EAAM,IAAIC,KACVC,EAAe,IAAID,KAAKD,EAAIG,UAAaC,cAEzCC,EAAAA,EAAAA,IAAUR,EAAa,CAC3BS,WAAW,EACXC,UAAWC,EAAAA,GAAUC,SAAST,GAC9BU,UAAWd,EACXM,aAAcM,EAAAA,GAAUC,SAASP,GACjCS,aAAcH,EAAAA,GAAUC,SAAST,KAGnCY,QAAQC,IAAI,YAAYlB,mBAC1B,CAAE,MAAOmB,GAEP,MADAF,QAAQE,MAAM,kCAAmCA,GAC3CA,CACR,GAOWC,EAA2BrB,UACtC,IACE,MAAMG,GAAcC,EAAAA,EAAAA,IAAIC,EAAAA,GAAIP,EAAsBG,SAE5CqB,EAAAA,EAAAA,IAAejB,EAAAA,IAAIL,UACvB,MAAMuB,QAAoBC,EAAYC,IAAItB,GAE1C,IAAKoB,EAAYG,SACf,MAAM,IAAIC,MAAM,sBAIlB,IADqBJ,EAAYK,OACfhB,UAChB,MAAM,IAAIe,MAAM,4BAIlBH,EAAYK,OAAO1B,EAAa,CAC9BS,WAAW,EACXC,UAAW,KACXG,UAAW,KACXR,aAAc,KACdS,aAAcH,EAAAA,GAAUC,SAAS,IAAIR,OACrC,IAGJW,QAAQC,IAAI,YAAYlB,wBAC1B,CAAE,MAAOmB,GAEP,MADAF,QAAQE,MAAM,uCAAwCA,GAChDA,CACR,GAOWU,EAA4B9B,UACvC,IACE,MAAMG,GAAcC,EAAAA,EAAAA,IAAIC,EAAAA,GAAIP,EAAsBG,SAE5CqB,EAAAA,EAAAA,IAAejB,EAAAA,IAAIL,UACvB,MAAMuB,QAAoBC,EAAYC,IAAItB,GAE1C,IAAKoB,EAAYG,SACf,MAAM,IAAIC,MAAM,sBAIlB,IADqBJ,EAAYK,OACfhB,UAChB,MAAM,IAAIe,MAAM,4BAIlBH,EAAYO,OAAO5B,EAAY,IAGjCe,QAAQC,IAAI,YAAYlB,wBAC1B,CAAE,MAAOmB,GAEP,MADAF,QAAQE,MAAM,uCAAwCA,GAChDA,CACR,GAMWY,EAAoBhC,UAC/B,IACE,MAAMiC,GAAIC,EAAAA,EAAAA,IACRC,EAAAA,EAAAA,IAAW9B,EAAAA,GAAIP,IACfsC,EAAAA,EAAAA,IAAM,SAAU,KAAMlC,IACtBkC,EAAAA,EAAAA,IAAM,YAAa,MAAM,IAK3B,aAF4BC,EAAAA,EAAAA,IAAQJ,IAEfK,KAAKC,KAAInC,IAC5B,MAAMoC,GAAWC,EAAAA,EAAAA,IAA+BrC,GAC1CwB,EAAOxB,EAAIwB,OAEjB,MAAO,IACFY,EACH3B,UAAWe,EAAKf,UAAU6B,SAC1B1B,UAAWY,EAAKZ,UAChBR,aAAcoB,EAAKpB,aAAakC,SACjC,GAEL,CAAE,MAAOtB,GAEP,MADAF,QAAQE,MAAM,iCAAkCA,GAC1CA,CACR,GAiEWuB,EAAwBnC,IACnC,MAAMF,EAAM,IAAIC,KACVqC,EAAWpC,EAAaC,UAAYH,EAAIG,UACxCoC,EAAWC,KAAKC,KAAKH,EAAQ,OACnC,OAAOE,KAAKE,IAAI,EAAGH,EAAS,C","sources":["services/trashService.ts"],"sourcesContent":["import { \n  collection, \n  doc, \n  updateDoc, \n  deleteDoc, \n  query, \n  where, \n  getDocs, \n  Timestamp,\n  runTransaction,\n  getDoc\n} from 'firebase/firestore';\nimport { db } from '../firebase/config';\nimport { Calendar } from '../types/calendar';\nimport { convertFirestoreDataToCalendar } from './calendarService';\n\nconst CALENDARS_COLLECTION = 'calendars';\nconst TRASH_RETENTION_DAYS = 30;\n\nexport interface TrashCalendar extends Calendar {\n  deletedAt: Date;\n  deletedBy: string;\n  autoDeleteAt: Date;\n}\n\n/**\n * Move a calendar to trash (soft delete)\n * Marks the calendar as deleted and sets deletion timestamps\n */\nexport const moveCalendarToTrash = async (calendarId: string, userId: string): Promise<void> => {\n  try {\n    const calendarRef = doc(db, CALENDARS_COLLECTION, calendarId);\n    const now = new Date();\n    const autoDeleteAt = new Date(now.getTime() + (TRASH_RETENTION_DAYS * 24 * 60 * 60 * 1000));\n\n    await updateDoc(calendarRef, {\n      isDeleted: true,\n      deletedAt: Timestamp.fromDate(now),\n      deletedBy: userId,\n      autoDeleteAt: Timestamp.fromDate(autoDeleteAt),\n      lastModified: Timestamp.fromDate(now)\n    });\n\n    console.log(`Calendar ${calendarId} moved to trash`);\n  } catch (error) {\n    console.error('Error moving calendar to trash:', error);\n    throw error;\n  }\n};\n\n/**\n * Restore a calendar from trash\n * Removes deletion markers and restores the calendar\n */\nexport const restoreCalendarFromTrash = async (calendarId: string): Promise<void> => {\n  try {\n    const calendarRef = doc(db, CALENDARS_COLLECTION, calendarId);\n\n    await runTransaction(db, async (transaction) => {\n      const calendarDoc = await transaction.get(calendarRef);\n      \n      if (!calendarDoc.exists()) {\n        throw new Error('Calendar not found');\n      }\n\n      const calendarData = calendarDoc.data();\n      if (!calendarData.isDeleted) {\n        throw new Error('Calendar is not in trash');\n      }\n\n      // Remove deletion markers\n      transaction.update(calendarRef, {\n        isDeleted: false,\n        deletedAt: null,\n        deletedBy: null,\n        autoDeleteAt: null,\n        lastModified: Timestamp.fromDate(new Date())\n      });\n    });\n\n    console.log(`Calendar ${calendarId} restored from trash`);\n  } catch (error) {\n    console.error('Error restoring calendar from trash:', error);\n    throw error;\n  }\n};\n\n/**\n * Permanently delete a calendar from trash\n * This action cannot be undone\n */\nexport const permanentlyDeleteCalendar = async (calendarId: string): Promise<void> => {\n  try {\n    const calendarRef = doc(db, CALENDARS_COLLECTION, calendarId);\n\n    await runTransaction(db, async (transaction) => {\n      const calendarDoc = await transaction.get(calendarRef);\n      \n      if (!calendarDoc.exists()) {\n        throw new Error('Calendar not found');\n      }\n\n      const calendarData = calendarDoc.data();\n      if (!calendarData.isDeleted) {\n        throw new Error('Calendar is not in trash');\n      }\n\n      // Permanently delete the calendar document\n      transaction.delete(calendarRef);\n    });\n\n    console.log(`Calendar ${calendarId} permanently deleted`);\n  } catch (error) {\n    console.error('Error permanently deleting calendar:', error);\n    throw error;\n  }\n};\n\n/**\n * Get all calendars in trash for a user\n */\nexport const getTrashCalendars = async (userId: string): Promise<TrashCalendar[]> => {\n  try {\n    const q = query(\n      collection(db, CALENDARS_COLLECTION), \n      where(\"userId\", \"==\", userId),\n      where(\"isDeleted\", \"==\", true)\n    );\n    \n    const querySnapshot = await getDocs(q);\n    \n    return querySnapshot.docs.map(doc => {\n      const calendar = convertFirestoreDataToCalendar(doc);\n      const data = doc.data();\n      \n      return {\n        ...calendar,\n        deletedAt: data.deletedAt.toDate(),\n        deletedBy: data.deletedBy,\n        autoDeleteAt: data.autoDeleteAt.toDate()\n      } as TrashCalendar;\n    });\n  } catch (error) {\n    console.error('Error getting trash calendars:', error);\n    throw error;\n  }\n};\n\n/**\n * Get calendars that are ready for automatic deletion\n * Used by cleanup functions\n */\nexport const getCalendarsReadyForDeletion = async (): Promise<TrashCalendar[]> => {\n  try {\n    const now = new Date();\n    const q = query(\n      collection(db, CALENDARS_COLLECTION),\n      where(\"isDeleted\", \"==\", true),\n      where(\"autoDeleteAt\", \"<=\", Timestamp.fromDate(now))\n    );\n    \n    const querySnapshot = await getDocs(q);\n    \n    return querySnapshot.docs.map(doc => {\n      const calendar = convertFirestoreDataToCalendar(doc);\n      const data = doc.data();\n      \n      return {\n        ...calendar,\n        deletedAt: data.deletedAt.toDate(),\n        deletedBy: data.deletedBy,\n        autoDeleteAt: data.autoDeleteAt.toDate()\n      } as TrashCalendar;\n    });\n  } catch (error) {\n    console.error('Error getting calendars ready for deletion:', error);\n    throw error;\n  }\n};\n\n/**\n * Clean up expired calendars from trash\n * This should be called periodically (e.g., by a cloud function)\n */\nexport const cleanupExpiredCalendars = async (): Promise<number> => {\n  try {\n    const expiredCalendars = await getCalendarsReadyForDeletion();\n    let deletedCount = 0;\n\n    for (const calendar of expiredCalendars) {\n      try {\n        await permanentlyDeleteCalendar(calendar.id);\n        deletedCount++;\n        console.log(`Auto-deleted expired calendar: ${calendar.id} (${calendar.name})`);\n      } catch (error) {\n        console.error(`Failed to auto-delete calendar ${calendar.id}:`, error);\n      }\n    }\n\n    console.log(`Cleanup completed: ${deletedCount} calendars permanently deleted`);\n    return deletedCount;\n  } catch (error) {\n    console.error('Error during cleanup:', error);\n    throw error;\n  }\n};\n\n/**\n * Get days remaining until permanent deletion\n */\nexport const getDaysUntilDeletion = (autoDeleteAt: Date): number => {\n  const now = new Date();\n  const timeDiff = autoDeleteAt.getTime() - now.getTime();\n  const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));\n  return Math.max(0, daysDiff);\n};\n\n/**\n * Check if a calendar is in trash\n */\nexport const isCalendarInTrash = async (calendarId: string): Promise<boolean> => {\n  try {\n    const calendarRef = doc(db, CALENDARS_COLLECTION, calendarId);\n    const calendarDoc = await getDoc(calendarRef);\n    \n    if (!calendarDoc.exists()) {\n      return false;\n    }\n    \n    const data = calendarDoc.data();\n    return data.isDeleted === true;\n  } catch (error) {\n    console.error('Error checking if calendar is in trash:', error);\n    return false;\n  }\n};\n"],"names":["CALENDARS_COLLECTION","moveCalendarToTrash","async","calendarId","userId","calendarRef","doc","db","now","Date","autoDeleteAt","getTime","TRASH_RETENTION_DAYS","updateDoc","isDeleted","deletedAt","Timestamp","fromDate","deletedBy","lastModified","console","log","error","restoreCalendarFromTrash","runTransaction","calendarDoc","transaction","get","exists","Error","data","update","permanentlyDeleteCalendar","delete","getTrashCalendars","q","query","collection","where","getDocs","docs","map","calendar","convertFirestoreDataToCalendar","toDate","getDaysUntilDeletion","timeDiff","daysDiff","Math","ceil","max"],"sourceRoot":""}